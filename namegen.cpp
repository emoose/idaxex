#include <string>
#include <sstream>
#include <iomanip>

// TODO: allow using namegen from an external file instead?
// eg. x360_imports.idc ala xorlosers loader?

const char* connectxNameGen(int id)
{
  if (id == 0x00000001) return "CxGetVersion";
  if (id == 0x00000002) return "NbtNetbios";
  if (id == 0x00000003) return "SmbCloseHandle";
  if (id == 0x00000004) return "SmbCreateDirectoryW";
  if (id == 0x00000005) return "SmbCreateFileW";
  if (id == 0x00000006) return "SmbDeleteFileW";
  if (id == 0x00000007) return "SmbFindClose";
  if (id == 0x00000008) return "SmbFindFirstFileW";
  if (id == 0x00000009) return "SmbFindNextFile";
  if (id == 0x0000000A) return "SmbFlushFileBuffers";
  if (id == 0x0000000B) return "SmbGetDiskFreeSpaceW";
  if (id == 0x0000000C) return "SmbGetFileAttributesW";
  if (id == 0x0000000D) return "SmbGetFileInformationByHandle";
  if (id == 0x0000000E) return "SmbGetFileSize";
  if (id == 0x0000000F) return "SmbGetFileTime";
  if (id == 0x00000010) return "SmbMoveFileW";
  if (id == 0x00000011) return "SmbReadFile";
  if (id == 0x00000012) return "SmbRemoveDirectoryW";
  if (id == 0x00000013) return "SmbSetEndOfFile";
  if (id == 0x00000014) return "SmbSetFileAttributesW";
  if (id == 0x00000015) return "SmbSetFilePointer";
  if (id == 0x00000016) return "SmbSetFileTime";
  if (id == 0x00000017) return "SmbStartup";
  if (id == 0x00000018) return "SmbWriteFile";

  return nullptr;
}

const char* createprofileNameGen(int id)
{
  if (id == 0x00000001) return "CreateProfile_Register";
  if (id == 0x00000002) return "CreateProfile_Unregister";

  return nullptr;
}

const char* vkNameGen(int id)
{
  if (id == 0x00000001) return "RegisterXuiClasses";
  if (id == 0x00000002) return "VK_UnInit";
  if (id == 0x00000003) return "VK_CreateScene";
  if (id == 0x00000004) return "VK_GetUserCancelled";

  return nullptr;
}

const char* xamNameGen_1640(int id)
{
  if (id == 0x00000002) return "XSolidFiller_Finalize";
  if (id == 0x00000003) return "DbgInit";
  if (id == 0x00000004) return "XSolidFiller_Finalize2";
  if (id == 0x00000005) return "DbgAssertSzFmt";
  if (id == 0x0000000A) return "XamInputGetCapabilities";
  if (id == 0x0000000B) return "XamInputGetState";
  if (id == 0x0000000C) return "XamInputSetState";
  if (id == 0x0000000D) return "XamInputGetKeystroke";
  if (id == 0x0000000E) return "XamInputEnableAutobind";
  if (id == 0x0000000F) return "?XamInputRawState@@YAKKKHPAU_XINPUT_RAW@@@Z";
  if (id == 0x00000010) return "XamEnableSystemAppInput";
  if (id == 0x00000011) return "XamInputGetDeviceStats";
  if (id == 0x00000012) return "XamInputGetKeystrokeEx";
  if (id == 0x00000014) return "XLaunchNewImage";
  if (id == 0x00000015) return "XLaunchNewImageEx";
  if (id == 0x00000016) return "XSetLaunchData";
  if (id == 0x00000017) return "XGetLaunchDataSize";
  if (id == 0x00000018) return "XGetLaunchData";
  if (id == 0x00000019) return "XamTerminateTitle";
  if (id == 0x0000001D) return "XamExecutingOnBehalfOfTitle";
  if (id == 0x0000001E) return "XamTaskCreateQueue";
  if (id == 0x0000001F) return "XamTaskSchedule";
  if (id == 0x00000020) return "XamTaskReschedule";
  if (id == 0x00000021) return "XamTaskCloseHandle";
  if (id == 0x00000022) return "XamTaskCancel";
  if (id == 0x00000023) return "XamTaskShouldExit";
  if (id == 0x00000024) return "XamTaskWaitOnCompletion";
  if (id == 0x00000025) return "XamTaskModify";
  if (id == 0x00000026) return "XamTaskGetCurrentTask";
  if (id == 0x00000027) return "XamTaskGetAttributes";
  if (id == 0x00000028) return "XamApplySkin";
  if (id == 0x00000029) return "XamGetRootObj";
  if (id == 0x0000002A) return "XamFormatMessage";
  if (id == 0x0000002B) return "XamBuildResourceLocator";
  if (id == 0x0000002C) return "XamShowMessageBox";
  if (id == 0x0000002D) return "XCustomGetBannerImage";
  if (id == 0x0000002E) return "XCustomSetBannerImage";
  if (id == 0x0000002F) return "XCustomSetAction";
  if (id == 0x00000030) return "XCustomGetLastActionPress";
  if (id == 0x00000031) return "XCustomGetActionSetting";
  if (id == 0x00000032) return "XCustomBroadcastActionEvent";
  if (id == 0x00000033) return "XamGetBkgndDefault";
  if (id == 0x00000037) return "XamAlloc";
  if (id == 0x00000038) return "XamAllocEx";
  if (id == 0x00000039) return "XamFree";
  if (id == 0x0000003A) return "XamAllocSize";
  if (id == 0x0000003C) return "XMsgInProcessCall";
  if (id == 0x0000003D) return "XMsgCompleteIORequest";
  if (id == 0x0000003E) return "XMsgSystemProcessCall";
  if (id == 0x0000003F) return "XMsgStartIORequest";
  if (id == 0x00000040) return "XMsgCancelIORequest";
  if (id == 0x00000041) return "XMsgAcquireAsyncMessageFromOverlapped";
  if (id == 0x00000042) return "XMsgReleaseAsyncMessageToOverlapped";
  if (id == 0x00000043) return "XamGetOverlappedResult";
  if (id == 0x00000046) return "XamUserGetDeviceContext";
  if (id == 0x00000047) return "XamUserLookupDevice";
  if (id == 0x00000048) return "XamUserGetXUID";
  if (id == 0x00000049) return "XamUserLogon";
  if (id == 0x0000004A) return "XamUserGetGamerTag";
  if (id == 0x0000004B) return "XamUserGetUserIndexMask";
  if (id == 0x0000004C) return "XamUserGetName";
  if (id == 0x0000004E) return "XamUserGetSigninState";
  if (id == 0x0000004F) return "XamUserGetIndexFromXUID";
  if (id == 0x00000050) return "XamUserCheckPrivilege";
  if (id == 0x00000051) return "XamUserAreUsersFriends";
  if (id == 0x00000052) return "XamSetUserPresetPresenceState";
  if (id == 0x00000053) return "XamGetUserPresetPresenceState";
  if (id == 0x00000054) return "XamUserGetUserFlagsFromXUID";
  if (id == 0x00000055) return "XamUserGetMembershipTierFromXUID";
  if (id == 0x00000056) return "XamUserGetOnlineCountryFromXUID";
  if (id == 0x00000057) return "XamUserReadProfileSettings";
  if (id == 0x00000058) return "XamUserWriteProfileSettings";
  if (id == 0x00000059) return "XamUserGetMembershipTier";
  if (id == 0x0000005A) return "XamUserGetUserFlags";
  if (id == 0x0000005B) return "XamUserGetRequestedUserIndexMask";
  if (id == 0x0000005C) return "XamUserIsGuest";
  if (id == 0x00000064) return "XamProfileCreate";
  if (id == 0x00000065) return "XamProfileCreateEnumerator";
  if (id == 0x00000066) return "XamProfileEnumerate";
  if (id == 0x00000067) return "XamProfileEnumerateCD";
  if (id == 0x00000068) return "XamProfileDelete";
  if (id == 0x00000069) return "XamProfileGetCreationStatus";
  if (id == 0x0000006A) return "XamProfileFindAccount";
  if (id == 0x0000006B) return "XamProfileRenameAccount";
  if (id == 0x0000006C) return "XamProfileOpen";
  if (id == 0x0000006D) return "XamProfileClose";
  if (id == 0x0000006E) return "XamAppLoad";
  if (id == 0x00000070) return "XamAppUnloadSelf";
  if (id == 0x00000071) return "XamAppUnloadStack";
  if (id == 0x00000072) return "XamSendMessageToLoadedApps";
  if (id == 0x00000073) return "XamAppRequestLoad";
  if (id == 0x00000074) return "XamAppUnrequestLoad";
  if (id == 0x00000075) return "XamNavigate";
  if (id == 0x00000078) return "?XamVoiceCreate@@YAJKKPAPAX@Z";
  if (id == 0x00000079) return "?XamVoiceSubmitPacket@@YAJPAXHPAUXMEDIAPACKET@@@Z";
  if (id == 0x0000007A) return "?XamVoiceClose@@YAHPAX@Z";
  if (id == 0x00000082) return "XamContentCreate";
  if (id == 0x00000083) return "XamContentDelete";
  if (id == 0x00000084) return "XamContentClose";
  if (id == 0x00000085) return "XamContentCreateEnumerator";
  if (id == 0x00000086) return "XamContentCreateDeviceEnumerator";
  if (id == 0x00000087) return "XamContentGetDeviceData";
  if (id == 0x00000088) return "XamContentGetDeviceName";
  if (id == 0x00000089) return "XamContentCopyInternal";
  if (id == 0x0000008A) return "XamContentMoveInternal";
  if (id == 0x0000008B) return "XamContentGetMetaDataInternal";
  if (id == 0x0000008C) return "XamContentCreateEnumeratorInternal";
  if (id == 0x0000008D) return "XamContentAggregateCreateEnumerator";
  if (id == 0x0000008E) return "XamContentDeleteInternal";
  if (id == 0x0000008F) return "XamContentCreateInternal";
  if (id == 0x00000090) return "XamContentCreatePackage";
  if (id == 0x00000096) return "XamNotifyCreateListener";
  if (id == 0x00000097) return "XNotifyGetNext";
  if (id == 0x00000098) return "XNotifyPositionUI";
  if (id == 0x00000099) return "XNotifyDelayUI";
  if (id == 0x0000009A) return "XNotifyBroadcast";
  if (id == 0x0000009B) return "XNotifyRegisterArea";
  if (id == 0x0000009C) return "XNotifyQueueUI";
  if (id == 0x0000009D) return "XamNotifyCreateListenerInternal";
  if (id == 0x0000009E) return "XNotifyUISetOptions";
  if (id == 0x0000009F) return "XNotifyUIGetOptions";
  if (id == 0x000000A0) return "XamEnableInactivityProcessing";
  if (id == 0x000000A1) return "XamSetInactivityTime";
  if (id == 0x000000A4) return "XamCreateEnumeratorHandle";
  if (id == 0x000000A5) return "XamGetPrivateEnumStructureFromHandle";
  if (id == 0x000000A6) return "XamEnumerate";
  if (id == 0x000000AA) return "XamUpdateStart";
  if (id == 0x000000AB) return "XamUpdateGetProgress";
  if (id == 0x000000AC) return "XamUpdateGetExtenderInstance";
  if (id == 0x000000AD) return "XamUpdateFinish";
  if (id == 0x000000C9) return "XamShowSigninUI";
  if (id == 0x000000CA) return "XamShowSigninUIp";
  if (id == 0x000000CB) return "XamShowFriendsUI";
  if (id == 0x000000CC) return "XamShowMessagesUI";
  if (id == 0x000000CD) return "XamShowKeyboardUI";
  if (id == 0x000000CE) return "XamShowQuickChatUI";
  if (id == 0x000000CF) return "XamShowVoiceMailUI";
  if (id == 0x000000D0) return "XamShowGamerCardUI";
  if (id == 0x000000D1) return "XamShowAchievementsUI";
  if (id == 0x000000D2) return "XamShowPlayerReviewUI";
  if (id == 0x000000D3) return "XamShowMarketplaceUI";
  if (id == 0x000000D4) return "XamShowPlayersUI";
  if (id == 0x000000D5) return "XamShowUpdaterUI";
  if (id == 0x000000D6) return "XamShowMessageBoxUI";
  if (id == 0x000000D7) return "XamShowDeviceSelectorUI";
  if (id == 0x000000D8) return "XamShowMessageComposeUI";
  if (id == 0x000000D9) return "XamShowGameInviteUI";
  if (id == 0x000000DA) return "XamShowFriendRequestUI";
  if (id == 0x000000DB) return "XamShowCreateProfileUI";
  if (id == 0x000000DC) return "XamShowGamesUI";
  if (id == 0x000000DD) return "XamShowLiveSignupUI";
  if (id == 0x000000DE) return "XamShowFriendsUIp";
  if (id == 0x000000DF) return "XamShowComplaintUI";
  if (id == 0x000000E0) return "XamShowReputationUI";
  if (id == 0x000000E1) return "XamShowGamerCardUIForXUID";
  if (id == 0x000000FA) return "XamUserCreateAchievementEnumerator";
  if (id == 0x000000FB) return "XamReadTile";
  if (id == 0x000000FC) return "XamWriteGamerTile";
  if (id == 0x000000FD) return "XamWriteTile";
  if (id == 0x000000FE) return "?XamReadImage@@YAJW4XTILETYPE@@KK_KPAPAU_XUIBRUSH@@@Z";
  if (id == 0x000000FF) return "XamUserCreateTitlesPlayedEnumerator";
  if (id == 0x00000100) return "XamDecompressPNGToTexture";
  if (id == 0x00000101) return "XamReadTileToTexture";
  if (id == 0x00000102) return "XamReadString";
  if (id == 0x00000103) return "XamUserCreateStatsEnumerator";
  if (id == 0x00000104) return "XamUserAddRecentPlayer";
  if (id == 0x00000105) return "XamUserUpdateRecentPlayer";
  if (id == 0x00000106) return "XamUserCreatePlayerEnumerator";
  if (id == 0x00000107) return "XamParseGamerTileKey";
  if (id == 0x0000012C) return "XamCacheStoreFile";
  if (id == 0x0000012D) return "XamCacheFetchFile";
  if (id == 0x0000012E) return "XamCacheOpenFile";
  if (id == 0x0000012F) return "XamCacheCloseFile";
  if (id == 0x00000130) return "XamGetCachedTitleName";
  if (id == 0x000001F4) return "XuiAnimRun";
  if (id == 0x000001F5) return "XuiApplyLocale";
  if (id == 0x000001F6) return "XuiBubbleMessage";
  if (id == 0x000001F7) return "XuiControlIsBackButton";
  if (id == 0x000001F8) return "XuiControlIsNavButton";
  if (id == 0x000001F9) return "XuiCreateObject";
  if (id == 0x000001FA) return "XuiDestroyObject";
  if (id == 0x000001FB) return "XuiDynamicCast";
  if (id == 0x000001FC) return "XuiElementAddChild";
  if (id == 0x000001FD) return "XuiElementFindNamedFrame";
  if (id == 0x000001FE) return "XuiElementGetChildById";
  if (id == 0x000001FF) return "XuiElementGetFirstChild";
  if (id == 0x00000200) return "XuiElementGetFocus";
  if (id == 0x00000201) return "XuiElementGetFocusUser";
  if (id == 0x00000202) return "XuiElementGetId";
  if (id == 0x00000203) return "XuiElementGetLastChild";
  if (id == 0x00000204) return "XuiElementGetNext";
  if (id == 0x00000205) return "XuiElementGetParent";
  if (id == 0x00000206) return "XuiElementGetUserFocus";
  if (id == 0x00000207) return "XuiElementInitFocus";
  if (id == 0x00000208) return "XuiElementInitUserFocus";
  if (id == 0x00000209) return "XuiElementPlayTimeline";
  if (id == 0x0000020A) return "XuiElementSetBounds";
  if (id == 0x0000020B) return "XuiElementSetFocus";
  if (id == 0x0000020C) return "XuiElementSetUserFocus";
  if (id == 0x0000020D) return "XuiElementTreeGetFocus";
  if (id == 0x0000020E) return "XuiFindClass";
  if (id == 0x0000020F) return "XuiFreeStringTable";
  if (id == 0x00000210) return "XuiGetBaseObject";
  if (id == 0x00000211) return "XuiGetClass";
  if (id == 0x00000212) return "XuiGetObjectClass";
  if (id == 0x00000213) return "XuiGetOuter";
  if (id == 0x00000214) return "XuiInit";
  if (id == 0x00000215) return "XuiLoadFromBinary";
  if (id == 0x00000216) return "XuiLoadStringTableFromFile";
  if (id == 0x00000217) return "XuiVisualGetBasePath";
  if (id == 0x00000218) return "XuiLookupStringTable";
  if (id == 0x00000219) return "XuiNavButtonGetPressPath";
  if (id == 0x0000021A) return "XuiObjectFromHandle";
  if (id == 0x0000021B) return "XuiObjectGetProperty";
  if (id == 0x0000021C) return "XuiObjectGetPropertyId";
  if (id == 0x0000021D) return "XuiProcessInput";
  if (id == 0x0000021E) return "XuiRegisterClass";
  if (id == 0x0000021F) return "XuiRenderBegin";
  if (id == 0x00000220) return "XuiRenderCreateDC";
  if (id == 0x00000221) return "XuiRenderDCDeviceChanged";
  if (id == 0x00000222) return "XuiRenderDestroyDC";
  if (id == 0x00000223) return "XuiRenderEnd";
  if (id == 0x00000224) return "XuiRenderGetBackBufferSize";
  if (id == 0x00000225) return "XuiRenderInit";
  if (id == 0x00000226) return "XuiRenderInitShared";
  if (id == 0x00000227) return "XuiRenderPresent";
  if (id == 0x00000228) return "XuiRenderSetViewTransform";
  if (id == 0x00000229) return "XuiRenderUninit";
  if (id == 0x0000022B) return "XuiSceneCreate";
  if (id == 0x0000022C) return "XuiSceneNavigateBack";
  if (id == 0x0000022D) return "XuiSceneNavigateFirst";
  if (id == 0x0000022E) return "XuiSceneNavigateForward";
  if (id == 0x0000022F) return "XuiScenePlayBackFromTransition";
  if (id == 0x00000230) return "XuiScenePlayBackToTransition";
  if (id == 0x00000231) return "XuiScenePlayFromTransition";
  if (id == 0x00000232) return "XuiScenePlayToTransition";
  if (id == 0x00000233) return "XuiSendMessage";
  if (id == 0x00000234) return "XuiSetLocale";
  if (id == 0x00000235) return "XuiUninit";
  if (id == 0x00000236) return "XuiUnregisterClass";
  if (id == 0x00000237) return "XuiTextElementSetText";
  if (id == 0x00000238) return "XuiSetTimer";
  if (id == 0x00000239) return "XuiTimersRun";
  if (id == 0x0000023A) return "XuiTextElementGetText";
  if (id == 0x0000023B) return "XuiVisualSetBasePath";
  if (id == 0x0000023C) return "XuiHandleIsValid";
  if (id == 0x0000023D) return "XuiAlloc";
  if (id == 0x0000023E) return "XuiFree";
  if (id == 0x0000023F) return "XuiDefault_True";
  if (id == 0x00000240) return "XuiDefault_EmptyString";
  if (id == 0x00000241) return "XuiDefault_IntegerZero";
  if (id == 0x00000242) return "XuiCopyString";
  if (id == 0x00000243) return "XuiRealloc";
  if (id == 0x00000244) return "XuiControlPlayOptionalVisual";
  if (id == 0x00000245) return "XuiKillTimer";
  if (id == 0x00000246) return "XuiElementEnableInput";
  if (id == 0x00000247) return "XuiElementInputEnabled";
  if (id == 0x00000248) return "XuiIsInstanceOf";
  if (id == 0x00000249) return "XuiResourceComposeLocator";
  if (id == 0x0000024A) return "XuiResourceLocatorIsAbsolute";
  if (id == 0x0000024B) return "XuiBroadcastMessage";
  if (id == 0x0000024C) return "XuiElementDisallowRecursiveTimelineControl";
  if (id == 0x0000024D) return "XUIElementPropVal_Construct";
  if (id == 0x0000024E) return "XUIElementPropVal_Destruct";
  if (id == 0x0000024F) return "XUIElementPropVal_SetString";
  if (id == 0x00000250) return "XuiObjectSetProperty";
  if (id == 0x00000251) return "XuiElementGetOpacity";
  if (id == 0x00000252) return "XuiElementSetOpacity";
  if (id == 0x00000253) return "XuiEditSetTextLimit";
  if (id == 0x00000254) return "XuiEditGetTextLimit";
  if (id == 0x00000255) return "XuiSliderSetValue";
  if (id == 0x00000256) return "XuiSliderGetValue";
  if (id == 0x00000257) return "XuiSliderSetRange";
  if (id == 0x00000258) return "XuiElementUnlink";
  if (id == 0x00000259) return "XuiElementInsertChild";
  if (id == 0x0000025A) return "XuiSceneNavigateBackToFirst";
  if (id == 0x0000025B) return "XuiProgressBarSetRange";
  if (id == 0x0000025C) return "XuiProgressBarSetValue";
  if (id == 0x0000025D) return "XuiProgressBarGetValue";
  if (id == 0x0000025E) return "XuiControlAttachVisual";
  if (id == 0x0000025F) return "XuiCreateTextureBrush";
  if (id == 0x00000260) return "XuiDestroyBrush";
  if (id == 0x00000261) return "XUIElementPropVal_SetColorFromUint";
  if (id == 0x00000262) return "XuiFigureSetFill";
  if (id == 0x00000263) return "XuiSliderGetRange";
  if (id == 0x00000264) return "XuiFigureSetTexture";
  if (id == 0x00000265) return "XuiControlGetItemAssociation";
  if (id == 0x00000266) return "XuiResourceLoadAll";
  if (id == 0x00000267) return "XuiImageElementSetImagePath";
  if (id == 0x00000268) return "XuiImageElementGetImagePath";
  if (id == 0x00000269) return "XuiControlGetVisual";
  if (id == 0x0000026A) return "XuiControlGetNavigation";
  if (id == 0x0000026B) return "XuiLookupStringTableByIndex";
  if (id == 0x0000026C) return "XUIElementPropVal_SetBool";
  if (id == 0x0000026D) return "XuiElementHasFocus";
  if (id == 0x0000026E) return "XUIElementPropVal_SetUint";
  if (id == 0x0000026F) return "XUIElementPropVal_Clear";
  if (id == 0x00000270) return "XuiEditSetTextFormatInfo";
  if (id == 0x00000271) return "XuiCreateSolidBrush";
  if (id == 0x00000272) return "XuiSceneInterruptTransitions";
  if (id == 0x00000273) return "XuiResourceOpen";
  if (id == 0x00000274) return "XuiResourceRead";
  if (id == 0x00000275) return "XuiResourceClose";
  if (id == 0x000002BC) return "XGetAudioFlags";
  if (id == 0x000002BD) return "XGetAVPack";
  if (id == 0x000002BE) return "XGetGameRegion";
  if (id == 0x000002BF) return "XGetLanguage";
  if (id == 0x000002C0) return "XGetParentalControlSetting";
  if (id == 0x000002C1) return "XGetVideoFlags";
  if (id == 0x000002C2) return "XGetVideoStandard";
  if (id == 0x000002C3) return "XGetVideoMode";
  if (id == 0x000002D0) return "XamSetDashContext";
  if (id == 0x000002D1) return "XamGetDashContext";
  if (id == 0x00000320) return "XamSetAutomation";
  if (id == 0x00000321) return "XAutomationpBindController";
  if (id == 0x00000322) return "XAutomationpUnbindController";
  if (id == 0x00000323) return "XAutomationpInputXenonButton";
  if (id == 0x00000324) return "XAutomationpInputPress";
  if (id == 0x00000325) return "XAutomationpInputSetState";
  if (id == 0x00000326) return "XamEnableOverdraw";
  if (id == 0x0000032A) return "g_XuiAutomation";
  if (id == 0x00000384) return "XamGetExecutionId";
  if (id == 0x00000385) return "XamGetSPAName";
  if (id == 0x0000038E) return "XamGetWCNConfigFile";
  if (id == 0x000003E8) return "RtlFindFirstFile";
  if (id == 0x000003E9) return "RtlFindNextFile";
  if (id == 0x000003EA) return "RtlGetModuleFileName";
  if (id == 0x000003EB) return "RtlOutputDebugString";
  if (id == 0x000003EC) return "RtlRemoveDirectory";
  if (id == 0x000003ED) return "RtlSleep";
  if (id == 0x000003EE) return "RtlGetLastError";
  if (id == 0x000003EF) return "RtlSetLastError";
  if (id == 0x000003F0) return "RtlSetLastNTError";
  if (id == 0x000003F7) return "RtlGetAttributesOnHeapAlloc";
  if (id == 0x000003F8) return "RtlSetAttributesOnHeapAlloc";
  if (id == 0x000003FA) return "RtlCreateHeap";
  if (id == 0x000003FB) return "RtlDestroyHeap";
  if (id == 0x000003FC) return "RtlAllocateHeap";
  if (id == 0x000003FD) return "RtlAllocateHeapSlowly";
  if (id == 0x000003FE) return "RtlReAllocateHeap";
  if (id == 0x000003FF) return "RtlFreeHeap";
  if (id == 0x00000400) return "RtlFreeHeapSlowly";
  if (id == 0x00000401) return "RtlSizeHeap";
  if (id == 0x00000402) return "RtlZeroHeap";
  if (id == 0x0000040E) return "OutputDebugStringA";
  if (id == 0x0000040F) return "DebugBreak";
  if (id == 0x00000410) return "GetCurrentThreadId";
  if (id == 0x00000414) return "CloseHandle";
  if (id == 0x00000415) return "GetTickCount";
  if (id == 0x00000416) return "GetLastError";
  if (id == 0x00000417) return "SetFilePointer";
  if (id == 0x00000418) return "SetFilePointerEx";
  if (id == 0x00000419) return "SetLastError";
  if (id == 0x0000041A) return "MultiByteToWideChar";
  if (id == 0x0000041B) return "WideCharToMultiByte";
  if (id == 0x0000041C) return "ReadFile";
  if (id == 0x0000041D) return "FlushFileBuffers";
  if (id == 0x0000041E) return "WriteFile";
  if (id == 0x0000041F) return "OutputDebugStringW";
  if (id == 0x00000420) return "SetEvent";
  if (id == 0x00000421) return "XapiFormatTimeOut";
  if (id == 0x00000422) return "CreateMutexA";
  if (id == 0x00000423) return "OpenMutexA";
  if (id == 0x00000424) return "ReleaseMutex";
  if (id == 0x00000425) return "WaitForSingleObject";
  if (id == 0x00000426) return "WaitForSingleObjectEx";
  if (id == 0x00000427) return "GetFileSize";
  if (id == 0x00000428) return "GetFileSizeEx";
  if (id == 0x00000429) return "XapiDirectoryInformationToFindData";
  if (id == 0x0000042A) return "XapiFormatObjectAttributes";
  if (id == 0x0000042B) return "ResetEvent";
  if (id == 0x0000042C) return "wsprintfA";
  if (id == 0x0000042D) return "wsprintfW";
  if (id == 0x0000042E) return "GetOverlappedResult";
  if (id == 0x0000042F) return "QueryPerformanceCounter";
  if (id == 0x00000430) return "QueryPerformanceFrequency";
  if (id == 0x00000431) return "LocalAlloc";
  if (id == 0x00000432) return "LocalFree";
  if (id == 0x00000433) return "RaiseException";
  if (id == 0x00000434) return "RtlUniform";
  if (id == 0x00000435) return "RtlRandom";
  if (id == 0x00000436) return "Sleep";
  if (id == 0x00000437) return "SleepEx";
  if (id == 0x00000438) return "XMemSet";
  if (id == 0x00000439) return "XRegisterThreadNotifyRoutine";
  if (id == 0x0000043A) return "XGetOverlappedExtendedError";
  if (id == 0x0000043B) return "XGetOverlappedResult";
  if (id == 0x0000043C) return "CreateThread";
  if (id == 0x0000043D) return "ResumeThread";
  if (id == 0x0000043E) return "ExitThread";
  if (id == 0x0000043F) return "GetTimeZoneInformation";
  if (id == 0x00000440) return "GetSystemTimeAsFileTime";
  if (id == 0x00000441) return "SystemTimeToFileTime";
  if (id == 0x00000442) return "FileTimeToSystemTime";
  if (id == 0x00000443) return "GetSystemTime";
  if (id == 0x00000444) return "GetLocalTime";
  if (id == 0x00000445) return "CreateDirectoryA";
  if (id == 0x00000446) return "CreateEventA";
  if (id == 0x00000447) return "CreateFileA";
  if (id == 0x00000448) return "DeleteFileA";
  if (id == 0x00000449) return "FindFirstFileA";
  if (id == 0x0000044A) return "FindNextFileA";
  if (id == 0x0000044B) return "GetFileAttributesA";
  if (id == 0x0000044D) return "GetFileAttributesExA";
  if (id == 0x0000044E) return "GetModuleHandleA";
  if (id == 0x0000044F) return "GetDiskFreeSpaceExA";
  if (id == 0x00000450) return "PIXAddEvent";
  if (id == 0x00000451) return "PIXBeginEvent";
  if (id == 0x00000452) return "PIXEndEvent";
  if (id == 0x00000453) return "PIXBeginCapture";
  if (id == 0x00000454) return "PIXEndCapture";
  if (id == 0x00000455) return "PIXAddCounter";
  if (id == 0x00000456) return "PIXWriteData";
  if (id == 0x00000457) return "SetWaitableTimer";
  if (id == 0x00000458) return "CancelWaitableTimer";
  if (id == 0x00000459) return "CreateWaitableTimerA";
  if (id == 0x0000045A) return "DuplicateHandle";
  if (id == 0x0000045B) return "XapipCreateThread";
  if (id == 0x0000045C) return "lstrcpyA";
  if (id == 0x0000045D) return "lstrcpyW";
  if (id == 0x0000045E) return "lstrcpynA";
  if (id == 0x0000045F) return "lstrcpynW";
  if (id == 0x00000460) return "lstrcatA";
  if (id == 0x00000461) return "lstrcatW";
  if (id == 0x00000462) return "lstrlenA";
  if (id == 0x00000463) return "lstrlenW";
  if (id == 0x00000464) return "IsBadReadPtr";
  if (id == 0x00000465) return "IsBadWritePtr";
  if (id == 0x000007D2) return "GetProcessHeap";
  if (id == 0x000007D3) return "UnhandledExceptionFilter";
  if (id == 0x000007D4) return "SetUnhandledExceptionFilter";

  return nullptr;
}

const char* xamNameGen_1746(int id)
{
  if (id == 0x00000001) return "NetDll_WSAStartup";
  if (id == 0x00000002) return "NetDll_WSACleanup";
  if (id == 0x00000003) return "NetDll_socket";
  if (id == 0x00000004) return "NetDll_closesocket";
  if (id == 0x00000005) return "NetDll_shutdown";
  if (id == 0x00000006) return "NetDll_ioctlsocket";
  if (id == 0x00000007) return "NetDll_setsockopt";
  if (id == 0x00000008) return "NetDll_getsockopt";
  if (id == 0x00000009) return "NetDll_getsockname";
  if (id == 0x0000000A) return "NetDll_getpeername";
  if (id == 0x0000000B) return "NetDll_bind";
  if (id == 0x0000000C) return "NetDll_connect";
  if (id == 0x0000000D) return "NetDll_listen";
  if (id == 0x0000000E) return "NetDll_accept";
  if (id == 0x0000000F) return "NetDll_select";
  if (id == 0x00000010) return "NetDll_WSAGetOverlappedResult";
  if (id == 0x00000011) return "NetDll_WSACancelOverlappedIO";
  if (id == 0x00000012) return "NetDll_recv";
  if (id == 0x00000013) return "NetDll_WSARecv";
  if (id == 0x00000014) return "NetDll_recvfrom";
  if (id == 0x00000015) return "NetDll_WSARecvFrom";
  if (id == 0x00000016) return "NetDll_send";
  if (id == 0x00000017) return "NetDll_WSASend";
  if (id == 0x00000018) return "NetDll_sendto";
  if (id == 0x00000019) return "NetDll_WSASendTo";
  if (id == 0x0000001A) return "NetDll_inet_addr";
  if (id == 0x0000001B) return "NetDll_WSAGetLastError";
  if (id == 0x0000001C) return "NetDll_WSASetLastError";
  if (id == 0x0000001D) return "NetDll_WSACreateEvent";
  if (id == 0x0000001E) return "NetDll_WSACloseEvent";
  if (id == 0x0000001F) return "NetDll_WSASetEvent";
  if (id == 0x00000020) return "NetDll_WSAResetEvent";
  if (id == 0x00000021) return "NetDll_WSAWaitForMultipleEvents";
  if (id == 0x00000022) return "NetDll___WSAFDIsSet";
  if (id == 0x00000023) return "NetDll_WSAEventSelect";
  if (id == 0x00000033) return "NetDll_XNetStartup";
  if (id == 0x00000034) return "NetDll_XNetCleanup";
  if (id == 0x00000035) return "NetDll_XNetRandom";
  if (id == 0x00000036) return "NetDll_XNetCreateKey";
  if (id == 0x00000037) return "NetDll_XNetRegisterKey";
  if (id == 0x00000038) return "NetDll_XNetUnregisterKey";
  if (id == 0x00000039) return "NetDll_XNetXnAddrToInAddr";
  if (id == 0x0000003A) return "NetDll_XNetServerToInAddr";
  if (id == 0x0000003B) return "NetDll_XNetTsAddrToInAddr";
  if (id == 0x0000003C) return "NetDll_XNetInAddrToXnAddr";
  if (id == 0x0000003D) return "NetDll_XNetInAddrToServer";
  if (id == 0x0000003E) return "NetDll_XNetInAddrToString";
  if (id == 0x0000003F) return "NetDll_XNetUnregisterInAddr";
  if (id == 0x00000040) return "NetDll_XNetXnAddrToMachineId";
  if (id == 0x00000041) return "NetDll_XNetConnect";
  if (id == 0x00000042) return "NetDll_XNetGetConnectStatus";
  if (id == 0x00000043) return "NetDll_XNetDnsLookup";
  if (id == 0x00000044) return "NetDll_XNetDnsRelease";
  if (id == 0x00000045) return "NetDll_XNetQosListen";
  if (id == 0x00000046) return "NetDll_XNetQosLookup";
  if (id == 0x00000047) return "NetDll_XNetQosServiceLookup";
  if (id == 0x00000048) return "NetDll_XNetQosRelease";
  if (id == 0x00000049) return "NetDll_XNetGetTitleXnAddr";
  if (id == 0x0000004A) return "NetDll_XNetGetDebugXnAddr";
  if (id == 0x0000004B) return "NetDll_XNetGetEthernetLinkStatus";
  if (id == 0x0000004C) return "NetDll_XNetGetBroadcastVersionStatus";
  if (id == 0x0000004D) return "NetDll_XNetQosGetListenStats";
  if (id == 0x0000004E) return "NetDll_XNetGetOpt";
  if (id == 0x0000004F) return "NetDll_XNetSetOpt";
  if (id == 0x00000065) return "NetDll_XnpLoadConfigParams";
  if (id == 0x00000066) return "NetDll_XnpSaveConfigParams";
  if (id == 0x00000067) return "NetDll_XnpConfigUPnP";
  if (id == 0x00000068) return "NetDll_XnpConfig";
  if (id == 0x00000069) return "NetDll_XnpGetConfigStatus";
  if (id == 0x0000006A) return "NetDll_XnpLoadMachineAccount";
  if (id == 0x0000006B) return "NetDll_XnpSaveMachineAccount";
  if (id == 0x0000006C) return "NetDll_XnpCapture";
  if (id == 0x0000006D) return "NetDll_XnpEthernetInterceptSetCallbacks";
  if (id == 0x0000006E) return "NetDll_XnpEthernetInterceptXmit";
  if (id == 0x0000006F) return "NetDll_XnpEthernetInterceptRecv";
  if (id == 0x00000070) return "NetDll_XnpLogonGetStatus";
  if (id == 0x00000071) return "NetDll_XnpLogonGetQFlags";
  if (id == 0x00000072) return "NetDll_XnpLogonSetQFlags";
  if (id == 0x00000073) return "NetDll_XnpLogonSetQEvent";
  if (id == 0x00000074) return "NetDll_XnpLogonClearQEvent";
  if (id == 0x00000075) return "NetDll_XnpLogonGetQVals";
  if (id == 0x00000076) return "NetDll_XnpLogonSetQVals";
  if (id == 0x00000077) return "NetDll_XnpLogonSetPState";
  if (id == 0x00000078) return "NetDll_XnpGetVlanXboxName";
  if (id == 0x00000079) return "NetDll_XnpSetVlanXboxName";
  if (id == 0x0000007A) return "NetDll_XnpGetActiveSocketList";
  if (id == 0x0000007B) return "NetDll_XnpNoteSystemTime";
  if (id == 0x0000007C) return "NetDll_XnpUpdateInAddrServiceId";
  if (id == 0x00000097) return "NetDll_XmlDownloadStart";
  if (id == 0x00000098) return "NetDll_XmlDownloadContinue";
  if (id == 0x00000099) return "NetDll_XmlDownloadStop";
  if (id == 0x000000C7) return "?D3DDevice_GetRenderState_Wrap10@D3D@@YAKPAUD3DDevice@@@Z";
  if (id == 0x000000C9) return "NetDll_XHttpStartup";
  if (id == 0x000000CA) return "NetDll_XHttpShutdown";
  if (id == 0x000000CB) return "NetDll_XHttpOpen";
  if (id == 0x000000CC) return "NetDll_XHttpCloseHandle";
  if (id == 0x000000CD) return "NetDll_XHttpConnect";
  if (id == 0x000000CE) return "NetDll_XHttpSetStatusCallback";
  if (id == 0x000000CF) return "NetDll_XHttpOpenRequest";
  if (id == 0x000000D0) return "NetDll_XHttpOpenRequestUsingMemory";
  if (id == 0x000000D1) return "NetDll_XHttpSendRequest";
  if (id == 0x000000D2) return "NetDll_XHttpReceiveResponse";
  if (id == 0x000000D3) return "NetDll_XHttpQueryHeaders";
  if (id == 0x000000D4) return "NetDll_XHttpReadData";
  if (id == 0x000000D5) return "NetDll_XHttpWriteData";
  if (id == 0x000000D6) return "NetDll_XHttpQueryOption";
  if (id == 0x000000D7) return "NetDll_XHttpSetOption";
  if (id == 0x000000D8) return "NetDll_XHttpDoWork";
  if (id == 0x000000FB) return "NetDll_UpnpStartup";
  if (id == 0x000000FC) return "NetDll_UpnpCleanup";
  if (id == 0x000000FD) return "NetDll_UpnpSearchCreate";
  if (id == 0x000000FE) return "NetDll_UpnpSearchGetDevices";
  if (id == 0x000000FF) return "NetDll_UpnpDescribeCreate";
  if (id == 0x00000100) return "NetDll_UpnpDescribeGetResults";
  if (id == 0x00000101) return "NetDll_UpnpActionCreate";
  if (id == 0x00000102) return "NetDll_UpnpActionGetResults";
  if (id == 0x00000103) return "NetDll_UpnpEventCreate";
  if (id == 0x00000104) return "NetDll_UpnpEventGetCurrentState";
  if (id == 0x00000105) return "NetDll_UpnpEventUnsubscribe";
  if (id == 0x00000106) return "NetDll_UpnpDoWork";
  if (id == 0x00000107) return "NetDll_UpnpCloseHandle";
  if (id == 0x0000012D) return "XNetLogonGetLoggedOnUsers";
  if (id == 0x0000012E) return "XNetLogonGetNatType";
  if (id == 0x0000012F) return "XNetLogonTaskStart";
  if (id == 0x00000130) return "XNetLogonTaskClose";
  if (id == 0x00000131) return "XNetLogonTaskContinue";
  if (id == 0x00000132) return "XNetLogonGetServiceInfo";
  if (id == 0x00000133) return "XNetLogonGetUserPrivileges";
  if (id == 0x00000134) return "?XNetLogonSetConsoleCertificate@@YAHPBU_CONSOLE_CERTIFICATE@@@Z";
  if (id == 0x00000135) return "XNetLogonGetMachineID";
  if (id == 0x00000136) return "XNetLogonGetTitleID";
  if (id == 0x00000137) return "XNetLogonGetTitleVersion";
  if (id == 0x00000138) return "XNetLogonGetServiceNetworkID";
  if (id == 0x00000139) return "XNetLogonGetDnsString";
  if (id == 0x0000013A) return "XNetLogonSetTitleID";
  if (id == 0x00000190) return "XamInputGetCapabilities";
  if (id == 0x00000191) return "XamInputGetState";
  if (id == 0x00000192) return "XamInputSetState";
  if (id == 0x00000193) return "XamInputGetKeystroke";
  if (id == 0x00000194) return "XamInputEnableAutobind";
  if (id == 0x00000195) return "?XamInputRawState@@YAKKKHPAU_XINPUT_RAW@@@Z";
  if (id == 0x00000196) return "XamEnableSystemAppInput";
  if (id == 0x00000197) return "XamInputGetDeviceStats";
  if (id == 0x00000198) return "XamInputGetKeystrokeEx";
  if (id == 0x00000199) return "XamInputGetKeystrokeHud";
  if (id == 0x0000019A) return "XamInputSetLayoutKeyboard";
  if (id == 0x0000019B) return "XamInputToggleKeyLocks";
  if (id == 0x000001A4) return "XLaunchNewImage";
  if (id == 0x000001A5) return "XLaunchNewImageEx";
  if (id == 0x000001A6) return "XSetLaunchData";
  if (id == 0x000001A7) return "XGetLaunchDataSize";
  if (id == 0x000001A8) return "XGetLaunchData";
  if (id == 0x000001A9) return "XamTerminateTitle";
  if (id == 0x000001AA) return "XGetTrayState";
  if (id == 0x000001AB) return "XamGetGameInfo";
  if (id == 0x000001AC) return "XLaunchMedia";
  if (id == 0x000001AE) return "XamTaskCreateQueue";
  if (id == 0x000001AF) return "XamTaskSchedule";
  if (id == 0x000001B0) return "XamTaskReschedule";
  if (id == 0x000001B1) return "XamTaskCloseHandle";
  if (id == 0x000001B2) return "XamTaskCancel";
  if (id == 0x000001B3) return "XamTaskShouldExit";
  if (id == 0x000001B4) return "XamTaskWaitOnCompletion";
  if (id == 0x000001B5) return "XamTaskModify";
  if (id == 0x000001B6) return "XamTaskGetCurrentTask";
  if (id == 0x000001B7) return "XamTaskGetAttributes";
  if (id == 0x000001B8) return "XamExecutingOnBehalfOfTitle";
  if (id == 0x000001C2) return "XamApplySkin";
  if (id == 0x000001C3) return "XamGetRootObj";
  if (id == 0x000001C4) return "XamFormatMessage";
  if (id == 0x000001C5) return "XamBuildResourceLocator";
  if (id == 0x000001C6) return "XamBuildSharedSystemResourceLocator";
  if (id == 0x000001C7) return "XamShowMessageBox";
  if (id == 0x000001C8) return "XCustomGetBannerImage";
  if (id == 0x000001C9) return "XCustomSetBannerImage";
  if (id == 0x000001CA) return "XCustomSetAction";
  if (id == 0x000001CB) return "XCustomGetLastActionPress";
  if (id == 0x000001CC) return "XCustomGetActionSetting";
  if (id == 0x000001CD) return "XCustomBroadcastActionEvent";
  if (id == 0x000001CE) return "XamGetBkgndDefault";
  if (id == 0x000001CF) return "XamGetDefaultSystemImage";
  if (id == 0x000001D0) return "XamFormatTimeString";
  if (id == 0x000001D2) return "XamFormatDateString";
  if (id == 0x000001D3) return "?D3DDevice_GetRenderState_Wrap10@D3D@@YAKPAUD3DDevice@@@Z";
  if (id == 0x000001D4) return "XamEnableInactivityProcessing";
  if (id == 0x000001D5) return "XamSetInactivityTime";
  if (id == 0x000001D6) return "XamSetDashContext";
  if (id == 0x000001D7) return "XamGetDashContext";
  if (id == 0x000001D8) return "XamGetCurrentTitleId";
  if (id == 0x000001D9) return "XamGetWCNConfigFile";
  if (id == 0x000001EA) return "XamAlloc";
  if (id == 0x000001EB) return "XamAllocEx";
  if (id == 0x000001EC) return "XamFree";
  if (id == 0x000001ED) return "XamAllocSize";
  if (id == 0x000001F4) return "XMsgInProcessCall";
  if (id == 0x000001F5) return "XMsgCompleteIORequest";
  if (id == 0x000001F6) return "XMsgSystemProcessCall";
  if (id == 0x000001F7) return "XMsgStartIORequest";
  if (id == 0x000001F8) return "XMsgCancelIORequest";
  if (id == 0x000001F9) return "XMsgAcquireAsyncMessageFromOverlapped";
  if (id == 0x000001FA) return "XMsgReleaseAsyncMessageToOverlapped";
  if (id == 0x000001FB) return "XamGetOverlappedResult";
  if (id == 0x000001FC) return "XMsgStartIORequestEx";
  if (id == 0x00000208) return "XamUserGetDeviceContext";
  if (id == 0x00000209) return "XamUserLookupDevice";
  if (id == 0x0000020A) return "XamUserGetXUID";
  if (id == 0x0000020B) return "XamUserLogon";
  if (id == 0x0000020C) return "XamUserGetGamerTag";
  if (id == 0x0000020D) return "XamUserGetUserIndexMask";
  if (id == 0x0000020E) return "XamUserGetName";
  if (id == 0x00000210) return "XamUserGetSigninState";
  if (id == 0x00000211) return "XamUserGetIndexFromXUID";
  if (id == 0x00000212) return "XamUserCheckPrivilege";
  if (id == 0x00000213) return "XamUserAreUsersFriends";
  if (id == 0x00000214) return "XamSetUserPresetPresenceState";
  if (id == 0x00000215) return "XamGetUserPresetPresenceState";
  if (id == 0x00000216) return "XamUserGetUserFlagsFromXUID";
  if (id == 0x00000217) return "XamUserGetMembershipTierFromXUID";
  if (id == 0x00000218) return "XamUserGetOnlineCountryFromXUID";
  if (id == 0x00000219) return "XamUserReadProfileSettings";
  if (id == 0x0000021A) return "XamUserWriteProfileSettings";
  if (id == 0x0000021B) return "XamUserGetMembershipTier";
  if (id == 0x0000021C) return "XamUserGetUserFlags";
  if (id == 0x0000021D) return "XamUserGetRequestedUserIndexMask";
  if (id == 0x0000021E) return "XamUserIsGuest";
  if (id == 0x0000021F) return "XamUserProfileSync";
  if (id == 0x00000220) return "XamUserFlushLogonQueue";
  if (id == 0x00000221) return "XamUserIsOnlineEnabled";
  if (id == 0x00000230) return "XamProfileCreate";
  if (id == 0x00000231) return "XamProfileCreateEnumerator";
  if (id == 0x00000232) return "XamProfileEnumerate";
  if (id == 0x00000233) return "XamProfileDelete";
  if (id == 0x00000234) return "XamProfileGetCreationStatus";
  if (id == 0x00000235) return "XamProfileFindAccount";
  if (id == 0x00000236) return "XamProfileRenameAccount";
  if (id == 0x00000237) return "XamProfileOpen";
  if (id == 0x00000238) return "XamProfileClose";
  if (id == 0x00000239) return "XamProfileSaveAccountInfo";
  if (id == 0x0000023A) return "XamProfileLoadAccountInfo";
  if (id == 0x00000244) return "XamAppLoad";
  if (id == 0x00000245) return "XamAppUnloadSelf";
  if (id == 0x00000246) return "XamAppUnloadStack";
  if (id == 0x00000247) return "XamSendMessageToLoadedApps";
  if (id == 0x00000248) return "XamAppRequestLoad";
  if (id == 0x00000249) return "XamAppUnrequestLoad";
  if (id == 0x0000024A) return "XamNavigate";
  if (id == 0x0000024B) return "XamRegisterSysApp";
  if (id == 0x0000024C) return "XamUnregisterSysApp";
  if (id == 0x00000258) return "XamContentCreate";
  if (id == 0x00000259) return "XamContentDelete";
  if (id == 0x0000025A) return "XamContentClose";
  if (id == 0x0000025B) return "XamContentCreateEnumerator";
  if (id == 0x0000025C) return "XamContentCreateDeviceEnumerator";
  if (id == 0x0000025D) return "XamContentGetDeviceData";
  if (id == 0x0000025E) return "XamContentGetDeviceName";
  if (id == 0x0000025F) return "XamContentSetThumbnail";
  if (id == 0x00000260) return "XamCreateEnumeratorHandle";
  if (id == 0x00000261) return "XamGetPrivateEnumStructureFromHandle";
  if (id == 0x00000262) return "XamEnumerate";
  if (id == 0x00000263) return "XamContentGetThumbnail";
  if (id == 0x00000264) return "XamContentGetCreator";
  if (id == 0x00000265) return "XamContentLaunchImage";
  if (id == 0x0000026C) return "XamContentCopyInternal";
  if (id == 0x0000026D) return "XamContentMoveInternal";
  if (id == 0x0000026E) return "XamContentGetMetaDataInternal";
  if (id == 0x0000026F) return "XamContentCreateEnumeratorInternal";
  if (id == 0x00000270) return "XamContentAggregateCreateEnumerator";
  if (id == 0x00000271) return "XamContentDeleteInternal";
  if (id == 0x00000272) return "XamContentCreateInternal";
  if (id == 0x00000273) return "XamContentCreateAndMountPackage";
  if (id == 0x00000274) return "XamContentSetThumbnailInternal";
  if (id == 0x00000275) return "XamContentLaunchImageInternal";
  if (id == 0x00000276) return "XamContentOpenPackageFile";
  if (id == 0x00000277) return "XamContentMountPackage";
  if (id == 0x00000278) return "XamContentWritePackageHeader";
  if (id == 0x00000279) return "XamContentFlushPackage";
  if (id == 0x0000027A) return "XamContentDismountAndClosePackage";
  if (id == 0x0000027B) return "XamContentClosePackageFile";
  if (id == 0x00000280) return "XamGetExecutionId";
  if (id == 0x00000281) return "XamGetSPAName";
  if (id == 0x0000028A) return "XamNotifyCreateListener";
  if (id == 0x0000028B) return "XNotifyGetNext";
  if (id == 0x0000028C) return "XNotifyPositionUI";
  if (id == 0x0000028D) return "XNotifyDelayUI";
  if (id == 0x0000028E) return "XNotifyBroadcast";
  if (id == 0x0000028F) return "XNotifyRegisterArea";
  if (id == 0x00000290) return "XNotifyQueueUI";
  if (id == 0x00000291) return "XamNotifyCreateListenerInternal";
  if (id == 0x00000292) return "XNotifyUISetOptions";
  if (id == 0x00000293) return "XNotifyUIGetOptions";
  if (id == 0x0000029E) return "XamUpdateStart";
  if (id == 0x0000029F) return "XamUpdateGetProgress";
  if (id == 0x000002A0) return "XamUpdateGetExtenderInstance";
  if (id == 0x000002A1) return "XamUpdateFinish";
  if (id == 0x000002A2) return "XamUpdateAttachExtenderInstance";
  if (id == 0x000002B2) return "XamCacheStoreFile";
  if (id == 0x000002B3) return "XamCacheFetchFile";
  if (id == 0x000002B4) return "XamCacheOpenFile";
  if (id == 0x000002B5) return "XamCacheCloseFile";
  if (id == 0x000002B6) return "XamGetCachedTitleName";
  if (id == 0x000002B7) return "XamCacheReset";
  if (id == 0x000002BD) return "XamShowSigninUI";
  if (id == 0x000002BE) return "XamShowSigninUIp";
  if (id == 0x000002BF) return "XamShowFriendsUI";
  if (id == 0x000002C0) return "XamShowMessagesUI";
  if (id == 0x000002C1) return "XamShowKeyboardUI";
  if (id == 0x000002C2) return "XamShowQuickChatUI";
  if (id == 0x000002C3) return "XamShowVoiceMailUI";
  if (id == 0x000002C4) return "XamShowGamerCardUI";
  if (id == 0x000002C5) return "XamShowAchievementsUI";
  if (id == 0x000002C6) return "XamShowPlayerReviewUI";
  if (id == 0x000002C7) return "XamShowMarketplaceUI";
  if (id == 0x000002C8) return "XamShowPlayersUI";
  if (id == 0x000002C9) return "XamShowUpdaterUI";
  if (id == 0x000002CA) return "XamShowMessageBoxUI";
  if (id == 0x000002CB) return "XamShowDeviceSelectorUI";
  if (id == 0x000002CC) return "XamShowMessageComposeUI";
  if (id == 0x000002CD) return "XamShowGameInviteUI";
  if (id == 0x000002CE) return "XamShowFriendRequestUI";
  if (id == 0x000002CF) return "XamShowCreateProfileUI";
  if (id == 0x000002D0) return "XamShowGamesUI";
  if (id == 0x000002D1) return "XamShowLiveSignupUI";
  if (id == 0x000002D2) return "XamShowFriendsUIp";
  if (id == 0x000002D3) return "XamShowComplaintUI";
  if (id == 0x000002D4) return "XamShowReputationUI";
  if (id == 0x000002D5) return "XamShowGamerCardUIForXUID";
  if (id == 0x000002D6) return "XamShowForcedNameChangeUI";
  if (id == 0x000002D7) return "XamShowLiveUpsellUI";
  if (id == 0x000002D8) return "XamShowSigninUIEx";
  if (id == 0x000002EE) return "XamUserCreateAchievementEnumerator";
  if (id == 0x000002EF) return "XamReadTile";
  if (id == 0x000002F0) return "XamWriteGamerTile";
  if (id == 0x000002F1) return "XamWriteTile";
  if (id == 0x000002F2) return "?XamReadImage@@YAJW4XTILETYPE@@KK_KPAPAU_XUIBRUSH@@@Z";
  if (id == 0x000002F3) return "XamUserCreateTitlesPlayedEnumerator";
  if (id == 0x000002F4) return "XamDecompressPNGToTexture";
  if (id == 0x000002F5) return "XamReadTileToTexture";
  if (id == 0x000002F6) return "XamReadString";
  if (id == 0x000002F7) return "XamUserCreateStatsEnumerator";
  if (id == 0x00000302) return "XamUserAddRecentPlayer";
  if (id == 0x00000303) return "XamUserUpdateRecentPlayer";
  if (id == 0x00000304) return "XamUserCreatePlayerEnumerator";
  if (id == 0x00000305) return "XamParseGamerTileKey";
  if (id == 0x0000030C) return "XamVoiceCreate";
  if (id == 0x0000030D) return "XamVoiceSubmitPacket";
  if (id == 0x0000030E) return "XamVoiceClose";
  if (id == 0x00000320) return "XuiAnimRun";
  if (id == 0x00000321) return "XuiApplyLocale";
  if (id == 0x00000322) return "XuiBubbleMessage";
  if (id == 0x00000323) return "XuiControlIsBackButton";
  if (id == 0x00000324) return "XuiControlIsNavButton";
  if (id == 0x00000325) return "XuiCreateObject";
  if (id == 0x00000326) return "XuiDestroyObject";
  if (id == 0x00000327) return "XuiDynamicCast";
  if (id == 0x00000328) return "XuiElementAddChild";
  if (id == 0x00000329) return "XuiElementFindNamedFrame";
  if (id == 0x0000032A) return "XuiElementGetChildById";
  if (id == 0x0000032B) return "XuiElementGetFirstChild";
  if (id == 0x0000032C) return "XuiElementGetFocus";
  if (id == 0x0000032D) return "XuiElementGetFocusUser";
  if (id == 0x0000032E) return "XuiElementGetId";
  if (id == 0x0000032F) return "XuiElementGetLastChild";
  if (id == 0x00000330) return "XuiElementGetNext";
  if (id == 0x00000331) return "XuiElementGetParent";
  if (id == 0x00000332) return "XuiElementGetUserFocus";
  if (id == 0x00000333) return "XuiElementInitFocus";
  if (id == 0x00000334) return "XuiElementInitUserFocus";
  if (id == 0x00000335) return "XuiElementPlayTimeline";
  if (id == 0x00000336) return "XuiElementSetBounds";
  if (id == 0x00000337) return "XuiElementSetFocus";
  if (id == 0x00000338) return "XuiElementSetUserFocus";
  if (id == 0x00000339) return "XuiElementTreeGetFocus";
  if (id == 0x0000033A) return "XuiFindClass";
  if (id == 0x0000033B) return "XuiFreeStringTable";
  if (id == 0x0000033C) return "XuiGetBaseObject";
  if (id == 0x0000033D) return "XuiGetClass";
  if (id == 0x0000033E) return "XuiGetObjectClass";
  if (id == 0x0000033F) return "XuiGetOuter";
  if (id == 0x00000340) return "XuiInit";
  if (id == 0x00000341) return "XuiLoadFromBinary";
  if (id == 0x00000342) return "XuiLoadStringTableFromFile";
  if (id == 0x00000343) return "XuiVisualGetBasePath";
  if (id == 0x00000344) return "XuiLookupStringTable";
  if (id == 0x00000345) return "XuiNavButtonGetPressPath";
  if (id == 0x00000346) return "XuiObjectFromHandle";
  if (id == 0x00000347) return "XuiObjectGetProperty";
  if (id == 0x00000348) return "XuiObjectGetPropertyId";
  if (id == 0x00000349) return "XuiProcessInput";
  if (id == 0x0000034A) return "XuiRegisterClass";
  if (id == 0x0000034B) return "XuiRenderBegin";
  if (id == 0x0000034C) return "XuiRenderCreateDC";
  if (id == 0x0000034D) return "XuiRenderDCDeviceChanged";
  if (id == 0x0000034E) return "XuiRenderDestroyDC";
  if (id == 0x0000034F) return "XuiRenderEnd";
  if (id == 0x00000350) return "XuiRenderGetBackBufferSize";
  if (id == 0x00000351) return "XuiRenderInit";
  if (id == 0x00000352) return "XuiRenderInitShared";
  if (id == 0x00000353) return "XuiRenderPresent";
  if (id == 0x00000354) return "XuiRenderSetViewTransform";
  if (id == 0x00000355) return "XuiRenderUninit";
  if (id == 0x00000357) return "XuiSceneCreate";
  if (id == 0x00000358) return "XuiSceneNavigateBack";
  if (id == 0x00000359) return "XuiSceneNavigateFirst";
  if (id == 0x0000035A) return "XuiSceneNavigateForward";
  if (id == 0x0000035B) return "XuiScenePlayBackFromTransition";
  if (id == 0x0000035C) return "XuiScenePlayBackToTransition";
  if (id == 0x0000035D) return "XuiScenePlayFromTransition";
  if (id == 0x0000035E) return "XuiScenePlayToTransition";
  if (id == 0x0000035F) return "XuiSendMessage";
  if (id == 0x00000360) return "XuiSetLocale";
  if (id == 0x00000361) return "XuiUninit";
  if (id == 0x00000362) return "XuiUnregisterClass";
  if (id == 0x00000363) return "XuiTextElementSetText";
  if (id == 0x00000364) return "XuiSetTimer";
  if (id == 0x00000365) return "XuiTimersRun";
  if (id == 0x00000366) return "XuiTextElementGetText";
  if (id == 0x00000367) return "XuiVisualSetBasePath";
  if (id == 0x00000368) return "XuiHandleIsValid";
  if (id == 0x00000369) return "XuiAlloc";
  if (id == 0x0000036A) return "XuiFree";
  if (id == 0x0000036B) return "XuiDefault_True";
  if (id == 0x0000036C) return "XuiDefault_EmptyString";
  if (id == 0x0000036D) return "XuiDefault_IntegerZero";
  if (id == 0x0000036E) return "XuiCopyString";
  if (id == 0x0000036F) return "XuiRealloc";
  if (id == 0x00000370) return "XuiControlPlayOptionalVisual";
  if (id == 0x00000371) return "XuiKillTimer";
  if (id == 0x00000372) return "XuiElementEnableInput";
  if (id == 0x00000373) return "XuiElementInputEnabled";
  if (id == 0x00000374) return "XuiIsInstanceOf";
  if (id == 0x00000375) return "XuiResourceComposeLocator";
  if (id == 0x00000376) return "XuiResourceLocatorIsAbsolute";
  if (id == 0x00000377) return "XuiBroadcastMessage";
  if (id == 0x00000378) return "XuiElementDisallowRecursiveTimelineControl";
  if (id == 0x00000379) return "XUIElementPropVal_Construct";
  if (id == 0x0000037A) return "XUIElementPropVal_Destruct";
  if (id == 0x0000037B) return "XUIElementPropVal_SetString";
  if (id == 0x0000037C) return "XuiObjectSetProperty";
  if (id == 0x0000037D) return "XuiElementGetOpacity";
  if (id == 0x0000037E) return "XuiElementSetOpacity";
  if (id == 0x0000037F) return "XuiEditSetTextLimit";
  if (id == 0x00000380) return "XuiEditGetTextLimit";
  if (id == 0x00000381) return "XuiSliderSetValue";
  if (id == 0x00000382) return "XuiSliderGetValue";
  if (id == 0x00000383) return "XuiSliderSetRange";
  if (id == 0x00000384) return "XuiElementUnlink";
  if (id == 0x00000385) return "XuiElementInsertChild";
  if (id == 0x00000386) return "XuiSceneNavigateBackToFirst";
  if (id == 0x00000387) return "XuiProgressBarSetRange";
  if (id == 0x00000388) return "XuiProgressBarSetValue";
  if (id == 0x00000389) return "XuiProgressBarGetValue";
  if (id == 0x0000038A) return "XuiControlAttachVisual";
  if (id == 0x0000038B) return "XuiCreateTextureBrush";
  if (id == 0x0000038C) return "XuiDestroyBrush";
  if (id == 0x0000038D) return "XUIElementPropVal_SetColorFromUint";
  if (id == 0x0000038E) return "XuiFigureSetFill";
  if (id == 0x0000038F) return "XuiSliderGetRange";
  if (id == 0x00000390) return "XuiFigureSetTexture";
  if (id == 0x00000391) return "XuiControlGetItemAssociation";
  if (id == 0x00000392) return "XuiResourceLoadAll";
  if (id == 0x00000393) return "XuiImageElementSetImagePath";
  if (id == 0x00000394) return "XuiImageElementGetImagePath";
  if (id == 0x00000395) return "XuiControlGetVisual";
  if (id == 0x00000396) return "XuiControlGetNavigation";
  if (id == 0x00000397) return "XuiLookupStringTableByIndex";
  if (id == 0x00000398) return "XUIElementPropVal_SetBool";
  if (id == 0x00000399) return "XuiElementHasFocus";
  if (id == 0x0000039A) return "XUIElementPropVal_SetUint";
  if (id == 0x0000039B) return "XUIElementPropVal_Clear";
  if (id == 0x0000039C) return "XuiEditSetTextFormatInfo";
  if (id == 0x0000039D) return "XuiCreateSolidBrush";
  if (id == 0x0000039E) return "XuiSceneInterruptTransitions";
  if (id == 0x0000039F) return "XuiResourceOpen";
  if (id == 0x000003A0) return "XuiResourceRead";
  if (id == 0x000003A1) return "XuiResourceClose";
  if (id == 0x000003A2) return "XuiVisualCreateInstance";
  if (id == 0x000003A3) return "XuiElementGetTimeline";
  if (id == 0x000003A4) return "?GetCodecVersion@CCalMediaInfo@@UBAKXZ";
  if (id == 0x000003A5) return "XuiElementIsDescendant";
  if (id == 0x000003A6) return "XuiSetMessageFilter";
  if (id == 0x000003A7) return "XamContentGetDeviceState";
  if (id == 0x000003CA) return "XGetAudioFlags";
  if (id == 0x000003CB) return "XGetAVPack";
  if (id == 0x000003CC) return "XGetGameRegion";
  if (id == 0x000003CD) return "XGetLanguage";
  if (id == 0x000003CE) return "XGetParentalControlSetting";
  if (id == 0x000003CF) return "XGetVideoFlags";
  if (id == 0x000003D0) return "XGetVideoStandard";
  if (id == 0x000003D1) return "XGetVideoMode";
  if (id == 0x000003D2) return "XGetLocale";
  if (id == 0x000003D4) return "XamSetAutomation";
  if (id == 0x000003D5) return "XAutomationpBindController";
  if (id == 0x000003D6) return "XAutomationpUnbindController";
  if (id == 0x000003D7) return "XAutomationpInputXenonButton";
  if (id == 0x000003D8) return "XAutomationpInputPress";
  if (id == 0x000003D9) return "XAutomationpInputSetState";
  if (id == 0x000003DA) return "XamEnableOverdraw";
  if (id == 0x000003DB) return "g_XuiAutomation";
  if (id == 0x000003E8) return "RtlFindFirstFile";
  if (id == 0x000003E9) return "RtlFindNextFile";
  if (id == 0x000003EA) return "RtlGetModuleFileName";
  if (id == 0x000003EB) return "RtlOutputDebugString";
  if (id == 0x000003EC) return "RtlRemoveDirectory";
  if (id == 0x000003ED) return "RtlSleep";
  if (id == 0x000003EE) return "RtlGetLastError";
  if (id == 0x000003EF) return "RtlSetLastError";
  if (id == 0x000003F0) return "RtlSetLastNTError";
  if (id == 0x000003F7) return "RtlGetAttributesOnHeapAlloc";
  if (id == 0x000003F8) return "RtlSetAttributesOnHeapAlloc";
  if (id == 0x000003FA) return "RtlCreateHeap";
  if (id == 0x000003FB) return "RtlDestroyHeap";
  if (id == 0x000003FC) return "RtlAllocateHeap";
  if (id == 0x000003FD) return "RtlAllocateHeapSlowly";
  if (id == 0x000003FE) return "RtlReAllocateHeap";
  if (id == 0x000003FF) return "RtlFreeHeap";
  if (id == 0x00000400) return "RtlFreeHeapSlowly";
  if (id == 0x00000401) return "RtlSizeHeap";
  if (id == 0x00000402) return "RtlZeroHeap";
  if (id == 0x0000040E) return "OutputDebugStringA";
  if (id == 0x0000040F) return "DebugBreak";
  if (id == 0x00000410) return "GetCurrentThreadId";
  if (id == 0x00000414) return "CloseHandle";
  if (id == 0x00000415) return "GetTickCount";
  if (id == 0x00000416) return "GetLastError";
  if (id == 0x00000417) return "SetFilePointer";
  if (id == 0x00000418) return "SetFilePointerEx";
  if (id == 0x00000419) return "SetLastError";
  if (id == 0x0000041A) return "MultiByteToWideChar";
  if (id == 0x0000041B) return "WideCharToMultiByte";
  if (id == 0x0000041C) return "ReadFile";
  if (id == 0x0000041D) return "FlushFileBuffers";
  if (id == 0x0000041E) return "WriteFile";
  if (id == 0x0000041F) return "OutputDebugStringW";
  if (id == 0x00000420) return "SetEvent";
  if (id == 0x00000421) return "XapiFormatTimeOut";
  if (id == 0x00000422) return "CreateMutexA";
  if (id == 0x00000423) return "OpenMutexA";
  if (id == 0x00000424) return "ReleaseMutex";
  if (id == 0x00000425) return "WaitForSingleObject";
  if (id == 0x00000426) return "WaitForSingleObjectEx";
  if (id == 0x00000427) return "GetFileSize";
  if (id == 0x00000428) return "GetFileSizeEx";
  if (id == 0x00000429) return "XapiDirectoryInformationToFindData";
  if (id == 0x0000042A) return "XapiFormatObjectAttributes";
  if (id == 0x0000042B) return "ResetEvent";
  if (id == 0x0000042C) return "wsprintfA";
  if (id == 0x0000042D) return "wsprintfW";
  if (id == 0x0000042E) return "GetOverlappedResult";
  if (id == 0x0000042F) return "QueryPerformanceCounter";
  if (id == 0x00000430) return "QueryPerformanceFrequency";
  if (id == 0x00000431) return "LocalAlloc";
  if (id == 0x00000432) return "LocalFree";
  if (id == 0x00000433) return "RaiseException";
  if (id == 0x00000434) return "RtlUniform";
  if (id == 0x00000435) return "RtlRandom";
  if (id == 0x00000436) return "Sleep";
  if (id == 0x00000437) return "SleepEx";
  if (id == 0x00000438) return "XMemSet";
  if (id == 0x00000439) return "XRegisterThreadNotifyRoutine";
  if (id == 0x0000043A) return "XGetOverlappedExtendedError";
  if (id == 0x0000043B) return "XGetOverlappedResult";
  if (id == 0x0000043C) return "CreateThread";
  if (id == 0x0000043D) return "ResumeThread";
  if (id == 0x0000043E) return "ExitThread";
  if (id == 0x0000043F) return "GetTimeZoneInformation";
  if (id == 0x00000440) return "GetSystemTimeAsFileTime";
  if (id == 0x00000441) return "SystemTimeToFileTime";
  if (id == 0x00000442) return "FileTimeToSystemTime";
  if (id == 0x00000443) return "GetSystemTime";
  if (id == 0x00000444) return "GetLocalTime";
  if (id == 0x00000445) return "CreateDirectoryA";
  if (id == 0x00000446) return "CreateEventA";
  if (id == 0x00000447) return "CreateFileA";
  if (id == 0x00000448) return "DeleteFileA";
  if (id == 0x00000449) return "FindFirstFileA";
  if (id == 0x0000044A) return "FindNextFileA";
  if (id == 0x0000044B) return "GetFileAttributesA";
  if (id == 0x0000044D) return "GetFileAttributesExA";
  if (id == 0x0000044E) return "GetModuleHandleA";
  if (id == 0x0000044F) return "GetDiskFreeSpaceExA";
  if (id == 0x00000450) return "CopyFileA";
  if (id == 0x00000451) return "PIXAddEvent";
  if (id == 0x00000452) return "PIXBeginEvent";
  if (id == 0x00000453) return "PIXEndEvent";
  if (id == 0x00000454) return "PIXBeginCapture";
  if (id == 0x00000455) return "PIXEndCapture";
  if (id == 0x00000456) return "PIXAddCounter";
  if (id == 0x00000457) return "PIXWriteData";
  if (id == 0x00000458) return "SetWaitableTimer";
  if (id == 0x00000459) return "CancelWaitableTimer";
  if (id == 0x0000045A) return "CreateWaitableTimerA";
  if (id == 0x0000045B) return "DuplicateHandle";
  if (id == 0x0000045C) return "XapipCreateThread";
  if (id == 0x0000045D) return "lstrcpyA";
  if (id == 0x0000045E) return "lstrcpyW";
  if (id == 0x0000045F) return "lstrcpynA";
  if (id == 0x00000460) return "lstrcpynW";
  if (id == 0x00000461) return "lstrcatA";
  if (id == 0x00000462) return "lstrcatW";
  if (id == 0x00000463) return "lstrlenA";
  if (id == 0x00000464) return "lstrlenW";
  if (id == 0x00000465) return "IsBadReadPtr";
  if (id == 0x00000466) return "IsBadWritePtr";
  if (id == 0x000007D2) return "GetProcessHeap";
  if (id == 0x000007D3) return "UnhandledExceptionFilter";
  if (id == 0x000007D4) return "SetUnhandledExceptionFilter";

  return nullptr;
}

const char* xamNameGen_1838(int id)
{
  if (id == 0x00000001) return "NetDll_WSAStartup";
  if (id == 0x00000002) return "NetDll_WSACleanup";
  if (id == 0x00000003) return "NetDll_socket";
  if (id == 0x00000004) return "NetDll_closesocket";
  if (id == 0x00000005) return "NetDll_shutdown";
  if (id == 0x00000006) return "NetDll_ioctlsocket";
  if (id == 0x00000007) return "NetDll_setsockopt";
  if (id == 0x00000008) return "NetDll_getsockopt";
  if (id == 0x00000009) return "NetDll_getsockname";
  if (id == 0x0000000A) return "NetDll_getpeername";
  if (id == 0x0000000B) return "NetDll_bind";
  if (id == 0x0000000C) return "NetDll_connect";
  if (id == 0x0000000D) return "NetDll_listen";
  if (id == 0x0000000E) return "NetDll_accept";
  if (id == 0x0000000F) return "NetDll_select";
  if (id == 0x00000010) return "NetDll_WSAGetOverlappedResult";
  if (id == 0x00000011) return "NetDll_WSACancelOverlappedIO";
  if (id == 0x00000012) return "NetDll_recv";
  if (id == 0x00000013) return "NetDll_WSARecv";
  if (id == 0x00000014) return "NetDll_recvfrom";
  if (id == 0x00000015) return "NetDll_WSARecvFrom";
  if (id == 0x00000016) return "NetDll_send";
  if (id == 0x00000017) return "NetDll_WSASend";
  if (id == 0x00000018) return "NetDll_sendto";
  if (id == 0x00000019) return "NetDll_WSASendTo";
  if (id == 0x0000001A) return "NetDll_inet_addr";
  if (id == 0x0000001B) return "NetDll_WSAGetLastError";
  if (id == 0x0000001C) return "NetDll_WSASetLastError";
  if (id == 0x0000001D) return "NetDll_WSACreateEvent";
  if (id == 0x0000001E) return "NetDll_WSACloseEvent";
  if (id == 0x0000001F) return "NetDll_WSASetEvent";
  if (id == 0x00000020) return "NetDll_WSAResetEvent";
  if (id == 0x00000021) return "NetDll_WSAWaitForMultipleEvents";
  if (id == 0x00000022) return "NetDll___WSAFDIsSet";
  if (id == 0x00000023) return "NetDll_WSAEventSelect";
  if (id == 0x00000033) return "NetDll_XNetStartup";
  if (id == 0x00000034) return "NetDll_XNetCleanup";
  if (id == 0x00000035) return "NetDll_XNetRandom";
  if (id == 0x00000036) return "NetDll_XNetCreateKey";
  if (id == 0x00000037) return "NetDll_XNetRegisterKey";
  if (id == 0x00000038) return "NetDll_XNetUnregisterKey";
  if (id == 0x00000039) return "NetDll_XNetXnAddrToInAddr";
  if (id == 0x0000003A) return "NetDll_XNetServerToInAddr";
  if (id == 0x0000003B) return "NetDll_XNetTsAddrToInAddr";
  if (id == 0x0000003C) return "NetDll_XNetInAddrToXnAddr";
  if (id == 0x0000003D) return "NetDll_XNetInAddrToServer";
  if (id == 0x0000003E) return "NetDll_XNetInAddrToString";
  if (id == 0x0000003F) return "NetDll_XNetUnregisterInAddr";
  if (id == 0x00000040) return "NetDll_XNetXnAddrToMachineId";
  if (id == 0x00000041) return "NetDll_XNetConnect";
  if (id == 0x00000042) return "NetDll_XNetGetConnectStatus";
  if (id == 0x00000043) return "NetDll_XNetDnsLookup";
  if (id == 0x00000044) return "NetDll_XNetDnsRelease";
  if (id == 0x00000045) return "NetDll_XNetQosListen";
  if (id == 0x00000046) return "NetDll_XNetQosLookup";
  if (id == 0x00000047) return "NetDll_XNetQosServiceLookup";
  if (id == 0x00000048) return "NetDll_XNetQosRelease";
  if (id == 0x00000049) return "NetDll_XNetGetTitleXnAddr";
  if (id == 0x0000004A) return "NetDll_XNetGetDebugXnAddr";
  if (id == 0x0000004B) return "NetDll_XNetGetEthernetLinkStatus";
  if (id == 0x0000004C) return "NetDll_XNetGetBroadcastVersionStatus";
  if (id == 0x0000004D) return "NetDll_XNetQosGetListenStats";
  if (id == 0x0000004E) return "NetDll_XNetGetOpt";
  if (id == 0x0000004F) return "NetDll_XNetSetOpt";
  if (id == 0x00000065) return "NetDll_XnpLoadConfigParams";
  if (id == 0x00000066) return "NetDll_XnpSaveConfigParams";
  if (id == 0x00000067) return "NetDll_XnpConfigUPnP";
  if (id == 0x00000068) return "NetDll_XnpConfig";
  if (id == 0x00000069) return "NetDll_XnpGetConfigStatus";
  if (id == 0x0000006A) return "NetDll_XnpLoadMachineAccount";
  if (id == 0x0000006B) return "NetDll_XnpSaveMachineAccount";
  if (id == 0x0000006C) return "NetDll_XnpCapture";
  if (id == 0x0000006D) return "NetDll_XnpEthernetInterceptSetCallbacks";
  if (id == 0x0000006E) return "NetDll_XnpEthernetInterceptXmit";
  if (id == 0x0000006F) return "NetDll_XnpEthernetInterceptRecv";
  if (id == 0x00000070) return "NetDll_XnpLogonGetStatus";
  if (id == 0x00000071) return "NetDll_XnpLogonGetQFlags";
  if (id == 0x00000072) return "NetDll_XnpLogonSetQFlags";
  if (id == 0x00000073) return "NetDll_XnpLogonSetQEvent";
  if (id == 0x00000074) return "NetDll_XnpLogonClearQEvent";
  if (id == 0x00000075) return "NetDll_XnpLogonGetQVals";
  if (id == 0x00000076) return "NetDll_XnpLogonSetQVals";
  if (id == 0x00000077) return "NetDll_XnpLogonSetPState";
  if (id == 0x00000078) return "NetDll_XnpGetVlanXboxName";
  if (id == 0x00000079) return "NetDll_XnpSetVlanXboxName";
  if (id == 0x0000007A) return "NetDll_XnpGetActiveSocketList";
  if (id == 0x0000007B) return "NetDll_XnpNoteSystemTime";
  if (id == 0x0000007C) return "NetDll_XnpRegisterKeyForCallerType";
  if (id == 0x0000007D) return "NetDll_XnpUnregisterKeyForCallerType";
  if (id == 0x00000097) return "NetDll_XmlDownloadStart";
  if (id == 0x00000098) return "NetDll_XmlDownloadContinue";
  if (id == 0x00000099) return "NetDll_XmlDownloadStop";
  if (id == 0x000000C7) return "XnpGetXwppRuntimeFilter";
  if (id == 0x000000C9) return "NetDll_XHttpStartup";
  if (id == 0x000000CA) return "NetDll_XHttpShutdown";
  if (id == 0x000000CB) return "NetDll_XHttpOpen";
  if (id == 0x000000CC) return "NetDll_XHttpCloseHandle";
  if (id == 0x000000CD) return "NetDll_XHttpConnect";
  if (id == 0x000000CE) return "NetDll_XHttpSetStatusCallback";
  if (id == 0x000000CF) return "NetDll_XHttpOpenRequest";
  if (id == 0x000000D0) return "NetDll_XHttpOpenRequestUsingMemory";
  if (id == 0x000000D1) return "NetDll_XHttpSendRequest";
  if (id == 0x000000D2) return "NetDll_XHttpReceiveResponse";
  if (id == 0x000000D3) return "NetDll_XHttpQueryHeaders";
  if (id == 0x000000D4) return "NetDll_XHttpReadData";
  if (id == 0x000000D5) return "NetDll_XHttpWriteData";
  if (id == 0x000000D6) return "NetDll_XHttpQueryOption";
  if (id == 0x000000D7) return "NetDll_XHttpSetOption";
  if (id == 0x000000D8) return "NetDll_XHttpDoWork";
  if (id == 0x000000FB) return "NetDll_UpnpStartup";
  if (id == 0x000000FC) return "NetDll_UpnpCleanup";
  if (id == 0x000000FD) return "NetDll_UpnpSearchCreate";
  if (id == 0x000000FE) return "NetDll_UpnpSearchGetDevices";
  if (id == 0x000000FF) return "NetDll_UpnpDescribeCreate";
  if (id == 0x00000100) return "NetDll_UpnpDescribeGetResults";
  if (id == 0x00000101) return "NetDll_UpnpActionCreate";
  if (id == 0x00000102) return "NetDll_UpnpActionGetResults";
  if (id == 0x00000103) return "NetDll_UpnpEventCreate";
  if (id == 0x00000104) return "NetDll_UpnpEventGetCurrentState";
  if (id == 0x00000105) return "NetDll_UpnpEventUnsubscribe";
  if (id == 0x00000106) return "NetDll_UpnpDoWork";
  if (id == 0x00000107) return "NetDll_UpnpCloseHandle";
  if (id == 0x0000012D) return "XNetLogonGetLoggedOnUsers";
  if (id == 0x0000012E) return "XNetLogonGetNatType";
  if (id == 0x0000012F) return "XNetLogonTaskStart";
  if (id == 0x00000130) return "XNetLogonTaskClose";
  if (id == 0x00000131) return "XNetLogonTaskContinue";
  if (id == 0x00000132) return "XNetLogonGetServiceInfo";
  if (id == 0x00000133) return "XNetLogonGetUserPrivileges";
  if (id == 0x00000134) return "XNetLogonSetConsoleCertificate";
  if (id == 0x00000135) return "XNetLogonGetMachineID";
  if (id == 0x00000136) return "XNetLogonGetTitleID";
  if (id == 0x00000137) return "XNetLogonGetTitleVersion";
  if (id == 0x00000138) return "XNetLogonGetServiceNetworkID";
  if (id == 0x00000139) return "XNetLogonGetDnsString";
  if (id == 0x0000013A) return "XNetLogonSetTitleID";
  if (id == 0x0000013B) return "XNetLogonGetExtendedStatus";
  if (id == 0x0000013C) return "XNetLogonClearTicketCaches";
  if (id == 0x00000190) return "XamInputGetCapabilities";
  if (id == 0x00000191) return "XamInputGetState";
  if (id == 0x00000192) return "XamInputSetState";
  if (id == 0x00000193) return "XamInputGetKeystroke";
  if (id == 0x00000194) return "XamInputEnableAutobind";
  if (id == 0x00000195) return "?XamInputRawState@@YAKKKHPAU_XINPUT_RAW@@@Z";
  if (id == 0x00000196) return "XamEnableSystemAppInput";
  if (id == 0x00000197) return "XamInputGetDeviceStats";
  if (id == 0x00000198) return "XamInputGetKeystrokeEx";
  if (id == 0x00000199) return "XamInputGetKeystrokeHud";
  if (id == 0x0000019A) return "XamInputSetLayoutKeyboard";
  if (id == 0x0000019B) return "XamInputToggleKeyLocks";
  if (id == 0x000001A4) return "XamLaunchNewImage";
  if (id == 0x000001A5) return "XLaunchNewImageEx";
  if (id == 0x000001A6) return "XSetLaunchData";
  if (id == 0x000001A7) return "XGetLaunchDataSize";
  if (id == 0x000001A8) return "XGetLaunchData";
  if (id == 0x000001A9) return "XamTerminateTitle";
  if (id == 0x000001AA) return "XGetTrayState";
  if (id == 0x000001AB) return "?ProcessRemoteInput@XAMAuditionHost@@UAAJPBU_XINPUT_KEYSTROKE@@@Z";
  if (id == 0x000001AC) return "XLaunchMedia";
  if (id == 0x000001AE) return "XamTaskCreateQueue";
  if (id == 0x000001AF) return "XamTaskSchedule";
  if (id == 0x000001B0) return "XamTaskReschedule";
  if (id == 0x000001B1) return "XamTaskCloseHandle";
  if (id == 0x000001B2) return "XamTaskCancel";
  if (id == 0x000001B3) return "XamTaskShouldExit";
  if (id == 0x000001B4) return "XamTaskWaitOnCompletion";
  if (id == 0x000001B5) return "XamTaskModify";
  if (id == 0x000001B6) return "XamTaskGetCurrentTask";
  if (id == 0x000001B7) return "XamTaskGetAttributes";
  if (id == 0x000001B8) return "XamExecutingOnBehalfOfTitle";
  if (id == 0x000001C2) return "XamApplySkin";
  if (id == 0x000001C3) return "XamGetRootObj";
  if (id == 0x000001C4) return "XamFormatMessage";
  if (id == 0x000001C5) return "XamBuildResourceLocator";
  if (id == 0x000001C6) return "XamBuildSharedSystemResourceLocator";
  if (id == 0x000001C7) return "XamShowMessageBox";
  if (id == 0x000001C8) return "XCustomGetBannerImage";
  if (id == 0x000001C9) return "XamCustomSetBannerImage";
  if (id == 0x000001CA) return "XCustomSetAction";
  if (id == 0x000001CB) return "XCustomGetLastActionPress";
  if (id == 0x000001CC) return "XCustomGetActionSetting";
  if (id == 0x000001CD) return "XCustomBroadcastActionEvent";
  if (id == 0x000001CE) return "XamGetBkgndDefault";
  if (id == 0x000001CF) return "XamGetDefaultSystemImage";
  if (id == 0x000001D0) return "XamFormatTimeString";
  if (id == 0x000001D2) return "XamFormatDateString";
  if (id == 0x000001D3) return "XamDbgPrint";
  if (id == 0x000001D4) return "XamEnableInactivityProcessing";
  if (id == 0x000001D5) return "XamSetInactivityTime";
  if (id == 0x000001D6) return "XamSetDashContext";
  if (id == 0x000001D7) return "XamGetDashContext";
  if (id == 0x000001D8) return "XamGetCurrentTitleId";
  if (id == 0x000001D9) return "XamGetWCNConfigFile";
  if (id == 0x000001DA) return "XamIsCurrentTitleDash";
  if (id == 0x000001DB) return "XamResetInactivity";
  if (id == 0x000001DC) return "XamAreMixedAccountsSignedIn";
  if (id == 0x000001DD) return "XamBuildGamercardResourceLocator";
  if (id == 0x000001DE) return "XamSetInactivityTimeFromConfig";
  if (id == 0x000001DF) return "XamBuildDynamicResourceLocator";
  if (id == 0x000001E0) return "XamSetPowerMode";
  if (id == 0x000001E2) return "XamExecuteChallenge";
  if (id == 0x000001E3) return "XamIsSysUiInvokedByXenonButton";
  if (id == 0x000001E4) return "XamIsSysUiInvokedByTitle";
  if (id == 0x000001E5) return "XamUniSortCmpString";
  if (id == 0x000001EA) return "XamAlloc";
  if (id == 0x000001EB) return "XamAllocEx";
  if (id == 0x000001EC) return "XamFree";
  if (id == 0x000001ED) return "XamAllocSize";
  if (id == 0x000001F4) return "XMsgInProcessCall";
  if (id == 0x000001F5) return "XMsgCompleteIORequest";
  if (id == 0x000001F6) return "XMsgSystemProcessCall";
  if (id == 0x000001F7) return "XMsgStartIORequest";
  if (id == 0x000001F8) return "XMsgCancelIORequest";
  if (id == 0x000001F9) return "XMsgAcquireAsyncMessageFromOverlapped";
  if (id == 0x000001FA) return "XMsgReleaseAsyncMessageToOverlapped";
  if (id == 0x000001FB) return "XamGetOverlappedResult";
  if (id == 0x000001FC) return "XMsgStartIORequestEx";
  if (id == 0x00000208) return "XamUserGetDeviceContext";
  if (id == 0x00000209) return "XamUserLookupDevice";
  if (id == 0x0000020A) return "XamUserGetXUID";
  if (id == 0x0000020B) return "XamUserLogon";
  if (id == 0x0000020C) return "XamUserGetGamerTag";
  if (id == 0x0000020D) return "XamUserGetUserIndexMask";
  if (id == 0x0000020E) return "XamUserGetName";
  if (id == 0x00000210) return "XamUserGetSigninState";
  if (id == 0x00000211) return "XamUserGetIndexFromXUID";
  if (id == 0x00000212) return "XamUserCheckPrivilege";
  if (id == 0x00000213) return "XamUserAreUsersFriends";
  if (id == 0x00000214) return "XamSetUserPresetPresenceState";
  if (id == 0x00000215) return "XamGetUserPresetPresenceState";
  if (id == 0x00000216) return "XamUserGetUserFlagsFromXUID";
  if (id == 0x00000217) return "XamUserGetMembershipTierFromXUID";
  if (id == 0x00000218) return "XamUserGetOnlineCountryFromXUID";
  if (id == 0x00000219) return "XamUserReadProfileSettings";
  if (id == 0x0000021A) return "XamUserWriteProfileSettings";
  if (id == 0x0000021B) return "XamUserGetMembershipTier";
  if (id == 0x0000021C) return "XamUserGetUserFlags";
  if (id == 0x0000021D) return "XamUserGetRequestedUserIndexMask";
  if (id == 0x0000021E) return "XamUserIsGuest";
  if (id == 0x0000021F) return "XamUserProfileSync";
  if (id == 0x00000220) return "XamUserFlushLogonQueue";
  if (id == 0x00000221) return "XamUserIsOnlineEnabled";
  if (id == 0x00000230) return "XamProfileCreate";
  if (id == 0x00000231) return "XamProfileCreateEnumerator";
  if (id == 0x00000232) return "XamProfileEnumerate";
  if (id == 0x00000233) return "XamProfileDelete";
  if (id == 0x00000234) return "XamProfileGetCreationStatus";
  if (id == 0x00000235) return "XamProfileFindAccount";
  if (id == 0x00000236) return "XamProfileRenameAccount";
  if (id == 0x00000237) return "XamProfileOpen";
  if (id == 0x00000238) return "XamProfileClose";
  if (id == 0x00000239) return "XamProfileSaveAccountInfo";
  if (id == 0x0000023A) return "XamProfileLoadAccountInfo";
  if (id == 0x0000023B) return "XamProfileRecoverTitle";
  if (id == 0x00000244) return "XamAppLoad";
  if (id == 0x00000245) return "XamAppUnloadSelf";
  if (id == 0x00000246) return "XamAppUnloadStack";
  if (id == 0x00000247) return "XamSendMessageToLoadedApps";
  if (id == 0x00000248) return "XamAppRequestLoad";
  if (id == 0x00000249) return "XamAppUnrequestLoad";
  if (id == 0x0000024A) return "XamNavigate";
  if (id == 0x0000024B) return "XamRegisterSysApp";
  if (id == 0x0000024C) return "XamUnregisterSysApp";
  if (id == 0x00000258) return "XamContentCreate";
  if (id == 0x00000259) return "XamContentDelete";
  if (id == 0x0000025A) return "XamContentClose";
  if (id == 0x0000025B) return "XamContentCreateEnumerator";
  if (id == 0x0000025C) return "XamContentCreateDeviceEnumerator";
  if (id == 0x0000025D) return "XamContentGetDeviceData";
  if (id == 0x0000025E) return "XamContentGetDeviceName";
  if (id == 0x0000025F) return "XamContentSetThumbnail";
  if (id == 0x00000260) return "XamCreateEnumeratorHandle";
  if (id == 0x00000261) return "XamGetPrivateEnumStructureFromHandle";
  if (id == 0x00000262) return "XamEnumerate";
  if (id == 0x00000263) return "XamContentGetThumbnail";
  if (id == 0x00000264) return "XamContentGetCreator";
  if (id == 0x00000265) return "XamContentLaunchImage";
  if (id == 0x00000266) return "XamContentGetAttributes";
  if (id == 0x00000267) return "XamContentGetDeviceState";
  if (id == 0x00000268) return "XamContentGetLicenseMask";
  if (id == 0x00000269) return "XamContentFlush";
  if (id == 0x0000026C) return "XamContentCopyInternal";
  if (id == 0x0000026D) return "XamContentMoveInternal";
  if (id == 0x0000026E) return "XamContentGetMetaDataInternal";
  if (id == 0x0000026F) return "XamContentCreateEnumeratorInternal";
  if (id == 0x00000270) return "XamContentAggregateCreateEnumerator";
  if (id == 0x00000271) return "XamContentDeleteInternal";
  if (id == 0x00000272) return "XamContentCreateInternal";
  if (id == 0x00000273) return "XamContentCreateAndMountPackage";
  if (id == 0x00000274) return "XamContentSetThumbnailInternal";
  if (id == 0x00000275) return "XamContentLaunchImageInternal";
  if (id == 0x00000276) return "XamContentOpenPackageFile";
  if (id == 0x00000277) return "XamContentMountPackage";
  if (id == 0x00000278) return "XamContentWritePackageHeader";
  if (id == 0x00000279) return "XamContentFlushPackage";
  if (id == 0x0000027A) return "XamContentDismountAndClosePackage";
  if (id == 0x0000027B) return "XamContentClosePackageFile";
  if (id == 0x0000027C) return "XamContentResolve";
  if (id == 0x0000027D) return "XamContentResolveInternal";
  if (id == 0x0000027E) return "XamContentGetAttributesInternal";
  if (id == 0x00000280) return "XamGetExecutionId";
  if (id == 0x00000281) return "XamGetGameRatings";
  if (id == 0x00000282) return "XamGetSystemVersion";
  if (id == 0x0000028A) return "XamNotifyCreateListener";
  if (id == 0x0000028B) return "XNotifyGetNext";
  if (id == 0x0000028C) return "XNotifyPositionUI";
  if (id == 0x0000028D) return "XNotifyDelayUI";
  if (id == 0x0000028E) return "XNotifyBroadcast";
  if (id == 0x0000028F) return "XNotifyRegisterArea";
  if (id == 0x00000290) return "XNotifyQueueUI";
  if (id == 0x00000291) return "XamNotifyCreateListenerInternal";
  if (id == 0x00000292) return "XNotifyUISetOptions";
  if (id == 0x00000293) return "XNotifyUIGetOptions";
  if (id == 0x0000029E) return "XamUpdateStart";
  if (id == 0x0000029F) return "XamUpdateGetProgress";
  if (id == 0x000002A0) return "XamUpdateGetExtenderInstance";
  if (id == 0x000002A1) return "XamUpdateFinish";
  if (id == 0x000002A2) return "XamUpdateAttachExtenderInstance";
  if (id == 0x000002A3) return "XamUpdateAllocateExtenderBuffer";
  if (id == 0x000002A4) return "XamRestartAfterDeclinedUpdate";
  if (id == 0x000002A5) return "XamUIThreadDisableFontPatching";
  if (id == 0x000002B2) return "XamCacheStoreFile";
  if (id == 0x000002B3) return "XamCacheFetchFile";
  if (id == 0x000002B4) return "XamCacheOpenFile";
  if (id == 0x000002B5) return "XamCacheCloseFile";
  if (id == 0x000002B6) return "XamGetCachedTitleName";
  if (id == 0x000002B7) return "XamCacheReset";
  if (id == 0x000002B8) return "XamGetCachedGamerTag";
  if (id == 0x000002B9) return "XamGetCachedGamerTagW";
  if (id == 0x000002BC) return "XamShowSigninUI";
  if (id == 0x000002BD) return "XamShowSigninUIEx";
  if (id == 0x000002BE) return "XamShowSigninUIp";
  if (id == 0x000002BF) return "XamShowFriendsUI";
  if (id == 0x000002C0) return "XamShowMessagesUI";
  if (id == 0x000002C1) return "XamShowKeyboardUI";
  if (id == 0x000002C2) return "XamShowQuickChatUI";
  if (id == 0x000002C3) return "XamShowVoiceMailUI";
  if (id == 0x000002C4) return "XamShowGamerCardUI";
  if (id == 0x000002C5) return "XamShowAchievementsUI";
  if (id == 0x000002C6) return "XamShowPlayerReviewUI";
  if (id == 0x000002C7) return "XamShowMarketplaceUI";
  if (id == 0x000002C8) return "XamShowPlayersUI";
  if (id == 0x000002C9) return "XamShowUpdaterUI";
  if (id == 0x000002CA) return "XamShowMessageBoxUI";
  if (id == 0x000002CB) return "XamShowDeviceSelectorUI";
  if (id == 0x000002CC) return "XamShowMessageComposeUI";
  if (id == 0x000002CD) return "XamShowGameInviteUI";
  if (id == 0x000002CE) return "XamShowFriendRequestUI";
  if (id == 0x000002CF) return "XamShowCreateProfileUI";
  if (id == 0x000002D0) return "XamShowGamesUI";
  if (id == 0x000002D1) return "XamShowLiveSignupUI";
  if (id == 0x000002D2) return "XamShowFriendsUIp";
  if (id == 0x000002D3) return "XamShowComplaintUI";
  if (id == 0x000002D4) return "XamShowReputationUI";
  if (id == 0x000002D5) return "XamShowGamerCardUIForXUID";
  if (id == 0x000002D6) return "XamShowForcedNameChangeUI";
  if (id == 0x000002D7) return "XamShowLiveUpsellUI";
  if (id == 0x000002D8) return "XamShowPasscodeVerifyUI";
  if (id == 0x000002D9) return "XamShowDirtyDiscErrorUI";
  if (id == 0x000002DA) return "XamShowSignupCreditCardUI";
  if (id == 0x000002DB) return "XamShowPrivateChatInviteUI";
  if (id == 0x000002EE) return "XamUserCreateAchievementEnumerator";
  if (id == 0x000002EF) return "XamReadTile";
  if (id == 0x000002F0) return "XamWriteGamerTile";
  if (id == 0x000002F1) return "XamWriteTile";
  if (id == 0x000002F2) return "?XamReadImage@@YAJW4XTILETYPE@@KK_KPAPAU_XUIBRUSH@@@Z";
  if (id == 0x000002F3) return "XamUserCreateTitlesPlayedEnumerator";
  if (id == 0x000002F4) return "XamDecompressPNGToTexture";
  if (id == 0x000002F5) return "XamReadTileToTexture";
  if (id == 0x000002F6) return "XamReadString";
  if (id == 0x000002F7) return "XamUserCreateStatsEnumerator";
  if (id == 0x000002F8) return "XamPrepareGamerTiles";
  if (id == 0x00000302) return "XamUserAddRecentPlayer";
  if (id == 0x00000303) return "XamUserUpdateRecentPlayer";
  if (id == 0x00000304) return "XamUserCreatePlayerEnumerator";
  if (id == 0x00000305) return "XamParseGamerTileKey";
  if (id == 0x0000030C) return "XamVoiceCreate";
  if (id == 0x0000030D) return "XamVoiceHeadsetPresent";
  if (id == 0x0000030E) return "XamVoiceSubmitPacket";
  if (id == 0x0000030F) return "XamVoiceClose";
  if (id == 0x00000316) return "XamSessionCreateHandle";
  if (id == 0x00000317) return "XamSessionRefObjByHandle";
  if (id == 0x00000320) return "XuiAnimRun";
  if (id == 0x00000321) return "XuiApplyLocale";
  if (id == 0x00000322) return "XuiBubbleMessage";
  if (id == 0x00000323) return "XuiControlIsBackButton";
  if (id == 0x00000324) return "XuiControlIsNavButton";
  if (id == 0x00000325) return "XuiCreateObject";
  if (id == 0x00000326) return "XuiDestroyObject";
  if (id == 0x00000327) return "XuiDynamicCast";
  if (id == 0x00000328) return "XuiElementAddChild";
  if (id == 0x00000329) return "XuiElementFindNamedFrame";
  if (id == 0x0000032A) return "XuiElementGetChildById";
  if (id == 0x0000032B) return "XuiElementGetFirstChild";
  if (id == 0x0000032C) return "XuiElementGetFocus";
  if (id == 0x0000032D) return "XuiElementGetFocusUser";
  if (id == 0x0000032E) return "XuiElementGetId";
  if (id == 0x0000032F) return "XuiElementGetLastChild";
  if (id == 0x00000330) return "XuiElementGetNext";
  if (id == 0x00000331) return "XuiElementGetParent";
  if (id == 0x00000332) return "XuiElementGetUserFocus";
  if (id == 0x00000333) return "XuiElementInitFocus";
  if (id == 0x00000334) return "XuiElementInitUserFocus";
  if (id == 0x00000335) return "XuiElementPlayTimeline";
  if (id == 0x00000336) return "XuiElementSetBounds";
  if (id == 0x00000337) return "XuiElementSetFocus";
  if (id == 0x00000338) return "XuiElementSetUserFocus";
  if (id == 0x00000339) return "XuiElementTreeGetFocus";
  if (id == 0x0000033A) return "XuiFindClass";
  if (id == 0x0000033B) return "XuiFreeStringTable";
  if (id == 0x0000033C) return "XuiGetBaseObject";
  if (id == 0x0000033D) return "XuiGetClass";
  if (id == 0x0000033E) return "XuiGetObjectClass";
  if (id == 0x0000033F) return "XuiGetOuter";
  if (id == 0x00000340) return "XuiInit";
  if (id == 0x00000341) return "XuiLoadFromBinary";
  if (id == 0x00000342) return "XuiLoadStringTableFromFile";
  if (id == 0x00000343) return "XuiVisualGetBasePath";
  if (id == 0x00000344) return "XuiLookupStringTable";
  if (id == 0x00000345) return "XuiNavButtonGetPressPath";
  if (id == 0x00000346) return "XuiObjectFromHandle";
  if (id == 0x00000347) return "XuiObjectGetProperty";
  if (id == 0x00000348) return "XuiObjectGetPropertyId";
  if (id == 0x00000349) return "XuiProcessInput";
  if (id == 0x0000034A) return "XuiRegisterClass";
  if (id == 0x0000034B) return "XuiRenderBegin";
  if (id == 0x0000034C) return "XuiRenderCreateDC";
  if (id == 0x0000034D) return "XuiRenderDCDeviceChanged";
  if (id == 0x0000034E) return "XuiRenderDestroyDC";
  if (id == 0x0000034F) return "XuiRenderEnd";
  if (id == 0x00000350) return "XuiRenderGetBackBufferSize";
  if (id == 0x00000351) return "XuiRenderInit";
  if (id == 0x00000352) return "XuiRenderInitShared";
  if (id == 0x00000353) return "XuiRenderPresent";
  if (id == 0x00000354) return "XuiRenderSetViewTransform";
  if (id == 0x00000355) return "XuiRenderUninit";
  if (id == 0x00000357) return "XuiSceneCreate";
  if (id == 0x00000358) return "XuiSceneNavigateBack";
  if (id == 0x00000359) return "XuiSceneNavigateFirst";
  if (id == 0x0000035A) return "XuiSceneNavigateForward";
  if (id == 0x0000035B) return "XuiScenePlayBackFromTransition";
  if (id == 0x0000035C) return "XuiScenePlayBackToTransition";
  if (id == 0x0000035D) return "XuiScenePlayFromTransition";
  if (id == 0x0000035E) return "XuiScenePlayToTransition";
  if (id == 0x0000035F) return "XuiSendMessage";
  if (id == 0x00000360) return "XuiSetLocale";
  if (id == 0x00000361) return "XuiUninit";
  if (id == 0x00000362) return "XuiUnregisterClass";
  if (id == 0x00000363) return "XuiTextElementSetText";
  if (id == 0x00000364) return "XuiSetTimer";
  if (id == 0x00000365) return "XuiTimersRun";
  if (id == 0x00000366) return "XuiTextElementGetText";
  if (id == 0x00000367) return "XuiVisualSetBasePath";
  if (id == 0x00000368) return "XuiHandleIsValid";
  if (id == 0x00000369) return "XuiAlloc";
  if (id == 0x0000036A) return "XuiFree";
  if (id == 0x0000036B) return "XuiDefault_True";
  if (id == 0x0000036C) return "XuiDefault_EmptyString";
  if (id == 0x0000036D) return "XuiDefault_IntegerZero";
  if (id == 0x0000036E) return "XuiCopyString";
  if (id == 0x0000036F) return "XuiRealloc";
  if (id == 0x00000370) return "XuiControlPlayOptionalVisual";
  if (id == 0x00000371) return "XuiKillTimer";
  if (id == 0x00000372) return "XuiElementEnableInput";
  if (id == 0x00000373) return "XuiElementInputEnabled";
  if (id == 0x00000374) return "XuiIsInstanceOf";
  if (id == 0x00000375) return "XuiResourceComposeLocator";
  if (id == 0x00000376) return "XuiResourceLocatorIsAbsolute";
  if (id == 0x00000377) return "XuiBroadcastMessage";
  if (id == 0x00000378) return "XuiElementDisallowRecursiveTimelineControl";
  if (id == 0x00000379) return "XUIElementPropVal_Construct";
  if (id == 0x0000037A) return "XUIElementPropVal_Destruct";
  if (id == 0x0000037B) return "XUIElementPropVal_SetString";
  if (id == 0x0000037C) return "XuiObjectSetProperty";
  if (id == 0x0000037D) return "XuiElementGetOpacity";
  if (id == 0x0000037E) return "XuiElementSetOpacity";
  if (id == 0x0000037F) return "XuiEditSetTextLimit";
  if (id == 0x00000380) return "XuiEditGetTextLimit";
  if (id == 0x00000381) return "XuiSliderSetValue";
  if (id == 0x00000382) return "XuiSliderGetValue";
  if (id == 0x00000383) return "XuiSliderSetRange";
  if (id == 0x00000384) return "XuiElementUnlink";
  if (id == 0x00000385) return "XuiElementInsertChild";
  if (id == 0x00000386) return "XuiSceneNavigateBackToFirst";
  if (id == 0x00000387) return "XuiProgressBarSetRange";
  if (id == 0x00000388) return "XuiProgressBarSetValue";
  if (id == 0x00000389) return "XuiProgressBarGetValue";
  if (id == 0x0000038A) return "XuiControlAttachVisual";
  if (id == 0x0000038B) return "XuiCreateTextureBrush";
  if (id == 0x0000038C) return "XuiDestroyBrush";
  if (id == 0x0000038D) return "XUIElementPropVal_SetColorFromUint";
  if (id == 0x0000038E) return "XuiFigureSetFill";
  if (id == 0x0000038F) return "XuiSliderGetRange";
  if (id == 0x00000390) return "XuiFigureSetTexture";
  if (id == 0x00000391) return "XuiControlGetItemAssociation";
  if (id == 0x00000392) return "XuiResourceLoadAll";
  if (id == 0x00000393) return "XuiImageElementSetImagePath";
  if (id == 0x00000394) return "XuiImageElementGetImagePath";
  if (id == 0x00000395) return "XuiControlGetVisual";
  if (id == 0x00000396) return "XuiControlGetNavigation";
  if (id == 0x00000397) return "XuiLookupStringTableByIndex";
  if (id == 0x00000398) return "XUIElementPropVal_SetBool";
  if (id == 0x00000399) return "XuiElementHasFocus";
  if (id == 0x0000039A) return "XUIElementPropVal_SetUint";
  if (id == 0x0000039B) return "XUIElementPropVal_Clear";
  if (id == 0x0000039C) return "XuiEditSetTextFormatInfo";
  if (id == 0x0000039D) return "XuiCreateSolidBrush";
  if (id == 0x0000039E) return "XuiSceneInterruptTransitions";
  if (id == 0x0000039F) return "XuiResourceOpen";
  if (id == 0x000003A0) return "XuiResourceRead";
  if (id == 0x000003A1) return "XuiResourceClose";
  if (id == 0x000003A2) return "XuiVisualCreateInstance";
  if (id == 0x000003A3) return "XuiElementGetTimeline";
  if (id == 0x000003A4) return "?GetCodecVersion@CCalMediaInfo@@UBAKXZ";
  if (id == 0x000003A5) return "XuiElementIsDescendant";
  if (id == 0x000003A6) return "XuiSetMessageFilter";
  if (id == 0x000003CA) return "XGetAudioFlags";
  if (id == 0x000003CB) return "XGetAVPack";
  if (id == 0x000003CC) return "XGetGameRegion";
  if (id == 0x000003CD) return "XGetLanguage";
  if (id == 0x000003CE) return "XGetLocale";
  if (id == 0x000003CF) return "?XGetVideoFlags@@YAKXZ";
  if (id == 0x000003D0) return "XGetVideoStandard";
  if (id == 0x000003D1) return "XGetVideoMode";
  if (id == 0x000003D4) return "XamSetAutomation";
  if (id == 0x000003D5) return "XAutomationpBindController";
  if (id == 0x000003D6) return "XAutomationpUnbindController";
  if (id == 0x000003D7) return "XAutomationpInputXenonButton";
  if (id == 0x000003D8) return "XAutomationpInputPress";
  if (id == 0x000003D9) return "XAutomationpInputSetState";
  if (id == 0x000003DA) return "XamEnableOverdraw";
  if (id == 0x000003DB) return "g_XuiAutomation";
  if (id == 0x000003E4) return "GamerCardStartup";
  if (id == 0x000003E5) return "GamerCardCleanup";
  if (id == 0x000003E6) return "GamerCardRegisterControls";
  if (id == 0x000003E7) return "GamerCardUnregisterControls";
  if (id == 0x000003E8) return "RtlFindFirstFile";
  if (id == 0x000003E9) return "RtlFindNextFile";
  if (id == 0x000003EA) return "RtlGetModuleFileName";
  if (id == 0x000003EB) return "RtlOutputDebugString";
  if (id == 0x000003EC) return "RtlRemoveDirectory";
  if (id == 0x000003ED) return "RtlSleep";
  if (id == 0x000003EE) return "RtlGetLastError";
  if (id == 0x000003EF) return "RtlSetLastError";
  if (id == 0x000003F0) return "RtlSetLastNTError";
  if (id == 0x000003F1) return "RtlDebugPrint";
  if (id == 0x000003F2) return "RtlDebugError";
  if (id == 0x000003F3) return "XDebugWarning";
  if (id == 0x000003F4) return "RtlDebugTrace";
  if (id == 0x000003F5) return "RtlDebugEntry";
  if (id == 0x000003F6) return "RtlDebugExit";
  if (id == 0x000003F7) return "RtlGetAttributesOnHeapAlloc";
  if (id == 0x000003F8) return "RtlSetAttributesOnHeapAlloc";
  if (id == 0x000003FA) return "RtlCreateHeap";
  if (id == 0x000003FB) return "RtlDestroyHeap";
  if (id == 0x000003FC) return "RtlAllocateHeap";
  if (id == 0x000003FD) return "RtlAllocateHeapSlowly";
  if (id == 0x000003FE) return "RtlReAllocateHeap";
  if (id == 0x000003FF) return "RtlFreeHeap";
  if (id == 0x00000400) return "RtlFreeHeapSlowly";
  if (id == 0x00000401) return "RtlSizeHeap";
  if (id == 0x00000402) return "RtlZeroHeap";
  if (id == 0x00000403) return "RtlDebugWalkHeap";
  if (id == 0x00000404) return "RtlWalkHeap";
  if (id == 0x00000405) return "RtlLockHeap";
  if (id == 0x00000406) return "RtlUnlockHeap";
  if (id == 0x00000407) return "RtlValidateHeap";
  if (id == 0x00000408) return "RtlDebugCompactHeap";
  if (id == 0x00000409) return "RtlCompactHeap";
  if (id == 0x0000040E) return "OutputDebugStringA";
  if (id == 0x0000040F) return "DebugBreak";
  if (id == 0x00000410) return "GetCurrentThreadId";
  if (id == 0x00000411) return "XDebugError";
  if (id == 0x00000412) return "XDebugWarning";
  if (id == 0x00000413) return "RtlDebugSetLevel";
  if (id == 0x00000414) return "CloseHandle";
  if (id == 0x00000415) return "GetTickCount";
  if (id == 0x00000416) return "GetLastError";
  if (id == 0x00000417) return "SetFilePointer";
  if (id == 0x00000418) return "SetFilePointerEx";
  if (id == 0x00000419) return "SetLastError";
  if (id == 0x0000041A) return "MultiByteToWideChar";
  if (id == 0x0000041B) return "WideCharToMultiByte";
  if (id == 0x0000041C) return "ReadFile";
  if (id == 0x0000041D) return "FlushFileBuffers";
  if (id == 0x0000041E) return "WriteFile";
  if (id == 0x0000041F) return "OutputDebugStringW";
  if (id == 0x00000420) return "SetEvent";
  if (id == 0x00000421) return "XapiFormatTimeOut";
  if (id == 0x00000422) return "CreateMutexA";
  if (id == 0x00000423) return "OpenMutexA";
  if (id == 0x00000424) return "ReleaseMutex";
  if (id == 0x00000425) return "WaitForSingleObject";
  if (id == 0x00000426) return "WaitForSingleObjectEx";
  if (id == 0x00000427) return "GetFileSize";
  if (id == 0x00000428) return "GetFileSizeEx";
  if (id == 0x00000429) return "XapiDirectoryInformationToFindData";
  if (id == 0x0000042A) return "XapiFormatObjectAttributes";
  if (id == 0x0000042B) return "ResetEvent";
  if (id == 0x0000042C) return "wsprintfA";
  if (id == 0x0000042D) return "wsprintfW";
  if (id == 0x0000042E) return "GetOverlappedResult";
  if (id == 0x0000042F) return "QueryPerformanceCounter";
  if (id == 0x00000430) return "QueryPerformanceFrequency";
  if (id == 0x00000431) return "LocalAlloc";
  if (id == 0x00000432) return "LocalFree";
  if (id == 0x00000433) return "RaiseException";
  if (id == 0x00000434) return "RtlUniform";
  if (id == 0x00000435) return "RtlRandom";
  if (id == 0x00000436) return "Sleep";
  if (id == 0x00000437) return "SleepEx";
  if (id == 0x00000438) return "XMemSet";
  if (id == 0x00000439) return "XRegisterThreadNotifyRoutine";
  if (id == 0x0000043A) return "XGetOverlappedExtendedError";
  if (id == 0x0000043B) return "XGetOverlappedResult";
  if (id == 0x0000043C) return "CreateThread";
  if (id == 0x0000043D) return "ResumeThread";
  if (id == 0x0000043E) return "ExitThread";
  if (id == 0x0000043F) return "GetTimeZoneInformation";
  if (id == 0x00000440) return "GetSystemTimeAsFileTime";
  if (id == 0x00000441) return "SystemTimeToFileTime";
  if (id == 0x00000442) return "FileTimeToSystemTime";
  if (id == 0x00000443) return "GetSystemTime";
  if (id == 0x00000444) return "GetLocalTime";
  if (id == 0x00000445) return "CreateDirectoryA";
  if (id == 0x00000446) return "CreateEventA";
  if (id == 0x00000447) return "CreateFileA";
  if (id == 0x00000448) return "DeleteFileA";
  if (id == 0x00000449) return "FindFirstFileA";
  if (id == 0x0000044A) return "FindNextFileA";
  if (id == 0x0000044B) return "GetFileAttributesA";
  if (id == 0x0000044D) return "GetFileAttributesExA";
  if (id == 0x0000044E) return "GetModuleHandleA";
  if (id == 0x0000044F) return "GetDiskFreeSpaceExA";
  if (id == 0x00000450) return "CopyFileA";
  if (id == 0x00000451) return "PIXAddEvent";
  if (id == 0x00000452) return "PIXBeginEvent";
  if (id == 0x00000453) return "PIXEndEvent";
  if (id == 0x00000454) return "PIXBeginCapture";
  if (id == 0x00000455) return "PIXEndCapture";
  if (id == 0x00000456) return "PIXAddCounter";
  if (id == 0x00000457) return "PIXWriteData";
  if (id == 0x00000458) return "SetWaitableTimer";
  if (id == 0x00000459) return "CancelWaitableTimer";
  if (id == 0x0000045A) return "CreateWaitableTimerA";
  if (id == 0x0000045B) return "DuplicateHandle";
  if (id == 0x0000045C) return "XapipCreateThread";
  if (id == 0x0000045D) return "lstrcpyA";
  if (id == 0x0000045E) return "lstrcpyW";
  if (id == 0x0000045F) return "lstrcpynA";
  if (id == 0x00000460) return "lstrcpynW";
  if (id == 0x00000461) return "lstrcatA";
  if (id == 0x00000462) return "lstrcatW";
  if (id == 0x00000463) return "lstrlenA";
  if (id == 0x00000464) return "lstrlenW";
  if (id == 0x00000465) return "IsBadReadPtr";
  if (id == 0x00000466) return "IsBadWritePtr";
  if (id == 0x00000467) return "FileTimeToLocalFileTime";
  if (id == 0x000004B0) return "XMPRegisterCodec";
  if (id == 0x000007D2) return "GetProcessHeap";
  if (id == 0x000007D3) return "UnhandledExceptionFilter";
  if (id == 0x000007D4) return "SetUnhandledExceptionFilter";

  return nullptr;
}

const char* xamNameGen(int id, int version)
{
  if (version > 0) {
    if (version <= 1640) return xamNameGen_1640(id);
    if (version <= 1746) return xamNameGen_1746(id);
    if (version <= 1838) return xamNameGen_1838(id);
  }

  if (id == 0x00000001) return "NetDll_WSAStartup";
  if (id == 0x00000002) return "NetDll_WSACleanup";
  if (id == 0x00000003) return "NetDll_socket";
  if (id == 0x00000004) return "NetDll_closesocket";
  if (id == 0x00000005) return "NetDll_shutdown";
  if (id == 0x00000006) return "NetDll_ioctlsocket";
  if (id == 0x00000007) return "NetDll_setsockopt";
  if (id == 0x00000008) return "NetDll_getsockopt";
  if (id == 0x00000009) return "NetDll_getsockname";
  if (id == 0x0000000A) return "NetDll_getpeername";
  if (id == 0x0000000B) return "NetDll_bind";
  if (id == 0x0000000C) return "NetDll_connect";
  if (id == 0x0000000D) return "NetDll_listen";
  if (id == 0x0000000E) return "NetDll_accept";
  if (id == 0x0000000F) return "NetDll_select";
  if (id == 0x00000010) return "NetDll_WSAGetOverlappedResult";
  if (id == 0x00000011) return "NetDll_WSACancelOverlappedIO";
  if (id == 0x00000012) return "NetDll_recv";
  if (id == 0x00000013) return "NetDll_WSARecv";
  if (id == 0x00000014) return "NetDll_recvfrom";
  if (id == 0x00000015) return "NetDll_WSARecvFrom";
  if (id == 0x00000016) return "NetDll_send";
  if (id == 0x00000017) return "NetDll_WSASend";
  if (id == 0x00000018) return "NetDll_sendto";
  if (id == 0x00000019) return "NetDll_WSASendTo";
  if (id == 0x0000001A) return "NetDll_inet_addr";
  if (id == 0x0000001B) return "NetDll_WSAGetLastError";
  if (id == 0x0000001C) return "NetDll_WSASetLastError";
  if (id == 0x0000001D) return "NetDll_WSACreateEvent";
  if (id == 0x0000001E) return "NetDll_WSACloseEvent";
  if (id == 0x0000001F) return "NetDll_WSASetEvent";
  if (id == 0x00000020) return "NetDll_WSAResetEvent";
  if (id == 0x00000021) return "NetDll_WSAWaitForMultipleEvents";
  if (id == 0x00000022) return "NetDll___WSAFDIsSet";
  if (id == 0x00000023) return "NetDll_WSAEventSelect";
  if (id == 0x00000024) return "NetDll_WSAStartupEx";
  if (id == 0x00000033) return "NetDll_XNetStartup";
  if (id == 0x00000034) return "NetDll_XNetCleanup";
  if (id == 0x00000035) return "NetDll_XNetRandom";
  if (id == 0x00000036) return "NetDll_XNetCreateKey";
  if (id == 0x00000037) return "NetDll_XNetRegisterKey";
  if (id == 0x00000038) return "NetDll_XNetUnregisterKey";
  if (id == 0x00000039) return "NetDll_XNetXnAddrToInAddr";
  if (id == 0x0000003A) return "NetDll_XNetServerToInAddr";
  if (id == 0x0000003B) return "NetDll_XNetTsAddrToInAddr";
  if (id == 0x0000003C) return "NetDll_XNetInAddrToXnAddr";
  if (id == 0x0000003D) return "NetDll_XNetInAddrToServer";
  if (id == 0x0000003E) return "NetDll_XNetInAddrToString";
  if (id == 0x0000003F) return "NetDll_XNetUnregisterInAddr";
  if (id == 0x00000040) return "NetDll_XNetXnAddrToMachineId";
  if (id == 0x00000041) return "NetDll_XNetConnect";
  if (id == 0x00000042) return "NetDll_XNetGetConnectStatus";
  if (id == 0x00000043) return "NetDll_XNetDnsLookup";
  if (id == 0x00000044) return "NetDll_XNetDnsRelease";
  if (id == 0x00000045) return "NetDll_XNetQosListen";
  if (id == 0x00000046) return "NetDll_XNetQosLookup";
  if (id == 0x00000047) return "NetDll_XNetQosServiceLookup";
  if (id == 0x00000048) return "NetDll_XNetQosRelease";
  if (id == 0x00000049) return "NetDll_XNetGetTitleXnAddr";
  if (id == 0x0000004A) return "NetDll_XNetGetDebugXnAddr";
  if (id == 0x0000004B) return "NetDll_XNetGetEthernetLinkStatus";
  if (id == 0x0000004C) return "NetDll_XNetGetBroadcastVersionStatus";
  if (id == 0x0000004D) return "NetDll_XNetQosGetListenStats";
  if (id == 0x0000004E) return "NetDll_XNetGetOpt";
  if (id == 0x0000004F) return "NetDll_XNetSetOpt";
  if (id == 0x00000050) return "NetDll_XNetStartupEx";
  if (id == 0x00000051) return "NetDll_XNetReplaceKey";
  if (id == 0x00000052) return "NetDll_XNetGetXnAddrPlatform";
  if (id == 0x00000053) return "NetDll_XNetGetSystemLinkPort";
  if (id == 0x00000054) return "NetDll_XNetSetSystemLinkPort";
  if (id == 0x00000055) return "NetDll_XNetDnsReverseLookup";
  if (id == 0x00000056) return "NetDll_XNetDnsReverseRelease";
  if (id == 0x00000065) return "NetDll_XnpLoadConfigParams";
  if (id == 0x00000066) return "NetDll_XnpSaveConfigParams";
  if (id == 0x00000067) return "NetDll_XnpConfigUPnP";
  if (id == 0x00000068) return "NetDll_XnpConfig";
  if (id == 0x00000069) return "NetDll_XnpGetConfigStatus";
  if (id == 0x0000006A) return "NetDll_XnpLoadMachineAccount";
  if (id == 0x0000006B) return "NetDll_XnpSaveMachineAccount";
  if (id == 0x0000006C) return "NetDll_XnpCapture";
  if (id == 0x0000006D) return "NetDll_XnpEthernetInterceptSetCallbacks";
  if (id == 0x0000006E) return "NetDll_XnpEthernetInterceptXmit";
  if (id == 0x0000006F) return "NetDll_XnpEthernetInterceptRecv";
  if (id == 0x00000070) return "NetDll_XnpLogonGetStatus";
  if (id == 0x00000071) return "NetDll_XnpLogonGetQFlags";
  if (id == 0x00000072) return "NetDll_XnpLogonSetQFlags";
  if (id == 0x00000073) return "NetDll_XnpLogonSetQEvent";
  if (id == 0x00000074) return "NetDll_XnpLogonClearQEvent";
  if (id == 0x00000075) return "NetDll_XnpLogonGetQVals";
  if (id == 0x00000076) return "NetDll_XnpLogonSetQVals";
  if (id == 0x00000077) return "NetDll_XnpLogonSetPState";
  if (id == 0x00000078) return "NetDll_XnpGetVlanXboxName";
  if (id == 0x00000079) return "NetDll_XnpSetVlanXboxName";
  if (id == 0x0000007A) return "NetDll_XnpGetActiveSocketList";
  if (id == 0x0000007B) return "NetDll_XnpNoteSystemTime";
  if (id == 0x0000007C) return "NetDll_XnpRegisterKeyForCallerType";
  if (id == 0x0000007D) return "NetDll_XnpUnregisterKeyForCallerType";
  if (id == 0x0000007E) return "NetDll_XnpLogonGetChallenge";
  if (id == 0x0000007F) return "NetDll_XnpLogonClearChallenge";
  if (id == 0x00000080) return "NetDll_XnpLogonSetChallengeResponse";
  if (id == 0x00000081) return "NetDll_XnpGetSecAssocList";
  if (id == 0x00000082) return "NetDll_XnpGetKeyList";
  if (id == 0x00000083) return "NetDll_XnpGetQosLookupList";
  if (id == 0x00000084) return "NetDll_XnpPersistTitleState";
  if (id == 0x00000085) return "NetDll_XnpReplaceKeyForCallerType";
  if (id == 0x00000086) return "NetDll_XnpEthernetInterceptSetExtendedReceiveCallback";
  if (id == 0x00000087) return "NetDll_XnpQosHistoryLoad";
  if (id == 0x00000088) return "NetDll_XnpQosHistorySaveMeasurements";
  if (id == 0x00000089) return "NetDll_XnpQosHistoryGetEntries";
  if (id == 0x0000008A) return "NetDll_XnpQosHistoryGetAggregateMeasurement";
  if (id == 0x0000008B) return "NetDll_XnpToolSetCallbacks";
  if (id == 0x0000008C) return "NetDll_XnpToolIpProxyInject";
  if (id == 0x0000008D) return "NetDll_XnpUpdateConfigParams";
  if (id == 0x0000008E) return "NetDll_XnpEthernetInterceptXmitAsIp";
  if (id == 0x0000008F) return "NetDll_XnpConfigUPnPPortAndExternalAddr";
  if (id == 0x00000097) return "NetDll_XmlDownloadStart";
  if (id == 0x00000098) return "NetDll_XmlDownloadContinue";
  if (id == 0x00000099) return "NetDll_XmlDownloadStop";
  if (id == 0x0000009A) return "NetDll_XmlDownloadGetParseTime";
  if (id == 0x0000009B) return "NetDll_XmlDownloadGetReceivedDataSize";
  if (id == 0x000000C6) return "XnpGetXwppMemoryLogSnapshot";
  if (id == 0x000000C7) return "XnpGetXwppRuntimeFilter";
  if (id == 0x000000C9) return "NetDll_XHttpStartup";
  if (id == 0x000000CA) return "NetDll_XHttpShutdown";
  if (id == 0x000000CB) return "NetDll_XHttpOpen";
  if (id == 0x000000CC) return "NetDll_XHttpCloseHandle";
  if (id == 0x000000CD) return "NetDll_XHttpConnect";
  if (id == 0x000000CE) return "NetDll_XHttpSetStatusCallback";
  if (id == 0x000000CF) return "NetDll_XHttpOpenRequest";
  if (id == 0x000000D0) return "NetDll_XHttpOpenRequestUsingMemory";
  if (id == 0x000000D1) return "NetDll_XHttpSendRequest";
  if (id == 0x000000D2) return "NetDll_XHttpReceiveResponse";
  if (id == 0x000000D3) return "NetDll_XHttpQueryHeaders";
  if (id == 0x000000D4) return "NetDll_XHttpReadData";
  if (id == 0x000000D5) return "NetDll_XHttpWriteData";
  if (id == 0x000000D6) return "NetDll_XHttpQueryOption";
  if (id == 0x000000D7) return "NetDll_XHttpSetOption";
  if (id == 0x000000D8) return "NetDll_XHttpDoWork";
  if (id == 0x000000D9) return "NetDll_XHttpSetCredentials";
  if (id == 0x000000DA) return "NetDll_XHttpQueryAuthSchemes";
  if (id == 0x000000DB) return "NetDll_XHttpCrackUrlW";
  if (id == 0x000000DC) return "NetDll_XHttpCrackUrl";
  if (id == 0x000000DD) return "NetDll_XHttpCreateUrl";
  if (id == 0x000000DE) return "NetDll_XHttpCreateUrlW";
  if (id == 0x000000DF) return "NetDll_XHttpResetPerfCounters";
  if (id == 0x000000E0) return "NetDll_XHttpGetPerfCounters";
  if (id == 0x000000FB) return "NetDll_UpnpStartup";
  if (id == 0x000000FC) return "NetDll_UpnpCleanup";
  if (id == 0x000000FD) return "NetDll_UpnpSearchCreate";
  if (id == 0x000000FE) return "NetDll_UpnpSearchGetDevices";
  if (id == 0x000000FF) return "NetDll_UpnpDescribeCreate";
  if (id == 0x00000100) return "NetDll_UpnpDescribeGetResults";
  if (id == 0x00000101) return "NetDll_UpnpActionCalculateWorkBufferSize";
  if (id == 0x00000102) return "NetDll_UpnpActionCreate";
  if (id == 0x00000103) return "NetDll_UpnpActionGetResults";
  if (id == 0x00000104) return "NetDll_UpnpEventCreate";
  if (id == 0x00000105) return "NetDll_UpnpEventGetCurrentState";
  if (id == 0x00000106) return "NetDll_UpnpEventUnsubscribe";
  if (id == 0x00000107) return "NetDll_UpnpDoWork";
  if (id == 0x00000108) return "NetDll_UpnpCloseHandle";
  if (id == 0x0000012D) return "XNetLogonGetLoggedOnUsers";
  if (id == 0x0000012E) return "XNetLogonGetNatType";
  if (id == 0x0000012F) return "XNetLogonTaskStart";
  if (id == 0x00000130) return "XNetLogonTaskClose";
  if (id == 0x00000131) return "XNetLogonTaskContinue";
  if (id == 0x00000132) return "XNetLogonGetServiceInfo";
  if (id == 0x00000133) return "XNetLogonGetUserPrivileges";
  if (id == 0x00000134) return "XNetLogonSetConsoleCertificate";
  if (id == 0x00000135) return "XNetLogonGetMachineID";
  if (id == 0x00000136) return "XNetLogonGetTitleID";
  if (id == 0x00000137) return "XNetLogonGetTitleVersion";
  if (id == 0x00000138) return "XNetLogonGetServiceNetworkID";
  if (id == 0x00000139) return "XNetLogonGetDnsString";
  if (id == 0x0000013A) return "XNetLogonSetTitleID";
  if (id == 0x0000013B) return "XNetLogonGetExtendedStatus";
  if (id == 0x0000013C) return "XNetLogonClearTicketCaches";
  if (id == 0x0000013D) return "XNetLogonInitOverrideInfo";
  if (id == 0x0000013E) return "XNetLogonGetLastUPnPStatus";
  if (id == 0x0000013F) return "XNetLogonGetFlowToken";
  if (id == 0x00000140) return "XNetLogonGetTicketOpt";
  if (id == 0x00000141) return "XNetLogonSetTicketOpt";
  if (id == 0x00000142) return "XNetLogonGetState";
  if (id == 0x00000190) return "XamInputGetCapabilities";
  if (id == 0x00000191) return "XamInputGetState";
  if (id == 0x00000192) return "XamInputSetState";
  if (id == 0x00000193) return "XamInputGetKeystroke";
  if (id == 0x00000194) return "XamInputEnableAutobind";
  if (id == 0x00000195) return "XamInputRawState";
  if (id == 0x00000196) return "XamEnableSystemAppInput";
  if (id == 0x00000197) return "XamInputGetDeviceStats";
  if (id == 0x00000198) return "XamInputGetKeystrokeEx";
  if (id == 0x00000199) return "XamInputGetKeystrokeHud";
  if (id == 0x0000019A) return "XamInputSetLayoutKeyboard";
  if (id == 0x0000019B) return "XamInputToggleKeyLocks";
  if (id == 0x0000019C) return "XamInputResetLayoutKeyboard";
  if (id == 0x0000019D) return "XamInputGetKeystrokeHudEx";
  if (id == 0x0000019E) return "XamInputSetKeyboardTranslationHud";
  if (id == 0x0000019F) return "XamSetInactivityTime";
  if (id == 0x000001A0) return "XamEnableInactivityProcessing";
  if (id == 0x000001A1) return "XamResetInactivity";
  if (id == 0x000001A2) return "XamSetInactivityTimeFromConfig";
  if (id == 0x000001A3) return "XamLoaderGetMediaInfo";
  if (id == 0x000001A4) return "XamLoaderLaunchTitle";
  if (id == 0x000001A5) return "XamLoaderLaunchTitleEx";
  if (id == 0x000001A6) return "XamLoaderSetLaunchData";
  if (id == 0x000001A7) return "XamLoaderGetLaunchDataSize";
  if (id == 0x000001A8) return "XamLoaderGetLaunchData";
  if (id == 0x000001A9) return "XamLoaderTerminateTitle";
  if (id == 0x000001AA) return "XamLoaderGetDvdTrayState";
  if (id == 0x000001AB) return "XamLoaderGetGameInfo";
  if (id == 0x000001AC) return "XamLoaderLaunchTitleOnDvd";
  if (id == 0x000001AD) return "XamLoaderSetSpindleSpeed";
  if (id == 0x000001AE) return "XamTaskCreateQueue";
  if (id == 0x000001AF) return "XamTaskSchedule";
  if (id == 0x000001B0) return "XamTaskReschedule";
  if (id == 0x000001B1) return "XamTaskCloseHandle";
  if (id == 0x000001B2) return "XamTaskCancel";
  if (id == 0x000001B3) return "XamTaskShouldExit";
  if (id == 0x000001B4) return "XamTaskWaitOnCompletion";
  if (id == 0x000001B5) return "XamTaskModify";
  if (id == 0x000001B6) return "XamTaskGetCurrentTask";
  if (id == 0x000001B7) return "XamTaskGetAttributes";
  if (id == 0x000001B8) return "XamExecutingOnBehalfOfTitle";
  if (id == 0x000001B9) return "XamInputSendStayAliveRequest";
  if (id == 0x000001BA) return "XamInputGetUserVibrationLevel";
  if (id == 0x000001BB) return "XamIsSystemTitleId";
  if (id == 0x000001BC) return "XamLoaderIsTitleTerminatePending";
  if (id == 0x000001BD) return "XamInputSetTextMessengerIndicator";
  if (id == 0x000001BE) return "XamLoaderGetPriorTitleId";
  if (id == 0x000001BF) return "XamIsXbox1TitleId";
  if (id == 0x000001C0) return "XamInputSetKeyLocks";
  if (id == 0x000001C1) return "XamInputGetKeyLocks";
  if (id == 0x000001C2) return "XamTaskGetStatus";
  if (id == 0x000001C3) return "XamGetRootObj";
  if (id == 0x000001C4) return "XamDevAuthSetFault";
  if (id == 0x000001C5) return "XamGetDefaultSystemImage";
  if (id == 0x000001C6) return "XamGetWCNConfigFile";
  if (id == 0x000001C7) return "XamSetPowerMode";
  if (id == 0x000001C8) return "XamExecuteChallenge";
  if (id == 0x000001C9) return "XamGetDefaultImage";
  if (id == 0x000001CA) return "XamMuteSound";
  if (id == 0x000001CB) return "XamGetOnlineSchema";
  if (id == 0x000001CC) return "XamSetDashContext";
  if (id == 0x000001CD) return "XamGetDashContext";
  if (id == 0x000001CE) return "XamIsCurrentTitleDash";
  if (id == 0x000001CF) return "XamGetCurrentTitleId";
  if (id == 0x000001D0) return "XamSetCurrentTitleDash";
  if (id == 0x000001D1) return "XamAllocHeapFreeSpace";
  if (id == 0x000001D2) return "XamSetDashContextEx";
  if (id == 0x000001D3) return "XamGetDashContextEx";
  if (id == 0x000001D4) return "XamSetHudContext";
  if (id == 0x000001D5) return "XamGetHudContext";
  if (id == 0x000001D6) return "XCustomGetBannerImage";
  if (id == 0x000001D7) return "Refresh";
  if (id == 0x000001D8) return "XCustomSetAction";
  if (id == 0x000001D9) return "XCustomGetLastActionPress";
  if (id == 0x000001DA) return "XCustomSetDynamicActions";
  if (id == 0x000001DB) return "XCustomBroadcastActionEvent";
  if (id == 0x000001DC) return "XCustomGetLastActionPressEx";
  if (id == 0x000001DD) return "XCustomRegisterDynamicActions";
  if (id == 0x000001DE) return "XCustomUnregisterDynamicActions";
  if (id == 0x000001DF) return "XCustomGetCurrentGamercard";
  if (id == 0x000001E0) return "XamDbgPrint";
  if (id == 0x000001E1) return "XamDbgSetOutputLevel";
  if (id == 0x000001E2) return "XamDbgSetBreakLevel";
  if (id == 0x000001E3) return "XamLoaderGetMediaInfoEx";
  if (id == 0x000001E4) return "XamLoaderSetGameInfo";
  if (id == 0x000001E5) return "XamFormatMessage";
  if (id == 0x000001E6) return "XamUniSortCmpString";
  if (id == 0x000001E7) return "XamFormatTimeString";
  if (id == 0x000001E8) return "XamFormatDateString";
  if (id == 0x000001E9) return "XamGetLocaleDateFormat";
  if (id == 0x000001EA) return "XamAlloc";
  if (id == 0x000001EB) return "XamAllocEx";
  if (id == 0x000001EC) return "XamFree";
  if (id == 0x000001ED) return "XamAllocSize";
  if (id == 0x000001EE) return "XamAllocMountIPTVHeap";
  if (id == 0x000001EF) return "XamAllocUnmountIPTVHeap";
  if (id == 0x000001F0) return "XamAllocFreeIPTVHeap";
  if (id == 0x000001F1) return "XamDeviceRemap";
  if (id == 0x000001F2) return "XamLoaderGetClearCache";
  if (id == 0x000001F3) return "XamLoaderSetClearCache";
  if (id == 0x000001F4) return "XMsgInProcessCall";
  if (id == 0x000001F5) return "XMsgCompleteIORequest";
  if (id == 0x000001F6) return "XMsgSystemProcessCall";
  if (id == 0x000001F7) return "XMsgStartIORequest";
  if (id == 0x000001F8) return "XMsgCancelIORequest";
  if (id == 0x000001F9) return "XMsgAcquireAsyncMessageFromOverlapped";
  if (id == 0x000001FA) return "XMsgReleaseAsyncMessageToOverlapped";
  if (id == 0x000001FB) return "XamGetOverlappedResult";
  if (id == 0x000001FC) return "XMsgStartIORequestEx";
  if (id == 0x000001FD) return "XamAppAllocateInterappWorkspace";
  if (id == 0x000001FE) return "XamAppGetInterappWorkspace";
  if (id == 0x000001FF) return "XamAppFreeInterappWorkspace";
  if (id == 0x00000200) return "XamFeatureEnabled";
  if (id == 0x00000201) return "XamFeatureEnforceImageBudget";
  if (id == 0x00000202) return "XamFeatureSetMask";
  if (id == 0x00000203) return "XamFeatureEnableDisable";
  if (id == 0x00000204) return "XuiControlSetItemAssociation";
  if (id == 0x00000205) return "XamGetTitleGlobalStorageValue";
  if (id == 0x00000206) return "XamSetTitleGlobalStorageValue";
  if (id == 0x00000207) return "XamUserValidateAvatarManifest";
  if (id == 0x00000208) return "XamUserGetDeviceContext";
  if (id == 0x00000209) return "XamUserLookupDevice";
  if (id == 0x0000020A) return "XamUserGetXUID";
  if (id == 0x0000020B) return "XamUserLogon";
  if (id == 0x0000020C) return "XamUserGetGamerTag";
  if (id == 0x0000020D) return "XamUserGetUserIndexMask";
  if (id == 0x0000020E) return "XamUserGetName";
  if (id == 0x0000020F) return "XamLookupCommonStringByIndex";
  if (id == 0x00000210) return "XamUserGetSigninState";
  if (id == 0x00000211) return "XamUserGetIndexFromXUID";
  if (id == 0x00000212) return "XamUserCheckPrivilege";
  if (id == 0x00000213) return "XamUserAreUsersFriends";
  if (id == 0x00000214) return "XamSetUserPresetPresenceState";
  if (id == 0x00000215) return "XamGetUserPresetPresenceState";
  if (id == 0x00000216) return "XamUserGetUserFlagsFromXUID";
  if (id == 0x00000217) return "XamUserGetMembershipTierFromXUID";
  if (id == 0x00000218) return "XamUserGetOnlineCountryFromXUID";
  if (id == 0x00000219) return "XamUserReadProfileSettings";
  if (id == 0x0000021A) return "XamUserWriteProfileSettings";
  if (id == 0x0000021B) return "XamUserGetMembershipTier";
  if (id == 0x0000021C) return "XamUserGetUserFlags";
  if (id == 0x0000021D) return "XamUserGetRequestedUserIndexMask";
  if (id == 0x0000021E) return "XamUserIsGuest";
  if (id == 0x0000021F) return "XamUserProfileSync";
  if (id == 0x00000220) return "XamUserFlushLogonQueue";
  if (id == 0x00000221) return "XamUserIsOnlineEnabled";
  if (id == 0x00000222) return "XamUserGetCachedUserFlags";
  if (id == 0x00000223) return "XamAreMixedAccountsSignedIn";
  if (id == 0x00000224) return "XamUserLogonEx";
  if (id == 0x00000225) return "XamSetUserShowMessengerFriends";
  if (id == 0x00000226) return "XamGetUserShowMessengerFriends";
  if (id == 0x00000227) return "XamUserGetSigninInfo";
  if (id == 0x00000228) return "XamUserIsPartial";
  if (id == 0x00000229) return "XamUserGetOnlineLanguageFromXUID";
  if (id == 0x0000022A) return "XamUserReadProfileSettingsEx";
  if (id == 0x0000022B) return "XamSystemUpdaterLogon";
  if (id == 0x0000022C) return "XamUserGetUsersMissingAvatars";
  if (id == 0x0000022D) return "XamIsChildAccountSignedIn";
  if (id == 0x0000022E) return "XamUserPrefetchProfileSettings";
  if (id == 0x0000022F) return "XamUserInvalidateProfileSetting";
  if (id == 0x00000230) return "XamProfileCreate";
  if (id == 0x00000231) return "XamProfileCreateEnumerator";
  if (id == 0x00000232) return "XamProfileEnumerate";
  if (id == 0x00000233) return "XamProfileDelete";
  if (id == 0x00000234) return "XamProfileGetCreationStatus";
  if (id == 0x00000235) return "XamProfileFindAccount";
  if (id == 0x00000236) return "XamProfileRenameAccount";
  if (id == 0x00000237) return "XamProfileOpen";
  if (id == 0x00000238) return "XamProfileClose";
  if (id == 0x00000239) return "XamProfileSaveAccountInfo";
  if (id == 0x0000023A) return "XamProfileLoadAccountInfo";
  if (id == 0x0000023B) return "XamProfileRecoverTitle";
  if (id == 0x0000023C) return "XamProfileSaveWindowsLiveCredentials";
  if (id == 0x0000023D) return "XamProfileLoadWindowsLiveCredentials";
  if (id == 0x0000023E) return "XamProfileIsSaveWindowsLiveCredsEnabled";
  if (id == 0x0000023F) return "XamProfileSetSaveWindowsLiveCredsEnabled";
  if (id == 0x00000240) return "XamSetProfileReadTestHook";
  if (id == 0x00000241) return "XamProfileGetLastSync";
  if (id == 0x00000242) return "XamAccountRecoveryRecoverTitle";
  if (id == 0x00000243) return "XamProfileControlPec";
  if (id == 0x00000244) return "XamAppLoad";
  if (id == 0x00000245) return "XamAppUnloadSelf";
  if (id == 0x00000246) return "XamAppUnloadStack";
  if (id == 0x00000247) return "XamSendMessageToLoadedApps";
  if (id == 0x00000248) return "XamAppRequestLoad";
  if (id == 0x00000249) return "XamAppUnrequestLoad";
  if (id == 0x0000024A) return "XamNavigate";
  if (id == 0x0000024B) return "XamRegisterSysApp";
  if (id == 0x0000024C) return "XamUnregisterSysApp";
  if (id == 0x0000024D) return "XamAppReinitialize";
  if (id == 0x0000024E) return "XamCreateEnumeratorHandle";
  if (id == 0x0000024F) return "XamGetPrivateEnumStructureFromHandle";
  if (id == 0x00000250) return "XamEnumerate";
  if (id == 0x00000251) return "XamLoadSysApp";
  if (id == 0x00000252) return "XamUnloadSysApp";
  if (id == 0x00000253) return "XamReloadSysApp";
  if (id == 0x00000254) return "XamAppLoadPass2SysApps";
  if (id == 0x00000255) return "XamProfileGetLiveLegalLocale";
  if (id == 0x00000256) return "XamUserIsParentalControlled";
  if (id == 0x00000257) return "XamContentLaunchImageFromFileInternal";
  if (id == 0x00000258) return "XamContentCreate";
  if (id == 0x00000259) return "XamContentCreateEx";
  if (id == 0x0000025A) return "XamContentClose";
  if (id == 0x0000025B) return "XamContentDelete";
  if (id == 0x0000025C) return "XamContentCreateEnumerator";
  if (id == 0x0000025D) return "XamContentCreateDeviceEnumerator";
  if (id == 0x0000025E) return "XamContentGetDeviceData";
  if (id == 0x0000025F) return "XamContentGetDeviceName";
  if (id == 0x00000260) return "XamContentSetThumbnail";
  if (id == 0x00000261) return "XamContentGetThumbnail";
  if (id == 0x00000262) return "XamContentGetCreator";
  if (id == 0x00000263) return "XamContentLaunchImage";
  if (id == 0x00000264) return "XamContentGetAttributes";
  if (id == 0x00000265) return "XamContentGetDeviceState";
  if (id == 0x00000266) return "XamContentGetLicenseMask";
  if (id == 0x00000267) return "XamContentFlush";
  if (id == 0x00000268) return "XamContentResolve";
  if (id == 0x00000269) return "XamContentOpenFile";
  if (id == 0x0000026A) return "XamContentInstall";
  if (id == 0x0000026B) return "XamContentLockUnlockPackageHeaders";
  if (id == 0x0000026C) return "XamContentCopyInternal";
  if (id == 0x0000026D) return "XamContentMoveInternal";
  if (id == 0x0000026E) return "XamContentGetMetaDataInternal";
  if (id == 0x0000026F) return "XamContentCreateEnumeratorInternal";
  if (id == 0x00000270) return "XamContentDeleteInternal";
  if (id == 0x00000271) return "XamContentCreateInternal";
  if (id == 0x00000272) return "XamContentSetThumbnailInternal";
  if (id == 0x00000273) return "XamContentLaunchImageInternal";
  if (id == 0x00000274) return "XamContentWritePackageHeader";
  if (id == 0x00000275) return "XamContentDismountAndClosePackage";
  if (id == 0x00000276) return "XamContentResolveInternal";
  if (id == 0x00000277) return "XamContentGetAttributesInternal";
  if (id == 0x00000278) return "XamContentOpenFileInternal";
  if (id == 0x00000279) return "XamContentAggregateCreateEnumerator";
  if (id == 0x0000027A) return "XamContentCreateAndMountPackage";
  if (id == 0x0000027B) return "XamContentOpenPackageFile";
  if (id == 0x0000027C) return "XamContentMountPackage";
  if (id == 0x0000027D) return "XamContentFlushPackage";
  if (id == 0x0000027E) return "XamContentClosePackageFile";
  if (id == 0x0000027F) return "XamContentDuplicateFileHandle";
  if (id == 0x00000280) return "XamGetExecutionId";
  if (id == 0x00000281) return "XamGetGameRatings";
  if (id == 0x00000282) return "XamGetSystemVersion";
  if (id == 0x00000283) return "XamContentGetLocalizedString";
  if (id == 0x00000284) return "XamContentGetDefaultDevice";
  if (id == 0x00000285) return "XamContentInstallInternal";
  if (id == 0x00000286) return "XamContentSetMediaMetaDataInternal";
  if (id == 0x00000287) return "XamContentGetDeviceSerialNumber";
  if (id == 0x00000288) return "XamContentGetMountedPackageByRootName";
  if (id == 0x00000289) return "XamContentRegisterChangeCallback";
  if (id == 0x0000028A) return "XamNotifyCreateListener";
  if (id == 0x0000028B) return "XNotifyGetNext";
  if (id == 0x0000028C) return "XNotifyPositionUI";
  if (id == 0x0000028D) return "XNotifyDelayUI";
  if (id == 0x0000028E) return "XNotifyBroadcast";
  if (id == 0x0000028F) return "XNotifyRegisterArea";
  if (id == 0x00000290) return "XNotifyQueueUI";
  if (id == 0x00000291) return "XamNotifyCreateListenerInternal";
  if (id == 0x00000292) return "XNotifyUISetOptions";
  if (id == 0x00000293) return "XNotifyUIGetOptions";
  if (id == 0x00000294) return "XamContentLaunchImageInternalEx";
  if (id == 0x00000295) return "XamShutdown";
  if (id == 0x00000296) return "XamAllocDevkitHeapAvailable";
  if (id == 0x00000297) return "XamNotifyCreateListenerRangeInternal";
  if (id == 0x00000298) return "XNotifyQueueUIEx";
  if (id == 0x00000299) return "XamAppRequestLoadEx";
  if (id == 0x0000029A) return "XuiPNGTextureLoader";
  if (id == 0x0000029B) return "XuiRenderGetXuiDevice";
  if (id == 0x0000029C) return "XuiDefault_False";
  if (id == 0x0000029D) return "XamUserGetReportingInfo";
  if (id == 0x0000029E) return "XamUpdateStart";
  if (id == 0x0000029F) return "XamUpdateGetProgress";
  if (id == 0x000002A0) return "XamUpdateGetExtenderInstance";
  if (id == 0x000002A1) return "XamUpdateFinish";
  if (id == 0x000002A2) return "XamUpdateAttachExtenderInstance";
  if (id == 0x000002A3) return "XamUpdateAllocateExtenderBuffer";
  if (id == 0x000002A4) return "XamRestartTitleLoadAfterUpdate";
  if (id == 0x000002A5) return "XamUIThreadDisableFontPatching";
  if (id == 0x000002A6) return "XamUpdateGetBaseSystemVersion";
  if (id == 0x000002A7) return "XamUpdateGetCurrentSystemVersion";
  if (id == 0x000002A8) return "XamUIThreadEnableFontPatching";
  if (id == 0x000002A9) return "XamTerminateTitleForUpdate";
  if (id == 0x000002AA) return "XamSystemUpdateInstallLocal";
  if (id == 0x000002AB) return "XamUpdateChainPass3FromPass2";
  if (id == 0x000002AD) return "XamInputGetCapabilitiesEx";
  if (id == 0x000002AE) return "XamUserIsUnsafeProgrammingAllowed";
  if (id == 0x000002AF) return "XamDevAuthSetFaultEx";
  if (id == 0x000002B0) return "XamUpdateGetData";
  if (id == 0x000002B1) return "XamCacheIntegrityCheck";
  if (id == 0x000002B2) return "XamCacheStoreFile";
  if (id == 0x000002B3) return "XamCacheFetchFile";
  if (id == 0x000002B4) return "XamCacheOpenFile";
  if (id == 0x000002B5) return "XamCacheCloseFile";
  if (id == 0x000002B6) return "XamGetCachedTitleName";
  if (id == 0x000002B7) return "XamCacheReset";
  if (id == 0x000002B8) return "XamGetCachedGamerTag";
  if (id == 0x000002B9) return "XamGetCachedGamerTagW";
  if (id == 0x000002BA) return "XamCacheDeleteFile";
  if (id == 0x000002BB) return "XamCacheRenameFile";
  if (id == 0x000002BC) return "XamShowSigninUI";
  if (id == 0x000002BD) return "XamShowSigninUIEx";
  if (id == 0x000002BE) return "XamShowSigninUIp";
  if (id == 0x000002BF) return "XamShowFriendsUI";
  if (id == 0x000002C0) return "XamShowMessagesUI";
  if (id == 0x000002C1) return "XamShowKeyboardUI";
  if (id == 0x000002C2) return "XamShowQuickChatUI";
  if (id == 0x000002C3) return "XamShowVoiceMailUI";
  if (id == 0x000002C4) return "XamShowGamerCardUI";
  if (id == 0x000002C5) return "XamShowAchievementsUI";
  if (id == 0x000002C6) return "XamShowPlayerReviewUI";
  if (id == 0x000002C7) return "XamShowMarketplaceUI";
  if (id == 0x000002C8) return "XamShowPlayersUI";
  if (id == 0x000002C9) return "XamShowUpdaterUI";
  if (id == 0x000002CA) return "XamShowMessageBoxUI";
  if (id == 0x000002CB) return "XamShowDeviceSelectorUI";
  if (id == 0x000002CC) return "XamShowMessageComposeUI";
  if (id == 0x000002CD) return "XamShowGameInviteUI";
  if (id == 0x000002CE) return "XamShowFriendRequestUI";
  if (id == 0x000002CF) return "XamShowCreateProfileUI";
  if (id == 0x000002D0) return "XamShowGamesUI";
  if (id == 0x000002D1) return "XamShowLiveSignupUI";
  if (id == 0x000002D2) return "XamShowFriendsUIp";
  if (id == 0x000002D3) return "XamShowComplaintUI";
  if (id == 0x000002D4) return "XamShowReputationUI";
  if (id == 0x000002D5) return "XamShowGamerCardUIForXUID";
  if (id == 0x000002D6) return "XamShowForcedNameChangeUI";
  if (id == 0x000002D7) return "XamShowLiveUpsellUI";
  if (id == 0x000002D8) return "XamShowPasscodeVerifyUI";
  if (id == 0x000002D9) return "XamShowDirtyDiscErrorUI";
  if (id == 0x000002DA) return "XamShowSignupCreditCardUI";
  if (id == 0x000002DB) return "XamShowPrivateChatInviteUI";
  if (id == 0x000002DC) return "XamShowMessageBoxUIEx";
  if (id == 0x000002DD) return "XamShowRecentMessageUI";
  if (id == 0x000002DE) return "XamShowRecentMessageUIEx";
  if (id == 0x000002DF) return "XamShowMessagesUIEx";
  if (id == 0x000002E0) return "XamShowAchievementDetailsUI";
  if (id == 0x000002E1) return "XamShowPersonalizationUI";
  if (id == 0x000002E2) return "XamShowChangeGamerTileUI";
  if (id == 0x000002E3) return "XamShowVoiceSettingsUI";
  if (id == 0x000002E4) return "XamShowVideoChatInviteUI";
  if (id == 0x000002E5) return "XamShowCustomMessageComposeUI";
  if (id == 0x000002E6) return "XamShowCustomPlayerListUI";
  if (id == 0x000002E7) return "XamShowMarketplaceDownloadItemsUI";
  if (id == 0x000002E8) return "XamShowMarketplaceUIEx";
  if (id == 0x000002E9) return "XamShowMessageBox";
  if (id == 0x000002EA) return "XamIsSysUiInvokedByXenonButton";
  if (id == 0x000002EB) return "XamIsSysUiInvokedByTitle";
  if (id == 0x000002EC) return "XamIsUIActive";
  if (id == 0x000002ED) return "XamSysUiDisableAutoClose";
  if (id == 0x000002EE) return "XamUserCreateAchievementEnumerator";
  if (id == 0x000002EF) return "XamReadTile";
  if (id == 0x000002F0) return "XamWriteGamerTile";
  if (id == 0x000002F1) return "XamWriteTile";
  if (id == 0x000002F2) return "XamReadImage";
  if (id == 0x000002F3) return "XamUserCreateTitlesPlayedEnumerator";
  if (id == 0x000002F4) return "XamDecompressPNGToTexture";
  if (id == 0x000002F5) return "XamReadTileToTexture";
  if (id == 0x000002F6) return "XamReadString";
  if (id == 0x000002F7) return "XamUserCreateStatsEnumerator";
  if (id == 0x000002F8) return "XamPrepareGamerTiles";
  if (id == 0x000002F9) return "XamClearTitle";
  if (id == 0x000002FA) return "XamReadStrings";
  if (id == 0x000002FB) return "XamWriteGamerTileEx";
  if (id == 0x000002FC) return "XamReadTileEx";
  if (id == 0x000002FD) return "XamReadTileToTextureEx";
  if (id == 0x000002FE) return "XamShowMessengerUI";
  if (id == 0x000002FF) return "XamShowKeyboardUIMessenger";
  if (id == 0x00000300) return "XamShowLiveUpsellUIEx";
  if (id == 0x00000301) return "XamShowJoinSessionInProgressUI";
  if (id == 0x00000302) return "XamShowGraduateUserUI";
  if (id == 0x00000303) return "XamShowGamerCardUIForXUIDp";
  if (id == 0x00000304) return "XamShowGuideUI";
  if (id == 0x00000305) return "XamShowPartyUI";
  if (id == 0x00000306) return "XamShowPartyInviteUI";
  if (id == 0x00000307) return "XamUserAddRecentPlayer";
  if (id == 0x00000308) return "XamUserUpdateRecentPlayer";
  if (id == 0x00000309) return "XamUserCreatePlayerEnumerator";
  if (id == 0x0000030A) return "XamParseGamerTileKey";
  if (id == 0x0000030B) return "XamShowCommunitySessionsUI";
  if (id == 0x0000030C) return "XamVoiceCreate";
  if (id == 0x0000030D) return "XamVoiceHeadsetPresent";
  if (id == 0x0000030E) return "XamVoiceSubmitPacket";
  if (id == 0x0000030F) return "XamVoiceClose";
  if (id == 0x00000310) return "XamVoiceGetBatteryStatus";
  if (id == 0x00000311) return "Refresh_0";
  if (id == 0x00000312) return "Refresh_1";
  if (id == 0x00000313) return "XamShowJoinSessionByIdInProgressUI";
  if (id == 0x00000314) return "XamShowPartyJoinInProgressUI";
  if (id == 0x00000315) return "XamBuildSharedSystemResourceLocator";
  if (id == 0x00000316) return "XamSessionCreateHandle";
  if (id == 0x00000317) return "XamSessionRefObjByHandle";
  if (id == 0x00000318) return "XamVoiceGetMicArrayStatus";
  if (id == 0x00000319) return "XamVoiceSetAudioCaptureRoutine";
  if (id == 0x0000031A) return "XamVoiceGetDirectionalData";
  if (id == 0x0000031B) return "XamBuildResourceLocator";
  if (id == 0x0000031C) return "XamBuildLegacySystemResourceLocator";
  if (id == 0x0000031D) return "XamBuildGamercardResourceLocator";
  if (id == 0x0000031E) return "XamBuildDynamicResourceLocator";
  if (id == 0x0000031F) return "XamBuildXamResourceLocator";
  if (id == 0x00000320) return "XuiAnimRun";
  if (id == 0x00000321) return "XuiApplyLocale";
  if (id == 0x00000322) return "XuiBubbleMessage";
  if (id == 0x00000323) return "XuiControlIsBackButton";
  if (id == 0x00000324) return "XuiControlIsNavButton";
  if (id == 0x00000325) return "XuiCreateObject";
  if (id == 0x00000326) return "XuiDestroyObject";
  if (id == 0x00000327) return "XuiDynamicCast";
  if (id == 0x00000328) return "XuiElementAddChild";
  if (id == 0x00000329) return "XuiElementFindNamedFrame";
  if (id == 0x0000032A) return "XuiElementGetChildById";
  if (id == 0x0000032B) return "XuiElementGetFirstChild";
  if (id == 0x0000032C) return "XuiElementGetFocus";
  if (id == 0x0000032D) return "XuiElementGetFocusUser";
  if (id == 0x0000032E) return "XuiElementGetId";
  if (id == 0x0000032F) return "XuiElementGetLastChild";
  if (id == 0x00000330) return "XuiElementGetNext";
  if (id == 0x00000331) return "XuiElementGetParent";
  if (id == 0x00000332) return "XuiElementGetUserFocus";
  if (id == 0x00000333) return "XuiElementInitFocus";
  if (id == 0x00000334) return "XuiElementInitUserFocus";
  if (id == 0x00000335) return "XuiElementPlayTimeline";
  if (id == 0x00000336) return "XuiElementSetBounds";
  if (id == 0x00000337) return "XuiElementSetFocus";
  if (id == 0x00000338) return "XuiElementSetUserFocus";
  if (id == 0x00000339) return "XuiElementTreeGetFocus";
  if (id == 0x0000033A) return "XuiFindClass";
  if (id == 0x0000033B) return "XuiFreeStringTable";
  if (id == 0x0000033C) return "XuiGetBaseObject";
  if (id == 0x0000033D) return "XuiGetClass";
  if (id == 0x0000033E) return "XuiGetObjectClass";
  if (id == 0x0000033F) return "XuiGetOuter";
  if (id == 0x00000340) return "XuiInit";
  if (id == 0x00000341) return "XuiLoadFromBinary";
  if (id == 0x00000342) return "XuiLoadStringTableFromFile";
  if (id == 0x00000343) return "XuiVisualGetBasePath";
  if (id == 0x00000344) return "XuiLookupStringTable";
  if (id == 0x00000345) return "XuiNavButtonGetPressPath";
  if (id == 0x00000346) return "XuiObjectFromHandle";
  if (id == 0x00000347) return "XuiObjectGetProperty";
  if (id == 0x00000348) return "XuiObjectGetPropertyId";
  if (id == 0x00000349) return "XuiProcessInput";
  if (id == 0x0000034A) return "XuiRegisterClass";
  if (id == 0x0000034B) return "XuiRenderBegin";
  if (id == 0x0000034C) return "XuiRenderCreateDC";
  if (id == 0x0000034D) return "XuiRenderDCDeviceChanged";
  if (id == 0x0000034E) return "XuiRenderDestroyDC";
  if (id == 0x0000034F) return "XuiRenderEnd";
  if (id == 0x00000350) return "XuiRenderGetBackBufferSize";
  if (id == 0x00000351) return "XuiRenderInit";
  if (id == 0x00000352) return "XuiRenderInitShared";
  if (id == 0x00000353) return "XuiRenderPresent";
  if (id == 0x00000354) return "XuiRenderSetViewTransform";
  if (id == 0x00000355) return "XuiRenderUninit";
  if (id == 0x00000356) return "XamShowNuiGuideUI";
  if (id == 0x00000357) return "XuiSceneCreate";
  if (id == 0x00000358) return "XuiSceneNavigateBack";
  if (id == 0x00000359) return "XuiSceneNavigateFirst";
  if (id == 0x0000035A) return "XuiSceneNavigateForward";
  if (id == 0x0000035B) return "XuiScenePlayBackFromTransition";
  if (id == 0x0000035C) return "XuiScenePlayBackToTransition";
  if (id == 0x0000035D) return "XuiScenePlayFromTransition";
  if (id == 0x0000035E) return "XuiScenePlayToTransition";
  if (id == 0x0000035F) return "XuiSendMessage";
  if (id == 0x00000360) return "XuiSetLocale";
  if (id == 0x00000361) return "XuiUninit";
  if (id == 0x00000362) return "XuiUnregisterClass";
  if (id == 0x00000363) return "XuiTextElementSetText";
  if (id == 0x00000364) return "XuiSetTimer";
  if (id == 0x00000365) return "XuiTimersRun";
  if (id == 0x00000366) return "XuiTextElementGetText";
  if (id == 0x00000367) return "XuiVisualSetBasePath";
  if (id == 0x00000368) return "XuiHandleIsValid";
  if (id == 0x00000369) return "XuiAlloc";
  if (id == 0x0000036A) return "XuiFree";
  if (id == 0x0000036B) return "XuiDefault_True";
  if (id == 0x0000036C) return "XuiDefault_EmptyString";
  if (id == 0x0000036D) return "XuiDefault_IntegerZero";
  if (id == 0x0000036E) return "XuiCopyString";
  if (id == 0x0000036F) return "XuiRealloc";
  if (id == 0x00000370) return "XuiControlPlayOptionalVisual";
  if (id == 0x00000371) return "XuiKillTimer";
  if (id == 0x00000372) return "XuiElementEnableInput";
  if (id == 0x00000373) return "XuiElementInputEnabled";
  if (id == 0x00000374) return "XuiIsInstanceOf";
  if (id == 0x00000375) return "XuiResourceComposeLocator";
  if (id == 0x00000376) return "XuiResourceLocatorIsAbsolute";
  if (id == 0x00000377) return "XuiBroadcastMessage";
  if (id == 0x00000378) return "XuiElementDisallowRecursiveTimelineControl";
  if (id == 0x00000379) return "XUIElementPropVal_Construct";
  if (id == 0x0000037A) return "XUIElementPropVal_Destruct";
  if (id == 0x0000037B) return "XUIElementPropVal_SetString";
  if (id == 0x0000037C) return "XuiObjectSetProperty";
  if (id == 0x0000037D) return "XuiElementGetOpacity";
  if (id == 0x0000037E) return "XuiElementSetOpacity";
  if (id == 0x0000037F) return "XuiEditSetTextLimit";
  if (id == 0x00000380) return "XuiEditGetTextLimit";
  if (id == 0x00000381) return "XuiSliderSetValue";
  if (id == 0x00000382) return "XuiSliderGetValue";
  if (id == 0x00000383) return "XuiSliderSetRange";
  if (id == 0x00000384) return "XuiElementUnlink";
  if (id == 0x00000385) return "XuiElementInsertChild";
  if (id == 0x00000386) return "XuiSceneNavigateBackToFirst";
  if (id == 0x00000387) return "XuiProgressBarSetRange";
  if (id == 0x00000388) return "XuiProgressBarSetValue";
  if (id == 0x00000389) return "XuiProgressBarGetValue";
  if (id == 0x0000038A) return "XuiControlAttachVisual";
  if (id == 0x0000038B) return "XuiCreateTextureBrush";
  if (id == 0x0000038C) return "XuiDestroyBrush";
  if (id == 0x0000038D) return "XUIElementPropVal_SetColorFromUint";
  if (id == 0x0000038E) return "XuiFigureSetFill";
  if (id == 0x0000038F) return "XuiSliderGetRange";
  if (id == 0x00000390) return "XuiFigureSetTexture";
  if (id == 0x00000391) return "XuiControlGetItemAssociation";
  if (id == 0x00000392) return "XuiResourceLoadAll";
  if (id == 0x00000393) return "XuiImageElementSetImagePath";
  if (id == 0x00000394) return "XuiImageElementGetImagePath";
  if (id == 0x00000395) return "XuiControlGetVisual";
  if (id == 0x00000396) return "XuiControlGetNavigation";
  if (id == 0x00000397) return "XuiLookupStringTableByIndex";
  if (id == 0x00000398) return "XUIElementPropVal_SetBool";
  if (id == 0x00000399) return "XuiElementHasFocus";
  if (id == 0x0000039A) return "XUIElementPropVal_SetUint";
  if (id == 0x0000039B) return "XUIElementPropVal_Clear";
  if (id == 0x0000039C) return "XuiEditSetTextFormatInfo";
  if (id == 0x0000039D) return "XuiCreateSolidBrush";
  if (id == 0x0000039E) return "XuiSceneInterruptTransitions";
  if (id == 0x0000039F) return "XuiResourceOpen";
  if (id == 0x000003A0) return "XuiResourceRead";
  if (id == 0x000003A1) return "XuiResourceClose";
  if (id == 0x000003A2) return "XuiVisualCreateInstance";
  if (id == 0x000003A3) return "XuiElementGetTimeline";
  if (id == 0x000003A4) return "GetCodecVersion";
  if (id == 0x000003A5) return "XuiElementIsDescendant";
  if (id == 0x000003A6) return "XuiSetMessageFilter";
  if (id == 0x000003A7) return "XuiAttachTextureBrush";
  if (id == 0x000003A8) return "XuiElementBeginRender";
  if (id == 0x000003A9) return "XuiElementEndRender";
  if (id == 0x000003AA) return "XuiDrawShape";
  if (id == 0x000003AB) return "XuiSelectBrushEx";
  if (id == 0x000003AC) return "XuiFigureGetShape";
  if (id == 0x000003AD) return "XuiFillRect";
  if (id == 0x000003AE) return "XuiVec2TransformCoord";
  if (id == 0x000003AF) return "XuiMatrixMultiply";
  if (id == 0x000003B0) return "XuiElementGetXForm";
  if (id == 0x000003B1) return "XuiElementSetPosition";
  if (id == 0x000003B2) return "XuiSelectBrush";
  if (id == 0x000003B3) return "XuiElementRenderChildren";
  if (id == 0x000003B4) return "XuiFreeUnusedTextures";
  if (id == 0x000003B5) return "XuiListEnableItemOverride";
  if (id == 0x000003B6) return "XuiListGetDefaultItemSize";
  if (id == 0x000003B7) return "XuiResourceSeek";
  if (id == 0x000003B8) return "XuiElementDiscardResources";
  if (id == 0x000003B9) return "XuiTabSceneGoto";
  if (id == 0x000003BA) return "XuiTabSceneGetCurrentTab";
  if (id == 0x000003BB) return "XamShowWhatsOnUI";
  if (id == 0x000003BC) return "XamShowEditProfileUI";
  if (id == 0x000003BD) return "XamShowStorePickerUI";
  if (id == 0x000003BE) return "XamShowTermsOfUseUI";
  if (id == 0x000003BF) return "XamShowJoinPartyUI";
  if (id == 0x000003C0) return "XamShowWordRegisterUI";
  if (id == 0x000003C1) return "XamOverrideHudOpenType";
  if (id == 0x000003C2) return "XamShowAchievementsUIEx";
  if (id == 0x000003C3) return "XamUserGetUserTenure";
  if (id == 0x000003C4) return "XamUserGetSubscriptionType";
  if (id == 0x000003C5) return "XamShowGameVoiceChannelUI";
  if (id == 0x000003C6) return "XamShowAvatarAwardsUI";
  if (id == 0x000003C7) return "XamShowAvatarAwardGamesUI";
  if (id == 0x000003C8) return "XamShowVideoRichPresenceUI";
  if (id == 0x000003C9) return "XamHudGetUserIndex";
  if (id == 0x000003CA) return "XGetAudioFlags";
  if (id == 0x000003CB) return "XGetAVPack";
  if (id == 0x000003CC) return "XGetGameRegion";
  if (id == 0x000003CD) return "XGetLanguage";
  if (id == 0x000003CE) return "XapipGetLocale";
  if (id == 0x000003CF) return "XGetVideoFlags";
  if (id == 0x000003D0) return "XGetVideoStandard";
  if (id == 0x000003D1) return "XGetVideoMode";
  if (id == 0x000003D2) return "XamGetLanguage";
  if (id == 0x000003D3) return "XUITimeline_Run";
  if (id == 0x000003D4) return "XamSetAutomation";
  if (id == 0x000003D5) return "XAutomationpBindController";
  if (id == 0x000003D6) return "XAutomationpUnbindController";
  if (id == 0x000003D7) return "XAutomationpInputXenonButton";
  if (id == 0x000003D8) return "XAutomationpInputPress";
  if (id == 0x000003D9) return "XAutomationpInputSetState";
  if (id == 0x000003DA) return "XamEnableOverdraw";
  if (id == 0x000003DB) return "g_XuiAutomation";
  if (id == 0x000003DC) return "XamVoiceGetMicArrayAudio";
  if (id == 0x000003DD) return "XampSystemInput";
  if (id == 0x000003DE) return "XamInputControl";
  if (id == 0x000003DF) return "XuiElementGetPosition";
  if (id == 0x000003E0) return "XamIsMessageBoxActive";
  if (id == 0x000003E1) return "XamIsBackgroundSceneInTransition";
  if (id == 0x000003E2) return "XuiElementTreeHasFocus";
  if (id == 0x000003E3) return "XuiFigureClose";
  if (id == 0x000003E4) return "GamerCardStartup";
  if (id == 0x000003E5) return "GamerCardCleanup";
  if (id == 0x000003E6) return "GamerCardRegisterControls";
  if (id == 0x000003E7) return "GamerCardUnregisterControls";
  if (id == 0x000003E8) return "RtlFindFirstFile";
  if (id == 0x000003E9) return "RtlFindNextFile";
  if (id == 0x000003EA) return "RtlGetModuleFileName";
  if (id == 0x000003EB) return "RtlOutputDebugString";
  if (id == 0x000003EC) return "RtlRemoveDirectory";
  if (id == 0x000003ED) return "RtlSleep";
  if (id == 0x000003EE) return "RtlGetLastError";
  if (id == 0x000003EF) return "RtlSetLastError";
  if (id == 0x000003F0) return "RtlSetLastNTError";
  if (id == 0x000003F1) return "RtlDebugPrint";
  if (id == 0x000003F2) return "RtlDebugError";
  if (id == 0x000003F3) return "XDebugWarning";
  if (id == 0x000003F4) return "RtlDebugTrace";
  if (id == 0x000003F5) return "RtlDebugEntry";
  if (id == 0x000003F6) return "RtlDebugExit";
  if (id == 0x000003F7) return "RtlGetAttributesOnHeapAlloc";
  if (id == 0x000003F8) return "RtlSetAttributesOnHeapAlloc";
  if (id == 0x000003F9) return "XuiFigureSetShape";
  if (id == 0x000003FA) return "RtlCreateHeap";
  if (id == 0x000003FB) return "RtlDestroyHeap";
  if (id == 0x000003FC) return "RtlAllocateHeap";
  if (id == 0x000003FD) return "RtlAllocateHeapSlowly";
  if (id == 0x000003FE) return "RtlReAllocateHeap";
  if (id == 0x000003FF) return "RtlFreeHeap";
  if (id == 0x00000400) return "RtlFreeHeapSlowly";
  if (id == 0x00000401) return "RtlSizeHeap";
  if (id == 0x00000402) return "RtlZeroHeap";
  if (id == 0x00000403) return "RtlDebugWalkHeap";
  if (id == 0x00000404) return "RtlWalkHeap";
  if (id == 0x00000405) return "RtlLockHeap";
  if (id == 0x00000406) return "RtlUnlockHeap";
  if (id == 0x00000407) return "RtlValidateHeap";
  if (id == 0x00000408) return "RtlDebugCompactHeap";
  if (id == 0x00000409) return "RtlCompactHeap";
  if (id == 0x0000040A) return "XamAppSetTestOption";
  if (id == 0x0000040B) return "XamAppReportError";
  if (id == 0x0000040C) return "XamIsNuiUIActive";
  if (id == 0x0000040D) return "XamVerifyPasscode";
  if (id == 0x0000040E) return "OutputDebugStringA";
  if (id == 0x0000040F) return "DebugBreak";
  if (id == 0x00000410) return "GetCurrentThreadId";
  if (id == 0x00000411) return "XDebugError";
  if (id == 0x00000412) return "XDebugWarning_0";
  if (id == 0x00000413) return "RtlDebugSetLevel";
  if (id == 0x00000414) return "CloseHandle";
  if (id == 0x00000415) return "GetTickCount";
  if (id == 0x00000416) return "GetLastError";
  if (id == 0x00000417) return "SetFilePointer";
  if (id == 0x00000418) return "SetFilePointerEx";
  if (id == 0x00000419) return "SetLastError";
  if (id == 0x0000041A) return "MultiByteToWideChar";
  if (id == 0x0000041B) return "WideCharToMultiByte";
  if (id == 0x0000041C) return "ReadFile";
  if (id == 0x0000041D) return "FlushFileBuffers";
  if (id == 0x0000041E) return "WriteFile";
  if (id == 0x0000041F) return "OutputDebugStringW";
  if (id == 0x00000420) return "SetEvent";
  if (id == 0x00000421) return "XapiFormatTimeOut";
  if (id == 0x00000422) return "CreateMutexA";
  if (id == 0x00000423) return "OpenMutexA";
  if (id == 0x00000424) return "ReleaseMutex";
  if (id == 0x00000425) return "WaitForSingleObject";
  if (id == 0x00000426) return "WaitForSingleObjectEx";
  if (id == 0x00000427) return "GetFileSize";
  if (id == 0x00000428) return "GetFileSizeEx";
  if (id == 0x00000429) return "XapiDirectoryInformationToFindData";
  if (id == 0x0000042A) return "XapiFormatObjectAttributes";
  if (id == 0x0000042B) return "ResetEvent";
  if (id == 0x0000042C) return "wsprintfA";
  if (id == 0x0000042D) return "wsprintfW";
  if (id == 0x0000042E) return "GetOverlappedResult";
  if (id == 0x0000042F) return "QueryPerformanceCounter";
  if (id == 0x00000430) return "QueryPerformanceFrequency";
  if (id == 0x00000431) return "LocalAlloc";
  if (id == 0x00000432) return "LocalFree";
  if (id == 0x00000433) return "RaiseException";
  if (id == 0x00000434) return "RtlUniform";
  if (id == 0x00000435) return "RtlRandom";
  if (id == 0x00000436) return "Sleep";
  if (id == 0x00000437) return "SleepEx";
  if (id == 0x00000438) return "XMemSet";
  if (id == 0x00000439) return "XRegisterThreadNotifyRoutine";
  if (id == 0x0000043A) return "XGetOverlappedExtendedError";
  if (id == 0x0000043B) return "XGetOverlappedResult";
  if (id == 0x0000043C) return "CreateThread";
  if (id == 0x0000043D) return "ResumeThread";
  if (id == 0x0000043E) return "ExitThread";
  if (id == 0x0000043F) return "GetTimeZoneInformation";
  if (id == 0x00000440) return "GetSystemTimeAsFileTime";
  if (id == 0x00000441) return "SystemTimeToFileTime";
  if (id == 0x00000442) return "FileTimeToSystemTime";
  if (id == 0x00000443) return "GetSystemTime";
  if (id == 0x00000444) return "GetLocalTime";
  if (id == 0x00000445) return "CreateDirectoryA";
  if (id == 0x00000446) return "CreateEventA";
  if (id == 0x00000447) return "CreateFileA";
  if (id == 0x00000448) return "DeleteFileA";
  if (id == 0x00000449) return "FindFirstFileA";
  if (id == 0x0000044A) return "FindNextFileA";
  if (id == 0x0000044B) return "GetFileAttributesA";
  if (id == 0x0000044C) return "XamLoaderGetCurrentTitleD3DVersion";
  if (id == 0x0000044D) return "GetFileAttributesExA";
  if (id == 0x0000044E) return "GetModuleHandleA";
  if (id == 0x0000044F) return "GetDiskFreeSpaceExA";
  if (id == 0x00000450) return "CopyFileA";
  if (id == 0x00000451) return "SetEndOfFile";
  if (id == 0x00000452) return "XamFamilyAddParentalExemptionToList";
  if (id == 0x00000453) return "XamFamilyIsParentalValidationRequired";
  if (id == 0x00000454) return "PIXBeginCapture";
  if (id == 0x00000455) return "PIXEndCapture";
  if (id == 0x00000456) return "PIXAddCounter";
  if (id == 0x00000457) return "PIXGetGPUSlot";
  if (id == 0x00000458) return "SetWaitableTimer";
  if (id == 0x00000459) return "CancelWaitableTimer";
  if (id == 0x0000045A) return "CreateWaitableTimerA";
  if (id == 0x0000045B) return "DuplicateHandle";
  if (id == 0x0000045C) return "XapipCreateThread";
  if (id == 0x0000045D) return "lstrcpyA";
  if (id == 0x0000045E) return "lstrcpyW";
  if (id == 0x0000045F) return "lstrcpynA";
  if (id == 0x00000460) return "lstrcpynW";
  if (id == 0x00000461) return "lstrcatA";
  if (id == 0x00000462) return "lstrcatW";
  if (id == 0x00000463) return "lstrlenA";
  if (id == 0x00000464) return "lstrlenW";
  if (id == 0x00000465) return "IsBadReadPtr";
  if (id == 0x00000466) return "IsBadWritePtr";
  if (id == 0x00000467) return "FileTimeToLocalFileTime";
  if (id == 0x00000468) return "XMemCpy";
  if (id == 0x00000469) return "XMemCpyStreaming";
  if (id == 0x0000046A) return "XamHudSetUserIndex";
  if (id == 0x0000046B) return "XamShowNuiTroubleshooterUI";
  if (id == 0x0000046C) return "XamTestShowNuiTroubleshooterUI";
  if (id == 0x0000046D) return "XamShowPasscodeVerifyUIEx";
  if (id == 0x0000046E) return "XamShowNuiAchievementsUI";
  if (id == 0x0000046F) return "XamShowNuiCommunitySessionsUI";
  if (id == 0x00000470) return "XamShowNuiDeviceSelectorUI";
  if (id == 0x00000471) return "XamShowNuiDirtyDiscErrorUI";
  if (id == 0x00000472) return "XamShowNuiFriendsUI";
  if (id == 0x00000473) return "XamShowNuiGameInviteUI";
  if (id == 0x00000474) return "XamShowNuiGamerCardUIForXUID";
  if (id == 0x00000475) return "XamShowNuiMarketplaceDownloadItemsUI";
  if (id == 0x00000476) return "XamShowNuiMarketplaceUI";
  if (id == 0x00000477) return "XamShowNuiMessageBoxUI";
  if (id == 0x00000478) return "XamShowNuiPartyUI";
  if (id == 0x00000479) return "XamShowNuiFriendRequestUI";
  if (id == 0x0000047A) return "XamShowNuiSigninUI";
  if (id == 0x0000047B) return "XamShowNuiControllerRequiredUI";
  if (id == 0x0000047C) return "XamShowNuiGamesUI";
  if (id == 0x0000047D) return "XamShowNuiHardwareRequiredUI";
  if (id == 0x0000047E) return "XamCacheStoreFileByString";
  if (id == 0x0000047F) return "XamCacheFetchFileByString";
  if (id == 0x00000480) return "XamCacheDeleteFileByString";
  if (id == 0x00000481) return "XamGetCachedTitleNameEx";
  if (id == 0x00000482) return "XamXlfsInitializeUploadQueue";
  if (id == 0x00000483) return "XamXlfsUninitializeUploadQueue";
  if (id == 0x00000484) return "XamXlfsMountUploadQueueInstance";
  if (id == 0x00000485) return "XamXlfsUnmountUploadQueueInstance";
  if (id == 0x00000486) return "XamVoiceRecordUserPrivileges";
  if (id == 0x00000487) return "XamXlfsInitializeUploadQueueWithTestHooks";
  if (id == 0x00000488) return "XamXlfsNotifyContentDeletion";
  if (id == 0x00000489) return "XMemAlloc";
  if (id == 0x0000048A) return "XMemFree";
  if (id == 0x0000048B) return "XMemSize";
  if (id == 0x0000048C) return "XamVoiceSetMicArrayIdleUsers";
  if (id == 0x0000048D) return "XamVoiceMuteMicArray";
  if (id == 0x0000048E) return "XamVoiceGetMicArrayUnderrunStatus";
  if (id == 0x0000048F) return "XuiSceneEnableTransitionDependency";
  if (id == 0x00000490) return "XamVoiceGetMicArrayAudioEx";
  if (id == 0x00000491) return "XamVoiceDisableMicArray";
  if (id == 0x00000492) return "XamUserGetDeviceId";
  if (id == 0x00000493) return "XamUpdateEtxLogUpdateTaskStart";
  if (id == 0x00000494) return "XamUpdateEtxLogUpdateTaskSuccess";
  if (id == 0x00000495) return "XamUpdateEtxLogUpdateTaskFailure";
  if (id == 0x00000496) return "XamEtxFlushLogs";
  if (id == 0x00000497) return "XamVoiceIsActiveProcess";
  if (id == 0x00000498) return "XamInactivityGetInactivityInterruptTime";
  if (id == 0x00000499) return "XamInactivitySetInactivityInterruptTime";
  if (id == 0x0000049A) return "XamInactivityGetLastActivityTime";
  if (id == 0x0000049B) return "XamInactivitySetDetectionTaskPeriod";
  if (id == 0x0000049C) return "XamInactivityEnablePowerDown";
  if (id == 0x0000049D) return "XamUpdateGetChainMarker";
  if (id == 0x0000049E) return "XGetVideoCapabilities";
  if (id == 0x0000049F) return "XMsgProcessRequest";
  if (id == 0x000004A0) return "XGetDisplaySize";
  if (id == 0x000004A1) return "XamInputNonControllerGetRaw";
  if (id == 0x000004A2) return "XamInputNonControllerSetRaw";
  if (id == 0x000004A3) return "XamVoiceSetMicArrayBeamAngle";
  if (id == 0x000004A4) return "XamUserGetAge";
  if (id == 0x000004A5) return "XamUserGetAgeGroup";
  if (id == 0x000004A6) return "XamVoiceGetMicArrayFilenameDesc";
  if (id == 0x000004A7) return "XamLoaderGetState";
  if (id == 0x000004A8) return "XamTaskQueryProperty";
  if (id == 0x000004A9) return "XamGetLocale";
  if (id == 0x000004AA) return "XamQueryTimeZoneInformation";
  if (id == 0x000004AB) return "XamSetTimeZoneInformation";
  if (id == 0x000004AC) return "XamLaunchURI";
  if (id == 0x000004AF) return "XamShowNuiMessagesUI";
  if (id == 0x000004B0) return "XMPRegisterCodec";
  if (id == 0x000004B1) return "XamNavigateBack";
  if (id == 0x000004B2) return "XamPushBackURI";
  if (id == 0x000004B3) return "XamUserOverrideDeviceBindings";
  if (id == 0x000004B4) return "XamUserOverrideBindingCallbacks";
  if (id == 0x000004B5) return "XamUserOverrideUserInfo";
  if (id == 0x000004B6) return "XamUserContentRestrictionGetFlags";
  if (id == 0x000004B7) return "XamUserContentRestrictionGetRating";
  if (id == 0x000004B8) return "XamUserContentRestrictionCheckAccess";
  if (id == 0x000004B9) return "XamShowFitnessBodyProfileUI";
  if (id == 0x000004BA) return "XamFitnessAddBodyProfileRecord";
  if (id == 0x000004BB) return "XamFamilyGetMembers";
  if (id == 0x000004BC) return "XampXAuthStartup";
  if (id == 0x000004BD) return "XampXAuthShutdown";
  if (id == 0x000004BE) return "XamGetToken";
  if (id == 0x000004BF) return "XamFreeToken";
  if (id == 0x000004C0) return "XamGetAppliesTo";
  if (id == 0x000004C1) return "XamFitnessClearBodyProfileRecords";
  if (id == 0x000004C2) return "XamFitnessGetCurrentBodyProfileRecord";
  if (id == 0x000004C3) return "XamFitnessGetAllBodyProfileRecords";
  if (id == 0x000004C4) return "XamFitnessGetAllTitleSummaries";
  if (id == 0x000004C5) return "XamFitnessGetOverallSummary";
  if (id == 0x000004C6) return "XamFitnessAddFitnessEvent";
  if (id == 0x000004C7) return "XamLrcGetInput";
  if (id == 0x000004C8) return "XamLrcGetInputWithSeek";
  if (id == 0x000004C9) return "XamLrcSetMediaState";
  if (id == 0x000004CA) return "XamPixSetDirtyCounters";
  if (id == 0x000004CB) return "XamFitnessCreateFitnessEventEnumerator";
  if (id == 0x000004CC) return "XamFitnessInitialize";
  if (id == 0x000004CD) return "XamRequestToken";
  if (id == 0x000004CE) return "XamResolveURI";
  if (id == 0x000004CF) return "XamContentGetOnlineCreator";
  if (id == 0x000004D0) return "XamShowBrandedKeyboardUI";
  if (id == 0x000004D1) return "XamBackgroundDownloadNetworkStorageEnable";
  if (id == 0x000004D2) return "XamBackgroundDownloadNetworkStorageIsEnabled";
  if (id == 0x000004D3) return "XamShowNuiJoinSessionInProgressUI";
  if (id == 0x000004D4) return "XamBase64Decode";
  if (id == 0x000004D5) return "XamCertDecode";
  if (id == 0x000004D6) return "XamCertDecodeRsaPublicKey";
  if (id == 0x000004D7) return "XamCertValidateStruct";
  if (id == 0x000004D8) return "XamFitnessConvertByteMetToFloatMet";
  if (id == 0x000004D9) return "XamXgiBlobTrackerSetMockInfo";
  if (id == 0x000004DA) return "XamFitnessMsgTimeToSystemTime";
  if (id == 0x000004DB) return "XamFitnessSystemTimeToMsgTime";
  if (id == 0x000004DC) return "XamShowFitnessWarnAboutPrivacyUI";
  if (id == 0x000004DD) return "XamShowFitnessWarnAboutTimeUI";
  if (id == 0x000004DE) return "XamFitnessUnInitialize";
  if (id == 0x000004DF) return "XamBackgroundDownloadNetworkStorageOnContentChange";
  if (id == 0x000004E0) return "XamLiveBaseConfigureInMemoryMockResponse";
  if (id == 0x000004E1) return "InjectConnectionServerNotification";
  if (id == 0x000004E2) return "XamFitnessConvertFloatMetToByteMet";
  if (id == 0x000004E3) return "XamGetGamerTileKeyFromGamertag";
  if (id == 0x000004E4) return "XamBackgroundDownloadNetworkStorageRegisterChangeCallback";
  if (id == 0x000004E5) return "XamFindOrCreateInternalPassportAccount";
  if (id == 0x000004E6) return "XOnlinepFriendsRequest";
  if (id == 0x000004E7) return "XOnlinepFriendsAcceptRequest";
  if (id == 0x000004E8) return "XOnlinepFriendsRejectRequest";
  if (id == 0x000004E9) return "XOnlinepFriendsRemove";
  if (id == 0x000004EA) return "XFriendsCreateEnumerator";
  if (id == 0x000004EB) return "XamBackgroundDownloadNetworkStorageIsRunning";
  if (id == 0x000004EC) return "XamCertGetSerialNumber";
  if (id == 0x000004ED) return "XamShowOptionsUI";
  if (id == 0x000004EE) return "XampXAuthGetTitleBuffer";
  if (id == 0x000004EF) return "XamGetSTSTokenCache";
  if (id == 0x000004F0) return "XamUserGetOnlineXUIDFromOfflineXUID";
  if (id == 0x000004F1) return "XamIsUserUsingMetricSystem";
  if (id == 0x000004F2) return "XamShowNuiVideoRichPresenceUI";
  if (id == 0x000004F3) return "XamAppAllocateInterappWorkspaceEx";
  if (id == 0x000004F4) return "XampKioskSetTestMock";
  if (id == 0x000004F5) return "XamNetworkStatusGetInformation";
  if (id == 0x000004F6) return "XamNetworkStatusAddAddress";
  if (id == 0x000004F7) return "XamUserReadUserPreference";
  if (id == 0x000004F8) return "XamUserWriteUserPreference";
  if (id == 0x000004F9) return "XamShowFitnessClearUI";
  if (id == 0x000004FA) return "XamFitnessClearAll";
  if (id == 0x000004FB) return "XamFitnessGetPrivacySettings";
  if (id == 0x000004FC) return "XamWaitForNSAL";
  if (id == 0x000004FD) return "XamMarkInternalAccountTrustedOnConsole";
  if (id == 0x000004FE) return "XamBackgroundDownloadNetworkStorageGetProgress";
  if (id == 0x000004FF) return "XamCopyFile";
  if (id == 0x00000500) return "XamMoveFile";
  if (id == 0x00000501) return "XamDeleteFile";
  if (id == 0x00000502) return "XamUserOverrideGlobalState";
  if (id == 0x00000503) return "XamGetAdaptersCollection";
  if (id == 0x00000504) return "XampKioskIsSimulationMode";
  if (id == 0x00000505) return "XamIsUIThread";
  if (id == 0x00000506) return "XamInputSendXenonButtonPress";
  if (id == 0x00000507) return "XamDebugGetURISchemeCount";
  if (id == 0x00000508) return "XamDebugGetURISchemeInfo";
  if (id == 0x00000509) return "XamGetOnlineCountryFromLocale";
  if (id == 0x0000050A) return "XTestOnlineIsConnectedToLive";
  if (id == 0x0000050B) return "XamGetConsoleFriendlyName";
  if (id == 0x0000050C) return "XamSetConsoleFriendlyName";
  if (id == 0x0000050D) return "XamGetCountry";
  if (id == 0x0000050E) return "XamPackageManagerGetFilePathW";
  if (id == 0x0000050F) return "XamGetCurrentDemand";
  if (id == 0x00000510) return "XamCompleteDemand";
  if (id == 0x00000511) return "XamDemand";
  if (id == 0x00000512) return "XamFormatSystemDateString";
  if (id == 0x00000513) return "XamDebugGetBackURI";
  if (id == 0x00000514) return "XamIsCurrentTitleIptv";
  if (id == 0x00000515) return "XamIsIptvEnabled";
  if (id == 0x00000516) return "XamIsDvrRecording";
  if (id == 0x00000517) return "XamIptvUninstall";
  if (id == 0x00000518) return "XamGetDvrStorage";
  if (id == 0x00000519) return "XamSetDvrStorage";
  if (id == 0x0000051A) return "XamIptvGetServiceName";
  if (id == 0x0000051B) return "XamNuiHudGetEngagedEnrollmentIndex";
  if (id == 0x0000051C) return "XamProfileSetCachedWindowsLiveEmail";
  if (id == 0x0000051D) return "XamProfileGetCachedWindowsLiveEmail";
  if (id == 0x0000051E) return "XamUserResetSubscriptionType";
  if (id == 0x0000051F) return "XamLrcSetTitlePort";
  if (id == 0x00000520) return "XamLrcVerifyClientId";
  if (id == 0x00000521) return "XamLrcEncryptDecryptTitleMessage";
  if (id == 0x00000522) return "XamFitnessGetSyncStatus";
  if (id == 0x00000523) return "XamFitnessInitializeForOneUser";
  if (id == 0x00000524) return "XamFitnessGetSuggestedPrivacySettings";
  if (id == 0x00000525) return "XampFitnessLetFireAndForgetsCatchUpInternal";
  if (id == 0x00000526) return "XamInputGetFailedConnectionOrBind";
  if (id == 0x00000527) return "XuiSceneIsInTransition";
  if (id == 0x00000528) return "XamIsOnPrivateNetwork";
  if (id == 0x00000529) return "XamInputSetMinMaxAuthDelay";
  if (id == 0x0000052A) return "XamInputNonControllerGetRawEx";
  if (id == 0x0000052B) return "XamInputNonControllerSetRawEx";
  if (id == 0x0000052C) return "XamMarketplaceAcquireFreeContent";
  if (id == 0x0000052D) return "XamGetClosedCaptioningState";
  if (id == 0x0000052E) return "XamGetClosedCaptioningSettings";
  if (id == 0x0000052F) return "XamSetClosedCaptioningState";
  if (id == 0x00000530) return "XamLoaderGetLogonTitle";
  if (id == 0x00000531) return "XamBeginDemand";
  if (id == 0x00000532) return "XamGetErrorStringFromWebService";
  if (id == 0x00000533) return "XamGetModernPresenceWorkspaceSize";
  if (id == 0x00000534) return "XamGetModernPresence";
  if (id == 0x00000535) return "XamGetSingleModernPresence";
  if (id == 0x00000536) return "XamGetModernPresenceImageUrl";
  if (id == 0x00000537) return "XGetSSLCertBypassEnabled";
  if (id == 0x00000538) return "XamIsNetworkCaptivePortal";
  if (id == 0x00000539) return "XamShowAndWaitForMessageBoxEx";
  if (id == 0x0000053B) return "XamGetCurrencyFormat";
  if (id == 0x0000053C) return "XamFormatCurrency";
  if (id == 0x0000053D) return "XamReportTLSConnect";
  if (id == 0x0000053E) return "XamGetXSTSTokenExpiryPeriodMS";
  if (id == 0x0000053F) return "XamGetUserBalance";
  if (id == 0x00000540) return "XamIsGuideDisabled";
  if (id == 0x00000541) return "XampCallXAccountTransitionStoredValuePointsToCurrency";
  if (id == 0x00000542) return "XampSetMockCallXAccountTransitionStoredValuePointsToCurrency";
  if (id == 0x00000543) return "XamShowCsvTransitionUI";
  if (id == 0x00000544) return "XamAskUserForCSVDrainagePermission";
  if (id == 0x00000545) return "XamIsCSVDrainageSupported";
  if (id == 0x0000056C) return "XamGetTLSConfig";
  if (id == 0x00000577) return "XamGetServiceEndpoint";
  if (id == 0x00000578) return "XamReminderGetItems";
  if (id == 0x00000579) return "XamReminderClearItems";
  if (id == 0x0000057A) return "XamReminderItemAdd";
  if (id == 0x0000057B) return "XamReminderItemRemove";
  if (id == 0x0000057C) return "XamReminderGetNextItem";
  if (id == 0x0000057D) return "XamReminderGetModifiedTime";
  if (id == 0x0000057E) return "XamReminderClearCache";
  if (id == 0x0000057F) return "XamLrcKeyboardGetInput";
  if (id == 0x00000580) return "XamLrcKeyboardGetRequiredBufferSize";
  if (id == 0x00000581) return "XamLrcKeyboardRegister";
  if (id == 0x00000582) return "XamLrcKeyboardUnregister";
  if (id == 0x00000583) return "XamLrcKeyboardUpdateText";
  if (id == 0x00000584) return "XamValidateCountry";
  if (id == 0x00000585) return "XamGetOnlineCountryString";
  if (id == 0x00000586) return "XamGetCountryString";
  if (id == 0x00000587) return "XamGetLanguageString";
  if (id == 0x00000588) return "XamGetLanguageLocaleString";
  if (id == 0x00000589) return "XamGetOnlineLanguageAndCountryString";
  if (id == 0x0000058A) return "XamGetLanguageLocaleFallbackString";
  if (id == 0x0000058B) return "XamGetOnlineLanguageAndCountry";
  if (id == 0x0000058C) return "XamGetLanguageTypeface";
  if (id == 0x0000058D) return "XamGetLanguageTypefacePatch";
  if (id == 0x0000058E) return "XamGetLocaleString";
  if (id == 0x0000058F) return "XamGetLocaleFromOnlineCountry";
  if (id == 0x00000590) return "XamOfflineTimerSetData";
  if (id == 0x00000591) return "XamOfflineTimerResume";
  if (id == 0x00000592) return "XamOfflineTimerSuspend";
  if (id == 0x00000593) return "XamOfflineTimerIsRunning";
  if (id == 0x00000594) return "XamOfflineTimerIsEnabled";
  if (id == 0x00000595) return "XamOfflineTimerGetTimeRemaining";
  if (id == 0x00000596) return "XamOfflineTimerGetContractData";
  if (id == 0x00000597) return "XamOfflineTimerInitialize";
  if (id == 0x00000598) return "XamOfflineTimerGetData";
  if (id == 0x00000599) return "XamPlayToRegister";
  if (id == 0x0000059A) return "XamPlayToReportPlaybackState";
  if (id == 0x0000059B) return "XamPlayToUnregister";
  if (id == 0x0000059C) return "XamShowTFAUI";
  if (id == 0x0000059D) return "OnReconnect";
  if (id == 0x0000059E) return "XamGetOnlineCountryFeatures";
  if (id == 0x0000059F) return "XamLogLocalizationEtx";
  if (id == 0x000005A0) return "XampXAuthIsLocalSocketAllowed";
  if (id == 0x000005A1) return "XamPlayToGetRequest";
  if (id == 0x000005A2) return "XamPlayToCancelGetRequest";
  if (id == 0x000005A3) return "XamPlayToCompleteRequest";
  if (id == 0x000005A4) return "XamFitnessGetTitleSummaries";
  if (id == 0x000005A5) return "XamFitnessGetTitleSummary";
  if (id == 0x000005A6) return "XamOfflineTimerShutdown";
  if (id == 0x000005A7) return "XamFitnessContainsFitnessData";
  if (id == 0x000005A8) return "XamGetLanguageFromOnlineLanguage";
  if (id == 0x000005A9) return "XamGetOnlineLanguageString";
  if (id == 0x000005AA) return "XamGetCountryFromOnlineCountry";
  if (id == 0x000005D7) return "XamGetLocaleEx";
  if (id == 0x000005D8) return "XamOfflineTimerForceQuery";
  if (id == 0x000005D9) return "XamShowCreateProfileUIEx";
  if (id == 0x000005DA) return "XTLGetLanguageV2";
  if (id == 0x000005DB) return "XTLGetLocaleV1";
  if (id == 0x000005DC) return "XamAvatarInitialize";
  if (id == 0x000005DD) return "XamAvatarShutdown";
  if (id == 0x000005DE) return "XamAvatarGetManifestLocalUser";
  if (id == 0x000005DF) return "XamAvatarGetManifestsByXuid";
  if (id == 0x000005E0) return "XamAvatarGetAssetsResultSize";
  if (id == 0x000005E1) return "XamAvatarGetAssets";
  if (id == 0x000005E2) return "XamAvatarGenerateMipMaps";
  if (id == 0x000005E3) return "XamAvatarSetCustomAsset";
  if (id == 0x000005E4) return "XamAvatarSetManifest";
  if (id == 0x000005E5) return "EnumerateMediaObjects";
  if (id == 0x000005E6) return "EnumerateMediaObjects_0";
  if (id == 0x000005E7) return "XamAvatarLoadAnimation";
  if (id == 0x000005E8) return "XamAvatarBeginEnumAssets";
  if (id == 0x000005E9) return "XamAvatarEndEnumAssets";
  if (id == 0x000005EA) return "XamAvatarEnumAssets";
  if (id == 0x000005EB) return "XamAvatarGetMetadataRandom";
  if (id == 0x000005EC) return "EnumerateMediaObjects_1";
  if (id == 0x000005ED) return "EnumerateMediaObjects_2";
  if (id == 0x000005EE) return "XamAvatarGetMetadataSignedOutProfileCount";
  if (id == 0x000005EF) return "XamAvatarGetMetadataSignedOutProfile";
  if (id == 0x000005F0) return "EnumerateMediaObjects_3";
  if (id == 0x000005F1) return "XamAvatarManifestGetBodyType";
  if (id == 0x000005F2) return "XamAvatarGetInstrumentation";
  if (id == 0x000005F3) return "XamAvatarGetAssetIcon";
  if (id == 0x000005F4) return "XamAvatarWearNow";
  if (id == 0x000005F5) return "XamAvatarGetAssetBinary";
  if (id == 0x000005F6) return "XamAvatarReinstallAwardedAsset";
  if (id == 0x000005F7) return "XamAvatarGetInstalledAssetPackageDescription";
  if (id == 0x000005F8) return "XamAvatarSetMocks";
  if (id == 0x000005F9) return "XamLrcKeyboardValidateTextChange";
  if (id == 0x000005FA) return "XamLrcKeyboardApplyTextChange";
  if (id == 0x000005FB) return "XamLrcLogSessionSummary";
  if (id == 0x000005FC) return "XamLrcLogError";
  if (id == 0x0000060E) return "XamContentMountInstalledGame";
  if (id == 0x0000060F) return "XamContentIsGameInstalledToHDD";
  if (id == 0x00000610) return "XamContentQueryLicenseInternal";
  if (id == 0x00000611) return "XamContentGetDeviceVolumePath";
  if (id == 0x00000612) return "XamContentDeviceCheckUpdates";
  if (id == 0x00000613) return "XamContentGetHeaderInternal";
  if (id == 0x00000614) return "XamNetworkStorageGetNetworkDevice";
  if (id == 0x00000615) return "XamNetworkStorageDeviceHasCacheFile";
  if (id == 0x00000616) return "XamNetworkStorageCreateCacheOnDevice";
  if (id == 0x00000617) return "XamNetworkStorageDeleteCacheOnDevice";
  if (id == 0x00000618) return "XamNetworkStorageGetStatus";
  if (id == 0x00000619) return "XamNetworkStorageIsSupportedContentType";
  if (id == 0x0000061A) return "XamNetworkStorageSetTestMock";
  if (id == 0x0000061B) return "XamNetworkStorageGetLastSyncTime";
  if (id == 0x0000061C) return "XamShowNetworkStorageSyncUI";
  if (id == 0x0000061D) return "XamUserIsLogonPreviewModeEnabled";
  if (id == 0x0000061E) return "XamUserLockLogonPreviewMode";
  if (id == 0x0000061F) return "XamUserUnlockLogonPreviewMode";
  if (id == 0x00000620) return "XamNetworkStorageIsUserInSync";
  if (id == 0x00000621) return "XamNetworkStorageSetUserInSync";
  if (id == 0x00000622) return "XamNetworkStorageOnSigninChanged";
  if (id == 0x00000623) return "XamNetworkStorageSignInTestMock";
  if (id == 0x00000624) return "XamShowFofUI";
  if (id == 0x00000625) return "CompareFileTime";
  if (id == 0x00000626) return "SetFileTime";
  if (id == 0x00000627) return "XamNetworkStorageGetTitleProperties";
  if (id == 0x00000628) return "XamNetworkStorageLockFile";
  if (id == 0x00000629) return "XamNetworkStorageUserHasPrivilege";
  if (id == 0x0000062A) return "XamNetworkStorageIsTitleExempt";
  if (id == 0x0000062B) return "XamContentExistsOnDeviceInternal";
  if (id == 0x0000062C) return "XamNetworkStorageGetBackingDevice";
  if (id == 0x0000062D) return "XamNetworkStorageIsEnabledInLiveHive";
  if (id == 0x0000062E) return "XamNetworkStorageIsCheckingSyncStates";
  if (id == 0x0000062F) return "XamNetworkStorageUserNeedsToSync";
  if (id == 0x00000630) return "XamNetworkStorageGetUserNetworkSyncTime";
  if (id == 0x00000631) return "XamNetworkStorageGetUserProperties";
  if (id == 0x00000632) return "XamNetworkStorageAppLauncherLaunchIfRunning";
  if (id == 0x00000633) return "XamNetworkStorageSetTitleProperties";
  if (id == 0x00000634) return "XamNetworkStorageGetUserLastError";
  if (id == 0x00000635) return "XamNetworkStorageCheckOutTitle";
  if (id == 0x00000636) return "XamNetworkStorageShouldHideFromTitle";
  if (id == 0x00000637) return "XamNetworkStorageOnUserSyncChange";
  if (id == 0x00000638) return "XamNetworkStorageHasUserEnabledStorage";
  if (id == 0x00000639) return "XamContentGetLocalizedDeviceData";
  if (id == 0x00000640) return "XamPackageManagerFindPackageContainingIndexedXEX";
  if (id == 0x00000641) return "XamPackageManagerReinitialize";
  if (id == 0x00000642) return "XamPackageManagerGetAuthoritativeManifestVersion";
  if (id == 0x00000643) return "XamGetCurrentSystemOnlineManifestRevision";
  if (id == 0x00000644) return "XamPackageManagerDeleteExtendedPartition";
  if (id == 0x00000645) return "XamPackageManagerHasExtendedPartition";
  if (id == 0x00000646) return "XamPackageManagerGetExperienceMode";
  if (id == 0x00000647) return "XamPackageManagerGetFeatureRequiresUpdateStrings";
  if (id == 0x00000648) return "XamPackageManagerGetFileSize";
  if (id == 0x00000649) return "XampDemandUpdateGetAttributes";
  if (id == 0x0000064A) return "XampDemandUpdateGetExtendedAttributes";
  if (id == 0x0000064B) return "XampDemandUpdateGetInstance";
  if (id == 0x0000064C) return "XampDemandUpdateSetRefreshTestFlags";
  if (id == 0x0000064D) return "XampDemandUpdateIsRefreshTestFlagSet";
  if (id == 0x0000064E) return "XampDemandUpdateGetManifestLocalPath";
  if (id == 0x0000064F) return "XampDemandUpdateRefreshManifest";
  if (id == 0x00000650) return "XdfInitialize";
  if (id == 0x00000651) return "XdfShutdown";
  if (id == 0x00000652) return "XdfGetExpectedDownloadSize";
  if (id == 0x00000653) return "XdfGetItem";
  if (id == 0x00000654) return "XdfCacheItem";
  if (id == 0x00000655) return "XdfLoadXexFromCache";
  if (id == 0x00000656) return "XdfLoadXex";
  if (id == 0x00000657) return "XdfCancelRequest";
  if (id == 0x00000658) return "XdfResumeDelayedItem";
  if (id == 0x00000659) return "XdfLaunchNewImageFromCache";
  if (id == 0x0000065A) return "XampDemandUpdateRefreshManifestDuringLogon";
  if (id == 0x0000065B) return "XampDemandUpdateCheckOnlineManifestChanged";
  if (id == 0x0000065C) return "XampDemandUpdateRunCacheCleaner";
  if (id == 0x00000685) return "XamUpdateGetTitleUpdateSizeThreshold";
  if (id == 0x00000686) return "XamXStudioRequest";
  if (id == 0x00000687) return "XamNotifyDelayUIInternal";
  if (id == 0x000006A4) return "XamShowAvatarMiniCreatorUI";
  if (id == 0x000006A5) return "XamShowGoldUpgradeUI";
  if (id == 0x000006A6) return "XamResumeUpdaterUI";
  if (id == 0x000006A7) return "XamShowDirectAcquireUI";
  if (id == 0x000006A8) return "XamShowPaymentOptionsUI";
  if (id == 0x000006A9) return "XamShowMultiplayerUpgradeUI";
  if (id == 0x00000708) return "XamGetLiveHiveValueA";
  if (id == 0x00000709) return "XamGetLiveHiveValueW";
  if (id == 0x0000070A) return "XamGetLiveHiveValueDuringLogonAttemptA";
  if (id == 0x0000070B) return "XamSetUserPresetWindowsLiveCreds";
  if (id == 0x0000070C) return "XamQueryLiveHiveA";
  if (id == 0x0000070D) return "XamQueryLiveHiveW";
  if (id == 0x0000070E) return "XamGetLiveHiveValueDuringLogonAttemptExA";
  if (id == 0x0000070F) return "XamGetUserPresetWindowsLiveCreds";
  if (id == 0x00000710) return "XamGetUserNeedTFA";
  if (id == 0x00000711) return "XamSetUserNeedTFA";
  if (id == 0x00000712) return "XamGetUserInMemoryWindowsLiveCreds";
  if (id == 0x0000076C) return "XamDownloadMarketplaceStoresList";
  if (id == 0x0000076D) return "XamGetStoreFront";
  if (id == 0x0000076E) return "XamSetStagingMode";
  if (id == 0x0000076F) return "XamGetStagingMode";
  if (id == 0x00000770) return "XamAppGetSessionId";
  if (id == 0x00000771) return "XamAccountRecoveryRecoverAllProfileData";
  if (id == 0x00000772) return "XamAccountRecoveryGetProgress";
  if (id == 0x000007D0) return "XamDoesOmniNeedConfiguration";
  if (id == 0x000007D1) return "XamFirstRunExperienceShouldRun";
  if (id == 0x000007D2) return "GetProcessHeap";
  if (id == 0x000007D3) return "UnhandledExceptionFilter";
  if (id == 0x000007D4) return "SetUnhandledExceptionFilter";
  if (id == 0x000007D5) return "XamIsOptionalMediaUpdateInstalled";
  if (id == 0x000007D6) return "XamShowOptionalMediaUpdateRequiredUI";
  if (id == 0x000007D7) return "XamShowOptionalMediaUpdateRequiredUIEx";
  if (id == 0x000007D8) return "XamShowFirstRunWelcomeUI";
  if (id == 0x000007D9) return "XamTaskCreateQueueEx";
  if (id == 0x000007DA) return "XamSetDashBackstackData";
  if (id == 0x000007DB) return "XamLaunchAvatarEditor";
  if (id == 0x000007DC) return "XamGetDashBackstackData";
  if (id == 0x000007DD) return "XamGetDashBackstackNodesCount";
  if (id == 0x000007DE) return "XamSetLastActiveUserData";
  if (id == 0x000007DF) return "XamGetLastActiveUserData";
  if (id == 0x000007E0) return "XamSetActiveDashAppInfo";
  if (id == 0x000007E1) return "XamGetActiveDashAppInfo";
  if (id == 0x000007E2) return "XamLoaderRegisterLaunchRequestCallback";
  if (id == 0x000007E3) return "XamLoadExtraAVCodecs2";
  if (id == 0x000007E4) return "XamUnloadExtraAVCodecs2";
  if (id == 0x00000802) return "XamUserCreateAvatarAssetEnumerator";
  if (id == 0x00000803) return "XamInitializeGameTileCache";
  if (id == 0x00000804) return "XamDestroyGameTileCache";
  if (id == 0x00000805) return "XamReadGameTileImage";
  if (id == 0x00000806) return "XamShouldThrottleAccountInfoCall";
  if (id == 0x00000807) return "XuiClassDerivesFrom";
  if (id == 0x00000808) return "XuiFreeVisuals";
  if (id == 0x00000809) return "XuiGetBaseClass";
  if (id == 0x0000080A) return "XuiLoadVisualFromBinary";
  if (id == 0x0000080B) return "XuiResourceGetBuffer";
  if (id == 0x0000080C) return "XuiResourceGetTotalSize";
  if (id == 0x0000080D) return "XuiElementGetUserData";
  if (id == 0x0000080E) return "XuiElementSetUserData";
  if (id == 0x0000080F) return "XuiTabSceneGetCount";
  if (id == 0x00000810) return "XuiSliderGetStep";
  if (id == 0x00000811) return "XuiSliderSetStep";
  if (id == 0x00000812) return "XuiProgressBarGetRange";
  if (id == 0x00000813) return "XuiElementSetHittable";
  if (id == 0x00000814) return "XuiElementPlayNamedFrames";
  if (id == 0x00000815) return "XuiElementGetPivot";
  if (id == 0x00000816) return "XuiElementGetPrev";
  if (id == 0x00000817) return "XuiElementGetScale";
  if (id == 0x00000818) return "XuiElementSetPivot";
  if (id == 0x00000819) return "XuiElementSetRotation";
  if (id == 0x0000081A) return "XuiElementSetScale";
  if (id == 0x0000081B) return "XuiControlWantsUnfocusedInput";
  if (id == 0x0000081C) return "XuiResourceOpenNoLoc";
  if (id == 0x0000081D) return "XuiResourceReleasePackage";
  if (id == 0x0000081E) return "XuiResourceGetPackageEntryInfo";
  if (id == 0x0000081F) return "XuiResourceGetPackageEntryCount";
  if (id == 0x00000820) return "XuiResourceOpenPackage";
  if (id == 0x00000821) return "XamCodeCoverageFileOpen";
  if (id == 0x00000822) return "XamCodeCoverageFileClose";
  if (id == 0x00000823) return "XamCodeCoverageFileLseek";
  if (id == 0x00000824) return "XamCodeCoverageFileRead";
  if (id == 0x00000825) return "XamCodeCoverageFileWrite";
  if (id == 0x00000826) return "Refresh_2";
  if (id == 0x00000827) return "XampHeapGetInfo";
  if (id == 0x00000828) return "XampHeapGetCount";
  if (id == 0x00000829) return "XamShowPamUI";
  if (id == 0x0000082A) return "XuiElementLayoutTree";
  if (id == 0x0000082B) return "XamRegisterScreenSaverCallback";
  if (id == 0x0000082C) return "XUIElementPropVal_SetInt";
  if (id == 0x0000082D) return "XUIElementPropVal_SetFloat";
  if (id == 0x0000082E) return "XuiObjectGetPropertyDef";
  if (id == 0x0000082F) return "XuiRenderGetDevice";
  if (id == 0x00000830) return "XuiRenderRestoreState";
  if (id == 0x00000831) return "XuiElementGetFullXForm";
  if (id == 0x00000832) return "XuiRenderGetViewTransform";
  if (id == 0x00000833) return "XuiRenderGetColorSpace";
  if (id == 0x00000834) return "XamPngEncode";
  if (id == 0x00000835) return "XamPngDecode";
  if (id == 0x00000836) return "XamPngEncodeEx";
  if (id == 0x00000837) return "XuiTextElementMeasureText";
  if (id == 0x00000838) return "XamLoaderShouldConfirmReboot";
  if (id == 0x00000839) return "XamLoaderRebootToDash";
  if (id == 0x0000083A) return "XamNuiHudGetEngagedTrackingID";
  if (id == 0x0000083B) return "XamLoaderLaunchTitleForReason";
  if (id == 0x0000083C) return "XamNuiHudSetEngagedTrackingID";
  if (id == 0x0000083D) return "XuiBrushGetTexture";
  if (id == 0x0000083E) return "XamSetupTexture";
  if (id == 0x0000083F) return "XuiElementGetDescendantById";
  if (id == 0x00000840) return "XamLoaderIsKinectUIPreferredForLogonTitle";
  if (id == 0x00000841) return "XamSetupCameraPreviewStuff";
  if (id == 0x00000842) return "XamReleaseCameraPreviewStuff";
  if (id == 0x00000843) return "XamRenderCameraPreviewStuff";
  if (id == 0x00000848) return "XamAccountRecoveryGetSetTitleSyncTime";
  if (id == 0x00000849) return "XamReadBiometricData";
  if (id == 0x0000084A) return "XamWriteBiometricData";
  if (id == 0x0000084B) return "XamD3DResourceDescriptorCreate";
  if (id == 0x0000084C) return "XamD3DResourceDescriptorAddRef";
  if (id == 0x0000084D) return "XamD3DResourceDescriptorRelease";
  if (id == 0x0000084E) return "XamD3DResourceAddRef";
  if (id == 0x0000084F) return "XamD3DResourceSet";
  if (id == 0x00000850) return "XamD3DResourceIsBusy";
  if (id == 0x00000851) return "XamD3DResourceRelease";
  if (id == 0x00000852) return "ControlPackGetCursorPosition";
  if (id == 0x00000853) return "ControlPackShouldShowCursor";
  if (id == 0x00000858) return "XamFlushAgraTemperatureReport";
  if (id == 0x00000859) return "XamNatalDeviceAudioCalibrate";
  if (id == 0x0000085A) return "XamNuiIdentityGetEnrollmentInfo";
  if (id == 0x0000085B) return "XamNuiIdentityUnenroll";
  if (id == 0x0000085C) return "XamNuiIdentityGetColorTexture";
  if (id == 0x0000085D) return "XamReportKinectSettingsChangedEvent";
  if (id == 0x0000085E) return "XamNuiEnableChatMic";
  if (id == 0x0000085F) return "XamNuiIsChatMicEnabled";
  if (id == 0x00000860) return "XamNuiGetDepthCalibration";
  if (id == 0x00000861) return "XamNuiStoreDepthCalibration";
  if (id == 0x00000862) return "XamUserNuiIsBiometricEnabled";
  if (id == 0x00000863) return "XamUserNuiEnableBiometric";
  if (id == 0x00000864) return "XamNuiCameraSetFlags";
  if (id == 0x00000865) return "XamNuiCameraRememberFloor";
  if (id == 0x00000866) return "XamUserNuiGetUserIndexForBind";
  if (id == 0x00000867) return "XamUserNuiGetUserIndexForSignin";
  if (id == 0x00000868) return "XamUserNuiBind";
  if (id == 0x00000869) return "XamUserNuiGetUserIndex";
  if (id == 0x0000086A) return "XamUserNuiGetEnrollmentIndex";
  if (id == 0x0000086B) return "XamUserNuiUnbind";
  if (id == 0x0000086C) return "XamNuiIdentityGetQualityFlagsMessage";
  if (id == 0x0000086D) return "XamNuiCameraTiltSetCallback";
  if (id == 0x0000086E) return "XamNuiHudIsEnabled";
  if (id == 0x0000086F) return "XamNuiCameraGetTiltControllerType";
  if (id == 0x00000870) return "XamNuiCameraTiltGetStatus";
  if (id == 0x00000871) return "XamNuiIdentityGetQualityFlags";
  if (id == 0x00000872) return "XamNuiIdentityEnrollForSignIn";
  if (id == 0x00000873) return "XamNuiIdentityGetSessionId";
  if (id == 0x00000874) return "XamNuiIdentityIdentifyWithBiometric";
  if (id == 0x00000875) return "ControlPackGetHandleManager";
  if (id == 0x00000876) return "XamEnableNuiAutomation";
  if (id == 0x00000877) return "XamNuiGetSystemGestureControl";
  if (id == 0x00000878) return "XamGetPasscodeKeyFromVirtualKey";
  if (id == 0x00000879) return "XamEnableNatalPlayback";
  if (id == 0x0000087A) return "XamIsNuiAutomationEnabled";
  if (id == 0x0000087B) return "XamIsNatalPlaybackEnabled";
  if (id == 0x0000087C) return "XamNuiHudInterpretFrame";
  if (id == 0x0000087D) return "XamNuiHudEnableInputFilter";
  if (id == 0x0000087E) return "ControlpackNuiCursorSetTrackingId";
  if (id == 0x0000087F) return "XamNuiHudGetInitializeFlags";
  if (id == 0x00000880) return "XamNuiCameraElevationSetAngle";
  if (id == 0x00000881) return "XamNuiCameraElevationGetAngle";
  if (id == 0x00000882) return "XamNuiCameraElevationAutoTilt";
  if (id == 0x00000883) return "XamNuiCameraElevationStopMovement";
  if (id == 0x00000884) return "XamNuiCameraElevationSetCallback";
  if (id == 0x00000885) return "XamNuiGetDeviceStatus";
  if (id == 0x00000886) return "XamNuiNatalCameraUpdateStarting";
  if (id == 0x00000887) return "XamNuiNatalCameraUpdateComplete";
  if (id == 0x00000888) return "XamNuiHudGetVersions";
  if (id == 0x00000889) return "XamGetHUDElementByPath";
  if (id == 0x0000088A) return "XamGetHUDElementByAutoId";
  if (id == 0x0000088B) return "XuiElementGetScreenPositionCenter";
  if (id == 0x0000088C) return "XamNuiCameraElevationReverseAutoTilt";
  if (id == 0x0000088D) return "ControlPackSimpleCursorGetRayFromScreenPosition";
  if (id == 0x0000088E) return "ControlPackSideNavControlGetNuiHandle";
  if (id == 0x0000088F) return "XamFindHUDElementByXuiId";
  if (id == 0x00000890) return "XamNuiIsDeviceReady";
  if (id == 0x00000891) return "XamNuiSetForceDeviceOff";
  if (id == 0x00000892) return "XamNuiPlayerEngagementUpdate";
  if (id == 0x00000893) return "XamNuiSkeletonGetBestSkeletonIndex";
  if (id == 0x00000894) return "XamNuiSkeletonScoreUpdate";
  if (id == 0x00000895) return "XamNuiCameraTiltReportStatus";
  if (id == 0x00000896) return "XamNuiCameraAdjustTilt";
  if (id == 0x00000897) return "XamNuiIdentityAbort";
  if (id == 0x00000898) return "D3DDevice_CreateVertexShader";
  if (id == 0x00000899) return "D3DDevice_CreatePixelShader";
  if (id == 0x0000089A) return "D3DDevice_CreateTexture";
  if (id == 0x0000089B) return "D3DDevice_CreateVertexBuffer";
  if (id == 0x0000089C) return "D3DDevice_CreateIndexBuffer";
  if (id == 0x0000089D) return "D3DDevice_CreateVertexDeclaration";
  if (id == 0x0000089E) return "D3DVertexBuffer_Unlock";
  if (id == 0x0000089F) return "D3DVertexBuffer_Lock";
  if (id == 0x000008A0) return "D3DIndexBuffer_Unlock";
  if (id == 0x000008A1) return "D3DIndexBuffer_Lock";
  if (id == 0x000008A2) return "D3DTexture_UnlockRect";
  if (id == 0x000008A3) return "D3DTexture_LockRect";
  if (id == 0x000008A4) return "D3DDevice_Clear";
  if (id == 0x000008A5) return "D3DDevice_SetViewport";
  if (id == 0x000008A6) return "D3DDevice_GetViewport";
  if (id == 0x000008A7) return "D3DVertexShader_Release";
  if (id == 0x000008A8) return "D3DPixelShader_Release";
  if (id == 0x000008A9) return "D3DVertexDeclaration_Release";
  if (id == 0x000008AA) return "D3DResource_Release";
  if (id == 0x000008AB) return "D3DDevice_Release";
  if (id == 0x000008AC) return "D3DDevice_SetVertexShader";
  if (id == 0x000008AD) return "D3DDevice_SetPixelShader";
  if (id == 0x000008AE) return "D3DDevice_SetTexture";
  if (id == 0x000008AF) return "D3DDevice_SetVertexDeclaration";
  if (id == 0x000008B0) return "D3DDevice_SetIndices";
  if (id == 0x000008B1) return "D3DDevice_SetStreamSource";
  if (id == 0x000008B2) return "D3DDevice_DrawVertices";
  if (id == 0x000008B3) return "D3DDevice_DrawVerticesUP";
  if (id == 0x000008B4) return "D3DDevice_DrawIndexedVertices";
  if (id == 0x000008B5) return "D3DDevice_DrawIndexedVerticesUP";
  if (id == 0x000008B6) return "D3DDevice_SetVertexShaderConstantF_ParameterCheck";
  if (id == 0x000008B7) return "D3DDevice_SetPixelShaderConstantF_ParameterCheck";
  if (id == 0x000008B8) return "D3DDevice_SetSamplerState_ParameterCheck";
  if (id == 0x000008B9) return "D3DDevice_SetRenderState_ParameterCheck";
  if (id == 0x000008BA) return "D3DDevice_GetRenderState_ParameterCheck";
  if (id == 0x000008BB) return "D3DDevice_SetVertexShaderConstantFN";
  if (id == 0x000008BC) return "D3DDevice_SetPixelShaderConstantFN";
  if (id == 0x000008BD) return "D3DDevice_GetRenderState_ZEnable";
  if (id == 0x000008BE) return "D3DDevice_GetRenderState_CullMode";
  if (id == 0x000008BF) return "D3DDevice_GetRenderState_AlphaBlendEnable";
  if (id == 0x000008C0) return "D3DDevice_GetRenderState_SrcBlendAlpha";
  if (id == 0x000008C1) return "D3DDevice_GetRenderState_DestBlendAlpha";
  if (id == 0x000008C2) return "D3DDevice_GetRenderState_BlendOp";
  if (id == 0x000008C3) return "D3DDevice_GetRenderState_ViewportEnable";
  if (id == 0x000008C4) return "D3DDevice_SetRenderState_ZEnable";
  if (id == 0x000008C5) return "D3DDevice_SetRenderState_CullMode";
  if (id == 0x000008C6) return "D3DDevice_SetRenderState_AlphaBlendEnable";
  if (id == 0x000008C7) return "D3DDevice_SetRenderState_SrcBlendAlpha";
  if (id == 0x000008C8) return "D3DDevice_SetRenderState_DestBlendAlpha";
  if (id == 0x000008C9) return "D3DDevice_SetRenderState_BlendOp";
  if (id == 0x000008CA) return "D3DDevice_SetRenderState_ViewportEnable";
  if (id == 0x000008CB) return "D3DDevice_SetSamplerState_MagFilter";
  if (id == 0x000008CC) return "D3DDevice_SetSamplerState_MinFilter";
  if (id == 0x000008CD) return "D3DDevice_SetSamplerState_AddressU";
  if (id == 0x000008CE) return "D3DDevice_SetSamplerState_AddressV";
  if (id == 0x000008CF) return "XGSetTextureHeader";
  if (id == 0x000008D0) return "XGGetTextureDesc";
  if (id == 0x000008D1) return "XGOffsetResourceAddress";
  if (id == 0x000008D2) return "D3DResource_AddRef";
  if (id == 0x000008D3) return "D3DVertexShader_AddRef";
  if (id == 0x000008D4) return "D3DPixelShader_AddRef";
  if (id == 0x000008D5) return "D3DVertexDeclaration_AddRef";
  if (id == 0x000008D6) return "XGSetTextureHeaderEx";
  if (id == 0x000008D7) return "D3DDevice_GetRenderTarget";
  if (id == 0x000008D8) return "D3DDevice_SetRenderTarget";
  if (id == 0x000008D9) return "D3DDevice_GetDepthStencilSurface";
  if (id == 0x000008DA) return "D3DDevice_SetDepthStencilSurface";
  if (id == 0x000008DB) return "D3DDevice_Resolve";
  if (id == 0x000008DC) return "D3DDevice_SetPixelShaderConstantB";
  if (id == 0x000008DD) return "XamNuiGetDeviceSerialNumber";
  if (id == 0x000008DE) return "XamNuiGetLoadedDepthCalibration";
  if (id == 0x000008DF) return "XamNuiGetTrueColorInfo";
  if (id == 0x000008E0) return "XamNuiGetCameraIntrinsics";
  if (id == 0x000008E1) return "XamNuiGetFanRate";
  if (id == 0x000008E2) return "XamNuiGetSupportString";
  if (id == 0x000008E3) return "XamKinectGetHardwareType";
  if (id == 0x000008FC) return "XamXtwManagerGetVariableCount";
  if (id == 0x000008FD) return "XamXtwManagerGetId";
  if (id == 0x000008FE) return "XamXtwManagerGetValue";
  if (id == 0x000008FF) return "XamXtwManagerSetValue";
  if (id == 0x00000900) return "XamXtwManagerIncrement";
  if (id == 0x00000901) return "XamXtwManagerDecrement";
  if (id == 0x00000902) return "XamXtwManagerResetValue";
  if (id == 0x00000903) return "XamXtwManagerResetAll";
  if (id == 0x00000904) return "XamXtwManagerGetDataFilePath";
  if (id == 0x00000905) return "XamXtwManagerDeleteDataFile";
  if (id == 0x00000906) return "XamXtwManagerSave";
  if (id == 0x00000907) return "XamXtwManagerLoad";
  if (id == 0x00000908) return "XamGetXTweakManager";
  if (id == 0x000009BB) return "XamMediaVerificationCreate";
  if (id == 0x000009BC) return "XamMediaVerificationClose";
  if (id == 0x000009BD) return "XamMediaVerificationVerify";
  if (id == 0x000009BE) return "XamMediaVerificationFailedBlocks";
  if (id == 0x000009BF) return "XamMediaVerificationInject";
  if (id == 0x000009C0) return "XamShowBadDiscErrorUI";
  if (id == 0x000009C4) return "XamBackgroundDownloadSetMode";
  if (id == 0x000009C5) return "XamBackgroundDownloadIsEnabled";
  if (id == 0x000009C6) return "XamBackgroundDownloadGetActiveItem";
  if (id == 0x000009C7) return "XamBackgroundDownloadGetItems";
  if (id == 0x000009C8) return "XamBackgroundDownloadClearItems";
  if (id == 0x000009C9) return "XamBackgroundDownloadItemAdd";
  if (id == 0x000009CA) return "XamBackgroundDownloadItemRemove";
  if (id == 0x000009CB) return "XamBackgroundDownloadItemMakeFirst";
  if (id == 0x000009CC) return "XamBackgroundDownloadSetForegroundPriority";
  if (id == 0x000009CD) return "XamBackgroundDownloadGetForegroundPriority";
  if (id == 0x000009CE) return "XamBackgroundDownloadItemToContentData";
  if (id == 0x000009CF) return "XamBackgroundDownloadItemGetStatus";
  if (id == 0x000009D0) return "XamBackgroundDownloadHistoryGetItem";
  if (id == 0x000009D1) return "XamBackgroundDownloadItemGetHistoryStatus";
  if (id == 0x000009D2) return "XamBackgroundDownloadItemSetHistoryStatus";
  if (id == 0x000009D3) return "XamBackgroundDownloadItemGetStatusAsync";
  if (id == 0x000009D4) return "XamBackgroundDownloadItemGetStatusEx";
  if (id == 0x000009D5) return "XamBackgroundDownloadItemGetHistoryStatusEx";
  if (id == 0x000009D6) return "XamBackgroundDownloadBindItems";
  if (id == 0x000009D7) return "XamBackgroundDownloadSetPollingActive";
  if (id == 0x000009D8) return "XamBackgroundDownloadGetPollingActive";
  if (id == 0x000009D9) return "XamBackgroundDownloadGetMode";
  if (id == 0x000009DA) return "XamBackgroundDownloadGetUnexpectedChangeCount";
  if (id == 0x000009DB) return "XamBackgroundDownloadIsItemForThisConsole";
  if (id == 0x000009DC) return "XamBackgroundDownloadSelectDevice";
  if (id == 0x000009DD) return "XamBackgroundDownloadItemModify";
  if (id == 0x000009DE) return "XamBackgroundDownloadCacheLegacyMappingInfo";
  if (id == 0x000009DF) return "XamBackgroundDownloadGetLegacyMappingInfo";
  if (id == 0x000009E0) return "XamBackgroundDownloadGetLegacyId";
  if (id == 0x000009E1) return "XamBackgroundDownloadDoFail";
  if (id == 0x000009E2) return "XamDownloadSingleItem";
  if (id == 0x000009E3) return "XamDownloadInSingleItemMode";
  if (id == 0x00000A28) return "XamSwapDisc";
  if (id == 0x00000A29) return "XamSwapDiscPatchAddress";
  if (id == 0x00000A2A) return "XamSwapCancel";
  if (id == 0x00000A2B) return "XamContentSetAttributes";
  if (id == 0x00000A32) return "XamRamDriveCreate";
  if (id == 0x00000A33) return "XamRamDriveDestroy";
  if (id == 0x00000A5A) return "XamPlayTimerGetData";
  if (id == 0x00000A5B) return "XamPlayTimerSetData";
  if (id == 0x00000A5C) return "XamPlayTimerResume";
  if (id == 0x00000A5D) return "XamPlayTimerSuspend";
  if (id == 0x00000A5E) return "XamPlayTimerIsRunning";
  if (id == 0x00000A5F) return "XamPlayTimerIsEnabled";
  if (id == 0x00000A60) return "XamPlayTimerGetNextResetDate";
  if (id == 0x00000A61) return "XamPlayTimerFormatDurationString";
  if (id == 0x00000A62) return "XamPlayTimerGetTimeRemaining";
  if (id == 0x00000A63) return "XamPlayTimerUpdateTimeRemaining";
  if (id == 0x00000A64) return "XamPlayTimerForceNotification";
  if (id == 0x00000A65) return "XamPlayTimerRefreshResetDate";
  if (id == 0x00000A66) return "XuiResourceOpenAndVerifyNoLoc";
  if (id == 0x00000A6E) return "UpnpAVServerSearchInitialize";
  if (id == 0x00000A6F) return "UpnpAVServerSearchDestroy";
  if (id == 0x00000A70) return "UpnpAVServerSearchStart";
  if (id == 0x00000A71) return "Destroy";
  if (id == 0x00000A72) return "UpnpAVServerSearchDoWork";
  if (id == 0x00000A73) return "UpnpAVServerSearchGetNextServer";
  if (id == 0x00000A8C) return "XCustomBroadcastGamercardEvent";
  if (id == 0x00000A8D) return "XamCustomGetCurrentActions";
  if (id == 0x00000AA0) return "XamInstrumentationLogEvent";
  if (id == 0x00000AA1) return "XamRegisterSMCNotification";
  if (id == 0x00000AA8) return "XamIsScreenSaverActive";
  if (id == 0x00000AAA) return "XamInstrumentationLogEventEx";
  if (id == 0x00000AAB) return "XamInstrumentationGetSourceConfig";
  if (id == 0x00000AAC) return "XamInstrumentationDebugConfig";
  if (id == 0x00000ADC) return "CurlCreateCacheEntry";
  if (id == 0x00000ADD) return "CurlOpenCacheEntry";
  if (id == 0x00000ADE) return "CurlSetCacheEntryExpireTime";
  if (id == 0x00000ADF) return "CurlReadCacheEntryHeaders";
  if (id == 0x00000AE0) return "CurlReadCacheEntryContent";
  if (id == 0x00000AE1) return "CurlWriteCacheEntryContent";
  if (id == 0x00000AE2) return "CurlCloseCacheEntry";
  if (id == 0x00000AE3) return "CurlEnumerateCacheEntry";
  if (id == 0x00000AE5) return "CurlWipeBackingFiles";
  if (id == 0x00000AE7) return "CurlOpenTitleBackingFile";
  if (id == 0x00000AEA) return "XamUserIsPartialProfile";
  if (id == 0x00000AEB) return "XamLocateTitle";
  if (id == 0x00000AEC) return "XamProfileGetLocalTitleCount";
  if (id == 0x00000AED) return "XamContentRemoveCacheDevice";
  if (id == 0x00000AEE) return "XamContentAddCacheDevice";
  if (id == 0x00000AF0) return "XamSetSecurityViolationDetected";
  if (id == 0x00000AF1) return "XamIsSecurityViolationDetected";
  if (id == 0x00000AF2) return "XamIsAnySecurityViolationDetected";
  if (id == 0x00000AF3) return "XamGetSecurityViolationsDetected";
  if (id == 0x00000AF4) return "XamActivateCounterMeasure";
  if (id == 0x00000AF5) return "XamDeactivateCounterMeasure";
  if (id == 0x00000AF6) return "XamIsCounterMeasureActivated";
  if (id == 0x00000AF7) return "XamGetActiveCounterMeasures";
  if (id == 0x00000AF8) return "XamPmdIdentify";
  if (id == 0x00000AF9) return "XamPmdSendCommand";
  if (id == 0x00000AFA) return "XamPmdReadReport";
  if (id == 0x00000AFC) return "XamPartyCreate";
  if (id == 0x00000AFD) return "XamPartyLeave";
  if (id == 0x00000AFE) return "XamPartySendInviteDeprecated";
  if (id == 0x00000AFF) return "XamPartyGetUserList";
  if (id == 0x00000B00) return "XamPartySendGameInvites";
  if (id == 0x00000B01) return "XamPartyJoin";
  if (id == 0x00000B02) return "XamPartyKickUser";
  if (id == 0x00000B03) return "XamPartyAddLocalUsers";
  if (id == 0x00000B04) return "XamConvertEmoticons";
  if (id == 0x00000B05) return "XamGetLocaleTimeFormat";
  if (id == 0x00000B06) return "XamPartyRemoveLocalUsers";
  if (id == 0x00000B07) return "XamPartyGetUserListInternal";
  if (id == 0x00000B08) return "XamPartySetJoinable";
  if (id == 0x00000B09) return "XamPartyGetJoinable";
  if (id == 0x00000B0A) return "XamPartyGetInfo";
  if (id == 0x00000B0B) return "XamPartySetCustomData";
  if (id == 0x00000B0C) return "XamPartySetConnectivityGraph";
  if (id == 0x00000B0D) return "XamPartyGetRoutingTable";
  if (id == 0x00000B0E) return "XamPartyAutomationInprocCall";
  if (id == 0x00000B0F) return "XamPartyGetState";
  if (id == 0x00000B10) return "XamPartyGetBandwidth";
  if (id == 0x00000B11) return "XamPartyGetNetworkCounters";
  if (id == 0x00000B12) return "XamShowQuickLaunchUI";
  if (id == 0x00000B13) return "XamPartyIsCoordinator";
  if (id == 0x00000B14) return "XamPartyGetFormation";
  if (id == 0x00000B15) return "XamPartySendInvite";
  if (id == 0x00000B16) return "XamPartySetTestDelay";
  if (id == 0x00000B17) return "XamPartyOverrideNatType";
  if (id == 0x00000B18) return "XamPartyGetAccessLevel";
  if (id == 0x00000B19) return "XamPartySetTestFlags";
  if (id == 0x00000B1A) return "XamIsSystemExperienceTitleId";
  if (id == 0x00000B1B) return "XamPartyJoinEx";
  if (id == 0x00000B1C) return "XamPartyGetInfoEx";
  if (id == 0x00000B20) return "XamIsCurrentTitleDatacenterClient";
  if (id == 0x00000B22) return "XamTaskSetCancelSubTasks";
  if (id == 0x00000B23) return "XamTaskGetCompletionStatus";
  if (id == 0x00000B24) return "XamTaskCancelWaitAndCloseWaitTask";
  if (id == 0x00000B27) return "XamDataCenterLog";
  if (id == 0x00000B28) return "XamDataCenterGetDhcpOptionResponseHostnameAndPort";
  if (id == 0x00000B29) return "XamDataCenterLogEvent";
  if (id == 0x00000B2A) return "XamDataCenterShowForceSignInMessage";
  if (id == 0x00000B2C) return "XamWebInstrumentationCreateReport";
  if (id == 0x00000B2D) return "XamWebInstrumentationSetUserVar";
  if (id == 0x00000B2E) return "XamWebInstrumentationSetUserVarNoEscape";
  if (id == 0x00000B2F) return "XamWebInstrumentationGetURL";
  if (id == 0x00000B30) return "XamWebInstrumentationSendReport";
  if (id == 0x00000B31) return "XamWebInstrumentationDestroyReport";
  if (id == 0x00000B32) return "XamWebInstrumentationCreateSampledReport";
  if (id == 0x00000B33) return "XampSetSamplingRandomValue";
  if (id == 0x00000B34) return "XampWebInstrumentationSetProfileCounts";
  if (id == 0x00000B35) return "XamWebInstrumentationGetURLEx";
  if (id == 0x00000B36) return "XampSetOmnitureCallbackFunction";
  if (id == 0x00000B37) return "XamShowQuickChatUIp";
  if (id == 0x00000B38) return "XamShowSocialPostUI";
  if (id == 0x00000B39) return "XamShowBeaconsUI";
  if (id == 0x00000B3A) return "XamShowMarketplacePurchaseOrderUI";
  if (id == 0x00000B3B) return "XamShowMarketplaceGetOrderReceipts";
  if (id == 0x00000B3C) return "XamShowGenericOnlineAppUI";
  if (id == 0x00000B3D) return "XamUserAllowedToPostToSocialNetwork";
  if (id == 0x00000B3E) return "XamShowMarketplacePurchaseOrderUIEx";
  if (id == 0x00000B3F) return "DebugXamShowMessageBoxUI_Wait";
  if (id == 0x00000B43) return "XamSetCountry";
  if (id == 0x00000B44) return "XamIsCurrentTitleDatacenterDash";
  if (id == 0x00000B45) return "XamLoaderRebootToServerDash";
  if (id == 0x00000B46) return "XamIsDataCenterMode";
  if (id == 0x00000B48) return "XamUserGetXUIDForTFA";
  if (id == 0x00000B4A) return "XamVerifyXSignerSignature";
  
  return nullptr;
}

const char* xapiNameGen(int id)
{
  if (id == 0x00000001) return "XapiProcessHeap";
  if (id == 0x00000002) return "_locktable";
  if (id == 0x00000003) return "__tlsindexXapi";
  if (id == 0x00000004) return "XapiTermHeapNoop";
  if (id == 0x00000005) return "XapiDebugHeap";

  return nullptr;
}

const char* xbdmNameGen_1640(int id)
{
  if (id == 0x00000001) return "DmAllocatePool";
  if (id == 0x00000002) return "DmAllocatePoolWithTag";
  if (id == 0x00000003) return "DmCloseCounters";
  if (id == 0x00000004) return "DmCloseModuleSections";
  if (id == 0x00000005) return "DmCloseModuleSections";
  if (id == 0x00000006) return "DmCloseNotificationSession";
  if (id == 0x00000007) return "DmClosePerformanceCounter";
  if (id == 0x00000008) return "DmContinueThread";
  if (id == 0x00000009) return "DmFreePool";
  if (id == 0x0000000A) return "DmGetMemory";
  if (id == 0x0000000B) return "DmGetModuleLongName";
  if (id == 0x0000000C) return "DmGetProcAddress";
  if (id == 0x0000000D) return "DmGetThreadContext";
  if (id == 0x0000000F) return "DmGetThreadList";
  if (id == 0x00000010) return "DmGetXbeInfo";
  if (id == 0x00000011) return "DmGetXboxName";
  if (id == 0x00000013) return "DmGo";
  if (id == 0x00000014) return "DmHaltThread";
  if (id == 0x00000015) return "DmIsDebuggerPresent";
  if (id == 0x00000016) return "DmIsThreadStopped";
  if (id == 0x00000017) return "DmLoadExtension";
  if (id == 0x00000018) return "DmNotify";
  if (id == 0x00000019) return "DmOpenNotificationSession";
  if (id == 0x0000001A) return "DmOpenPerformanceCounter";
  if (id == 0x0000001B) return "DmQueryPerformanceCounterHandle";
  if (id == 0x0000001C) return "DmReboot";
  if (id == 0x0000001E) return "DmRegisterCommandProcessor";
  if (id == 0x00000020) return "DmRegisterNotificationProcessor";
  if (id == 0x00000021) return "DmRegisterPerformanceCounter";
  if (id == 0x00000022) return "DmRemoveBreakpoint";
  if (id == 0x00000023) return "DmResumeThread";
  if (id == 0x00000024) return "DmSendNotificationString";
  if (id == 0x00000025) return "DmSetBreakpoint";
  if (id == 0x00000026) return "DmSetDataBreakpoint";
  if (id == 0x00000027) return "DmSetInitialBreakpoint";
  if (id == 0x00000028) return "DmSetMemory";
  if (id == 0x00000029) return "DmSetThreadContext";
  if (id == 0x0000002A) return "DmSetTitle";
  if (id == 0x0000002B) return "DmSetXboxName";
  if (id == 0x0000002D) return "DmStop";
  if (id == 0x0000002E) return "DmStopOn";
  if (id == 0x00000030) return "DmSuspendThread";
  if (id == 0x00000031) return "DmThreadUserData";
  if (id == 0x00000032) return "DmUnloadExtension";
  if (id == 0x00000033) return "DmWalkLoadedModules";
  if (id == 0x00000034) return "DmWalkModuleSections";
  if (id == 0x00000035) return "DmWalkPerformanceCounters";
  if (id == 0x00000037) return "DmCloseCounters";
  if (id == 0x00000038) return "DmIsBreakpoint";
  if (id == 0x00000039) return "DmCloseCounters";
  if (id == 0x0000003A) return "DmSetUserAccess";
  if (id == 0x0000003B) return "DmGetUserAccess";
  if (id == 0x0000003C) return "DmWalkUserList";
  if (id == 0x0000003D) return "DmAddUser";
  if (id == 0x0000003E) return "DmEnableSecurity";
  if (id == 0x0000003F) return "DmIsSecurityEnabled";
  if (id == 0x00000040) return "DmRemoveUser";
  if (id == 0x00000041) return "__CAP_Start_Profiling";
  if (id == 0x00000042) return "__CAP_End_Profiling";
  if (id == 0x00000046) return "__CAP_Enter_Function";
  if (id == 0x00000047) return "__CAP_Exit_Function";
  if (id == 0x00000048) return "DmRegisterCommandProcessorEx";
  if (id == 0x00000049) return "DmStartProfiling";
  if (id == 0x0000004A) return "DmStopProfiling";
  if (id == 0x0000004B) return "DmQueryMemoryStatistics";
  if (id == 0x0000004C) return "DmEnableStackTrace";
  if (id == 0x0000004D) return "DmQueryAllocationTypeName";
  if (id == 0x0000004E) return "DmRegisterAllocationType";
  if (id == 0x0000004F) return "DmInsertAllocationEntry";
  if (id == 0x00000050) return "DmRemoveAllocationEntry";
  if (id == 0x00000051) return "DmSetTitleEx";
  if (id == 0x00000052) return "DmCaptureStackBackTrace";
  if (id == 0x00000053) return "DmCrashDump";
  if (id == 0x00000054) return "DmIsFastCAPEnabled";
  if (id == 0x00000055) return "DmGetFileAccessCount";
  if (id == 0x00000058) return "HrGetUtilityDriveInfo";
  if (id == 0x00000059) return "DmGetThreadInfoEx";
  if (id == 0x0000005A) return "DmSetProfilingOptions";
  if (id == 0x0000005B) return "DmQuerySystemSettings";
  if (id == 0x0000005C) return "DmSaveSystemSettings";
  if (id == 0x0000006A) return "DmpGetPgoModuleHandleForBaseAddress";
  if (id == 0x0000006B) return "DmpOnPgoModuleLoad";
  if (id == 0x0000006C) return "DmPgoStartDataCollection";
  if (id == 0x0000006D) return "DmPgoStopDataCollection";
  if (id == 0x0000006E) return "DmPgoSaveSnapshot";
  if (id == 0x0000006F) return "IrtClientAbort";
  if (id == 0x00000070) return "IrtPogoInit";
  if (id == 0x00000071) return "IrtSetStaticInfo";
  if (id == 0x00000072) return "IrtAutoSweepW";
  if (id == 0x00000073) return "IrtAutoSweepA";
  if (id == 0x00000075) return "DmGetDumpMode";
  if (id == 0x00000076) return "DmSetDumpMode";
  if (id == 0x00000077) return "DmGetDumpSettings";
  if (id == 0x00000078) return "DmSetDumpSettings";
  if (id == 0x00000079) return "DmGetEventDeferFlags";
  if (id == 0x0000007A) return "DmSetEventDeferFlags";
  if (id == 0x0000007B) return "DmWalkCommittedMemory";
  if (id == 0x0000007C) return "DmCloseCounters";
  if (id == 0x0000007D) return "DmRebootEx";
  if (id == 0x0000007E) return "?PEPLELookup@@YIPAUEPLE@@PAUPGCHDR@@PAUEPLH@@K@Z";
  if (id == 0x0000007F) return "?PVPLELookup@@YIPA_KPAUPGCHDR@@PAUVPLH@@_K@Z";
  if (id == 0x00000080) return "?PVPLETemplatedLookup@@YIPA_KPAUPGCHDR@@PAUVPLH@@_KPAUtagPOGOVALUETEMPLATE@@@Z";
  if (id == 0x00000081) return "?PVPLEFilteredLookup@@YIPA_KPAUPGCHDR@@PAUVPLH@@_K@Z";

  return nullptr;
}

const char* xbdmNameGen_1838(int id)
{
  if (id == 0x00000001) return "DmAllocatePool";
  if (id == 0x00000002) return "DmAllocatePoolWithTag";
  if (id == 0x00000003) return "DmCloseCounters";
  if (id == 0x00000004) return "DmCloseModuleSections";
  if (id == 0x00000005) return "DmCloseModuleSections";
  if (id == 0x00000006) return "DmCloseNotificationSession";
  if (id == 0x00000007) return "DmClosePerformanceCounter";
  if (id == 0x00000008) return "DmContinueThread";
  if (id == 0x00000009) return "DmFreePool";
  if (id == 0x0000000A) return "DmGetMemory";
  if (id == 0x0000000B) return "DmGetModuleLongName";
  if (id == 0x0000000C) return "DmGetProcAddress";
  if (id == 0x0000000D) return "DmGetThreadContext";
  if (id == 0x0000000F) return "DmGetThreadList";
  if (id == 0x00000010) return "DmGetXbeInfo";
  if (id == 0x00000011) return "DmGetXboxName";
  if (id == 0x00000013) return "DmGo";
  if (id == 0x00000014) return "DmHaltThread";
  if (id == 0x00000015) return "DmIsDebuggerPresent";
  if (id == 0x00000016) return "DmIsThreadStopped";
  if (id == 0x00000017) return "DmLoadExtension";
  if (id == 0x00000018) return "DmNotify";
  if (id == 0x00000019) return "DmOpenNotificationSession";
  if (id == 0x0000001A) return "DmOpenPerformanceCounter";
  if (id == 0x0000001B) return "DmQueryPerformanceCounterHandle";
  if (id == 0x0000001C) return "DmReboot";
  if (id == 0x0000001E) return "DmRegisterCommandProcessor";
  if (id == 0x00000020) return "DmRegisterNotificationProcessor";
  if (id == 0x00000021) return "DmRegisterPerformanceCounter";
  if (id == 0x00000022) return "DmRemoveBreakpoint";
  if (id == 0x00000023) return "DmResumeThread";
  if (id == 0x00000024) return "DmSendNotificationString";
  if (id == 0x00000025) return "DmSetBreakpoint";
  if (id == 0x00000026) return "DmSetDataBreakpoint";
  if (id == 0x00000027) return "DmSetInitialBreakpoint";
  if (id == 0x00000028) return "DmSetMemory";
  if (id == 0x00000029) return "DmSetThreadContext";
  if (id == 0x0000002A) return "DmSetTitle";
  if (id == 0x0000002B) return "DmSetXboxName";
  if (id == 0x0000002D) return "DmStop";
  if (id == 0x0000002E) return "DmStopOn";
  if (id == 0x00000030) return "DmSuspendThread";
  if (id == 0x00000031) return "DmThreadUserData";
  if (id == 0x00000032) return "DmUnloadExtension";
  if (id == 0x00000033) return "DmWalkLoadedModules";
  if (id == 0x00000034) return "DmWalkModuleSections";
  if (id == 0x00000035) return "DmWalkPerformanceCounters";
  if (id == 0x00000037) return "DmCloseCounters";
  if (id == 0x00000038) return "DmIsBreakpoint";
  if (id == 0x00000039) return "DmCloseCounters";
  if (id == 0x0000003A) return "DmSetUserAccess";
  if (id == 0x0000003B) return "DmGetUserAccess";
  if (id == 0x0000003C) return "DmWalkUserList";
  if (id == 0x0000003D) return "DmAddUser";
  if (id == 0x0000003E) return "DmEnableSecurity";
  if (id == 0x0000003F) return "DmIsSecurityEnabled";
  if (id == 0x00000040) return "DmRemoveUser";
  if (id == 0x00000041) return "__CAP_Start_Profiling";
  if (id == 0x00000042) return "__CAP_End_Profiling";
  if (id == 0x00000046) return "__CAP_Enter_Function";
  if (id == 0x00000047) return "__CAP_Exit_Function";
  if (id == 0x00000048) return "DmRegisterCommandProcessorEx";
  if (id == 0x00000049) return "DmStartProfiling";
  if (id == 0x0000004A) return "DmStopProfiling";
  if (id == 0x0000004B) return "DmQueryMemoryStatistics";
  if (id == 0x0000004C) return "DmEnableStackTrace";
  if (id == 0x0000004D) return "DmQueryAllocationTypeName";
  if (id == 0x0000004E) return "DmRegisterAllocationType";
  if (id == 0x0000004F) return "DmInsertAllocationEntry";
  if (id == 0x00000050) return "DmRemoveAllocationEntry";
  if (id == 0x00000051) return "DmSetTitleEx";
  if (id == 0x00000052) return "DmCaptureStackBackTrace";
  if (id == 0x00000053) return "DmCrashDump";
  if (id == 0x00000054) return "DmIsFastCAPEnabled";
  if (id == 0x00000055) return "DmGetFileAccessCount";
  if (id == 0x00000058) return "HrGetUtilityDriveInfo";
  if (id == 0x00000059) return "DmGetThreadInfoEx";
  if (id == 0x0000005A) return "DmSetProfilingOptions";
  if (id == 0x0000005B) return "DmQuerySystemSettings";
  if (id == 0x0000005C) return "DmSaveSystemSettings";
  if (id == 0x0000006A) return "DmpGetPgoModuleHandleForBaseAddress";
  if (id == 0x0000006B) return "DmpOnPgoModuleLoad";
  if (id == 0x0000006C) return "DmPgoStartDataCollection";
  if (id == 0x0000006D) return "DmPgoStopDataCollection";
  if (id == 0x0000006E) return "DmPgoSaveSnapshot";
  if (id == 0x0000006F) return "IrtClientAbort";
  if (id == 0x00000070) return "IrtPogoInit";
  if (id == 0x00000071) return "IrtSetStaticInfo";
  if (id == 0x00000072) return "IrtAutoSweepW";
  if (id == 0x00000073) return "IrtAutoSweepA";
  if (id == 0x00000075) return "DmGetDumpMode";
  if (id == 0x00000076) return "DmSetDumpMode";
  if (id == 0x00000077) return "DmGetDumpSettings";
  if (id == 0x00000078) return "DmSetDumpSettings";
  if (id == 0x00000079) return "DmGetEventDeferFlags";
  if (id == 0x0000007A) return "DmSetEventDeferFlags";
  if (id == 0x0000007B) return "DmWalkCommittedMemory";
  if (id == 0x0000007C) return "DmCloseCounters";
  if (id == 0x0000007D) return "DmRebootEx";
  if (id == 0x0000007E) return "?PEPLELookup@@YIPAUEPLE@@PAUPGCHDR@@PAUEPLH@@K@Z";
  if (id == 0x0000007F) return "?PVPLELookup@@YIPA_KPAUPGCHDR@@PAUVPLH@@_K@Z";
  if (id == 0x00000080) return "?PVPLETemplatedLookup@@YIPA_KPAUPGCHDR@@PAUVPLH@@_KPAUtagPOGOVALUETEMPLATE@@@Z";
  if (id == 0x00000081) return "?PVPLEFilteredLookup@@YIPA_KPAUPGCHDR@@PAUVPLH@@_K@Z";
  if (id == 0x00000082) return "DmMountFdfxVolume";

  return nullptr;
}

const char* xbdmNameGen(int id, int version)
{
  if (version > 0) {
    if (version <= 1640) return xbdmNameGen_1640(id);
    // 1746 & 1838 seem to be the same
    if (version <= 1838) return xbdmNameGen_1838(id);
  }

  if (id == 0x00000001) return "DmAllocatePool";
  if (id == 0x00000002) return "DmAllocatePoolWithTag";
  if (id == 0x00000003) return "DmCloseCounters";
  if (id == 0x00000004) return "DmCloseLoadedModules";
  if (id == 0x00000005) return "DmCloseModuleSections";
  if (id == 0x00000006) return "DmCloseNotificationSession";
  if (id == 0x00000007) return "DmClosePerformanceCounter";
  if (id == 0x00000008) return "DmContinueThread";
  if (id == 0x00000009) return "DmFreePool";
  if (id == 0x0000000A) return "DmGetMemory";
  if (id == 0x0000000B) return "DmGetModuleLongName";
  if (id == 0x0000000C) return "DmGetProcAddress";
  if (id == 0x0000000D) return "DmGetThreadContext";
  if (id == 0x0000000F) return "DmGetThreadList";
  if (id == 0x00000010) return "DmGetXbeInfo";
  if (id == 0x00000011) return "DmGetXboxName";
  if (id == 0x00000013) return "DmGo";
  if (id == 0x00000014) return "DmHaltThread";
  if (id == 0x00000015) return "DmIsDebuggerPresent";
  if (id == 0x00000016) return "DmIsThreadStopped";
  if (id == 0x00000017) return "DmLoadExtension";
  if (id == 0x00000018) return "DmNotify";
  if (id == 0x00000019) return "DmOpenNotificationSession";
  if (id == 0x0000001A) return "DmOpenPerformanceCounter";
  if (id == 0x0000001B) return "DmQueryPerformanceCounterHandle";
  if (id == 0x0000001C) return "DmReboot";
  if (id == 0x0000001E) return "DmRegisterCommandProcessor";
  if (id == 0x00000020) return "DmRegisterNotificationProcessor";
  if (id == 0x00000021) return "DmRegisterPerformanceCounter";
  if (id == 0x00000022) return "DmRemoveBreakpoint";
  if (id == 0x00000023) return "DmResumeThread";
  if (id == 0x00000024) return "DmSendNotificationString";
  if (id == 0x00000025) return "DmSetBreakpoint";
  if (id == 0x00000026) return "DmSetDataBreakpoint";
  if (id == 0x00000027) return "DmSetInitialBreakpoint";
  if (id == 0x00000028) return "DmSetMemory";
  if (id == 0x00000029) return "DmSetThreadContext";
  if (id == 0x0000002A) return "DmSetTitle";
  if (id == 0x0000002B) return "DmSetXboxName";
  if (id == 0x0000002D) return "DmStop";
  if (id == 0x0000002E) return "DmStopOn";
  if (id == 0x00000030) return "DmSuspendThread";
  if (id == 0x00000031) return "DmThreadUserData";
  if (id == 0x00000032) return "DmUnloadExtension";
  if (id == 0x00000033) return "DmWalkLoadedModules";
  if (id == 0x00000034) return "DmWalkModuleSections";
  if (id == 0x00000035) return "DmWalkPerformanceCounters";
  if (id == 0x00000037) return "DmCloseCounters_0";
  if (id == 0x00000038) return "DmIsBreakpoint";
  if (id == 0x00000039) return "DmCloseCounters_1";
  if (id == 0x0000003A) return "DmSetUserAccess";
  if (id == 0x0000003B) return "DmGetUserAccess";
  if (id == 0x0000003C) return "DmWalkUserList";
  if (id == 0x0000003D) return "DmAddUser";
  if (id == 0x0000003E) return "DmEnableSecurity";
  if (id == 0x0000003F) return "DmIsSecurityEnabled";
  if (id == 0x00000040) return "DmRemoveUser";
  if (id == 0x00000041) return "__CAP_Start_Profiling";
  if (id == 0x00000042) return "__CAP_End_Profiling";
  if (id == 0x00000046) return "__CAP_Enter_Function";
  if (id == 0x00000047) return "__CAP_Exit_Function";
  if (id == 0x00000048) return "DmRegisterCommandProcessorEx";
  if (id == 0x00000049) return "DmStartProfiling";
  if (id == 0x0000004A) return "DmStopProfiling";
  if (id == 0x0000004B) return "DmQueryMemoryStatistics";
  if (id == 0x0000004C) return "DmEnableStackTrace";
  if (id == 0x0000004D) return "DmQueryAllocationTypeName";
  if (id == 0x0000004E) return "DmRegisterAllocationType";
  if (id == 0x0000004F) return "DmInsertAllocationEntry";
  if (id == 0x00000050) return "DmRemoveAllocationEntry";
  if (id == 0x00000051) return "DmSetTitleEx";
  if (id == 0x00000052) return "DmCaptureStackBackTrace";
  if (id == 0x00000053) return "DmCrashDump";
  if (id == 0x00000054) return "DmIsFastCAPEnabled";
  if (id == 0x00000055) return "DmGetFileAccessCount";
  if (id == 0x00000058) return "DmGetUtilityDriveInfo";
  if (id == 0x00000059) return "DmGetThreadInfoEx";
  if (id == 0x0000005A) return "DmSetProfilingOptions";
  if (id == 0x0000005B) return "DmQuerySystemSettings";
  if (id == 0x0000005C) return "DmSaveSystemSettings";
  if (id == 0x0000006A) return "DmpGetPgoModuleHandleForBaseAddress";
  if (id == 0x0000006B) return "DmpOnPgoModuleLoad";
  if (id == 0x0000006C) return "DmPgoStartDataCollection";
  if (id == 0x0000006D) return "DmPgoStopDataCollection";
  if (id == 0x0000006E) return "DmPgoSaveSnapshot";
  if (id == 0x0000006F) return "IrtClientAbort";
  if (id == 0x00000070) return "IrtPogoInit";
  if (id == 0x00000071) return "IrtSetStaticInfo";
  if (id == 0x00000072) return "IrtAutoSweepW";
  if (id == 0x00000073) return "IrtAutoSweepA";
  if (id == 0x00000075) return "DmGetDumpMode";
  if (id == 0x00000076) return "DmSetDumpMode";
  if (id == 0x00000077) return "DmGetDumpSettings";
  if (id == 0x00000078) return "DmSetDumpSettings";
  if (id == 0x00000079) return "DmGetEventDeferFlags";
  if (id == 0x0000007A) return "DmSetEventDeferFlags";
  if (id == 0x0000007B) return "DmWalkCommittedMemory";
  if (id == 0x0000007C) return "DmCloseCounters_2";
  if (id == 0x0000007D) return "DmRebootEx";
  if (id == 0x00000082) return "DmMountFdfxVolume";
  if (id == 0x00000083) return "DmCapGetFileHeader";
  if (id == 0x00000084) return "DmCapFreeFileHeader";
  if (id == 0x00000085) return "DmTraceStartRecording";
  if (id == 0x00000086) return "DmTraceStartRecordingFunction";
  if (id == 0x00000087) return "DmTraceSetBufferSize";
  if (id == 0x00000088) return "DmTraceStopRecording";
  if (id == 0x00000089) return "DmTraceSaveBuffer";
  if (id == 0x0000008C) return "DmGetConsoleType";
  if (id == 0x0000008D) return "DmMapDevkitDrive";
  if (id == 0x0000008E) return "DmWalkLoadedModulesEx";
  if (id == 0x0000008F) return "DmGetXexHeaderField";
  if (id == 0x00000090) return "DmGetMouseChanges";
  if (id == 0x00000091) return "DmFindPdbSignature";
  if (id == 0x00000092) return "DmGetProfilingStatus";
  if (id == 0x00000093) return "DmOpticalDiscLogStart";
  if (id == 0x00000094) return "DmOpticalDiscLogStop";
  if (id == 0x00000095) return "DmStartSamplingProfiler";
  if (id == 0x00000096) return "DmStopSamplingProfiler";
  if (id == 0x00000097) return "DmGetSamplingProfilerInfo";
  if (id == 0x00000098) return "DmStartFileEventCapture";
  if (id == 0x00000099) return "DmStopFileEventCapture";
  if (id == 0x0000009A) return "DmSetFileEventMarker";
  if (id == 0x0000009B) return "DmMarkPseudoCreateBegin";
  if (id == 0x0000009C) return "DmMarkPseudoCreateEnd";
  if (id == 0x0000009D) return "DmMarkPseudoEventBegin";
  if (id == 0x0000009E) return "DmMarkPseudoEventEnd";
  if (id == 0x0000009F) return "DmMarkFileEventWorkerThreadBegin";
  if (id == 0x000000A0) return "DmMarkFileEventWorkerThreadEnd";
  if (id == 0x000000A1) return "DmGetSystemInfo";
  if (id == 0x000000A2) return "DmAbortProfiling";
  if (id == 0x000000A3) return "DmNetCaptureStart";
  if (id == 0x000000A4) return "DmNetCaptureStop";
  if (id == 0x000000A5) return "DmQueryTitleMemoryStatistics";
  if (id == 0x000000A6) return "DmAutomationGetInputProcess";
  if (id == 0x000000A7) return "DmAutomationBindController";
  if (id == 0x000000A8) return "DmAutomationUnbindController";
  if (id == 0x000000A9) return "DmAutomationConnectController";
  if (id == 0x000000AA) return "DmAutomationDisconnectController";
  if (id == 0x000000AB) return "DmAutomationSetGamepadState";
  if (id == 0x000000AC) return "DmAutomationQueueGamepadState";
  if (id == 0x000000AD) return "DmAutomationClearGamepadQueue";
  if (id == 0x000000AE) return "DmAutomationQueryGamepadQueue";
  if (id == 0x000000AF) return "DmAutomationGetUserDefaultProfile";
  if (id == 0x000000B0) return "DmAutomationSetUserDefaultProfile";
  if (id == 0x000000B1) return "DmTraceIsRecording";
  if (id == 0x000000B2) return "DmLoadDebuggerExtension";
  if (id == 0x000000B3) return "DmUnloadDebuggerExtension";
  if (id == 0x000000B4) return "DmCreateSystemThread";
  if (id == 0x000000B5) return "PEPLELookup";
  if (id == 0x000000B6) return "PEPLELookupCompact";
  if (id == 0x000000B7) return "PVPLELookup";
  if (id == 0x000000B8) return "PVPLELookupCompact";
  if (id == 0x000000B9) return "PVPLELookupCompactMDS";
  if (id == 0x000000BA) return "PVPLEFilteredLookup";
  if (id == 0x000000BB) return "PVPLEFilteredLookupCompact";
  if (id == 0x000000BC) return "PVPLEFilteredLookupCompactMDS";
  if (id == 0x000000BD) return "PVPLETemplatedLookup";
  if (id == 0x000000BE) return "PVPLETemplatedLookupCompact";
  if (id == 0x000000BF) return "PVPLETemplatedLookupCompactMDS";
  if (id == 0x000000C0) return "DmpPgoCounterOverflow";
  if (id == 0x000000C1) return "UpdateMDSProbeState";
  if (id == 0x000000C2) return "DmGetHttpRegistration";
  if (id == 0x000000C3) return "DmTraceSetIOThread";
  if (id == 0x000000C4) return "DmPMCInstallAndStart";
  if (id == 0x000000C5) return "DmPMCStopAndReport";
  if (id == 0x000000C6) return "DmPMCInstallSetup";
  if (id == 0x000000C7) return "DmPMCUnInstallSetup";
  if (id == 0x000000C8) return "DmPMCResetCounters";
  if (id == 0x000000C9) return "DmPMCSetTriggerProcessor";
  if (id == 0x000000CA) return "DmPMCStart";
  if (id == 0x000000CB) return "DmPMCStop";
  if (id == 0x000000CC) return "DmPMCGetCounter";
  if (id == 0x000000CD) return "DmPMCGetCounters";
  if (id == 0x000000CE) return "DmPMCGetCounterName";
  if (id == 0x000000CF) return "DmPMCDumpCounters";
  if (id == 0x000000D0) return "DmPMCDumpCountersVerbose";
  if (id == 0x000000D1) return "DmPMCGetCounterCostEstimate";
  if (id == 0x000000D2) return "DmPMCGetCounterSource";
  if (id == 0x000000D3) return "DmPMCComputeFrequency";
  if (id == 0x000000D4) return "DmGetAdditionalTitleMemorySetting";
  if (id == 0x000000D5) return "DmGetDebugMemorySize";
  if (id == 0x000000D6) return "DmGetConsoleDebugMemoryStatus";
  if (id == 0x000000D7) return "DmNetSimSetLinkStatusHidden";
  if (id == 0x000000D8) return "DmNetSimInsertQueue";
  if (id == 0x000000D9) return "DmNetSimRemoveQueue";
  if (id == 0x000000DA) return "DmNetSimRemoveAllQueues";
  if (id == 0x000000DB) return "DmNetSimModifyQueueSettings";
  if (id == 0x000000DC) return "DmGetConsoleFeatures";
  if (id == 0x000000DD) return "DmNetSimGetQueueStats";
  if (id == 0x000000DE) return "DmNetSimGetQueueSettings";
  if (id == 0x000000DF) return "DmNetSimGetNumQueues";
  if (id == 0x000000E0) return "DmNetSimInsertIpv4Redirect";
  if (id == 0x000000E1) return "DmNetSimRemoveIpv4Redirect";
  if (id == 0x000000E2) return "DmNetSimGetNumIpv4Redirects";
  if (id == 0x0000012C) return "XLFAllocate";
  if (id == 0x0000012D) return "XLFFree";
  if (id == 0x0000012E) return "XLFQueueAdd";
  if (id == 0x0000012F) return "XLFQueueAllocated";
  if (id == 0x00000130) return "XLFQueueCreate";
  if (id == 0x00000131) return "XLFQueueDestroy";
  if (id == 0x00000132) return "XLFQueueGetEntryCount";
  if (id == 0x00000133) return "XLFQueueIsEmpty";
  if (id == 0x00000134) return "XLFQueueRemove";
  if (id == 0x00000135) return "XLFQueueUnsafeDump";
  if (id == 0x00000136) return "XLFStackAllocated";
  if (id == 0x00000137) return "XLFStackCreate";
  if (id == 0x00000138) return "XLFStackDestroy";
  if (id == 0x00000139) return "XLFStackGetEntryCount";
  if (id == 0x0000013A) return "XLFStackIsEmpty";
  if (id == 0x0000013B) return "XLFStackPop";
  if (id == 0x0000013C) return "XLFStackPush";
  if (id == 0x0000013D) return "XLFStackUnsafeDump";
  if (id == 0x00000140) return "XLFPriorityQueueAdd";
  if (id == 0x00000141) return "XLFPriorityQueueAllocated";
  if (id == 0x00000142) return "XLFPriorityQueueCreate";
  if (id == 0x00000143) return "XLFPriorityQueueDestroy";
  if (id == 0x00000144) return "XLFPriorityQueueGetEntryCount";
  if (id == 0x00000145) return "XLFPriorityQueueIsEmpty";
  if (id == 0x00000146) return "XLFPriorityQueueRemoveFirst";
  if (id == 0x00000147) return "XLFPriorityQueueRemove";
  if (id == 0x00000148) return "XLFPriorityQueueUnsafeDump";
  if (id == 0x0000014A) return "XLFHashTableAdd";
  if (id == 0x0000014B) return "XLFHashTableAllocated";
  if (id == 0x0000014C) return "XLFHashTableCreate";
  if (id == 0x0000014D) return "XLFHashTableDestroy";
  if (id == 0x0000014E) return "XLFHashTableGetEntryCount";
  if (id == 0x0000014F) return "XLFHashTableIsEmpty";
  if (id == 0x00000150) return "XLFHashTableRemoveFirst";
  if (id == 0x00000151) return "XLFHashTableRemove";
  if (id == 0x00000152) return "XLFHashTableUnsafeDump";
  if (id == 0x00000154) return "XLFPoolAcquireLock";
  if (id == 0x00000155) return "XLFPoolAllocated";
  if (id == 0x00000156) return "XLFPoolCreate";
  if (id == 0x00000157) return "XLFPoolCreateLock";
  if (id == 0x00000158) return "XLFPoolDestroy";
  if (id == 0x00000159) return "XLFPoolDestroyLock";
  if (id == 0x0000015A) return "XLFPoolIncreaseEvents";
  if (id == 0x0000015B) return "XLFPoolIncreaseLocks";
  if (id == 0x0000015C) return "XLFPoolInitializeLock";
  if (id == 0x0000015D) return "XLFPoolNumberOfEvents";
  if (id == 0x0000015E) return "XLFPoolNumberOfLocks";
  if (id == 0x0000015F) return "XLFPoolReleaseLock";
  if (id == 0x00000163) return "XLFStartLog";
  if (id == 0x00000164) return "XLFStartUserLog";
  if (id == 0x00000165) return "XLFInitializeLog";
  if (id == 0x00000166) return "XLFInitializeUserLog";
  if (id == 0x00000168) return "XLFEndLog";
  if (id == 0x00000169) return "XLFLogPrint";
  if (id == 0x0000016A) return "XLFLogPrintV";
  if (id == 0x0000016B) return "XLFLogBuffer";
  if (id == 0x0000016C) return "XLFLogMessageStats";
  if (id == 0x00000172) return "XLockFreeGetErrorHandler";
  if (id == 0x00000173) return "XLockFreeSetErrorHandler";
  if (id == 0x00000174) return "DmExecuteThreadRPC";
  if (id == 0x00000175) return "DmGetDebuggerConnection";

  return nullptr;
}

const char* xboxkrnlNameGen_1640(int id)
{
  if (id == 0x00000001) return "XexpNtosXexHeader";
  if (id == 0x00000002) return "DbgBreakPoint";
  if (id == 0x00000003) return "DbgBreakPointWithStatus";
  if (id == 0x00000004) return "DbgPrint";
  if (id == 0x00000005) return "DbgPrompt";
  if (id == 0x00000006) return "DumpGetRawDumpInfo";
  if (id == 0x00000007) return "DumpWriteDump";
  if (id == 0x00000008) return "ExAcquireReadWriteLockExclusive";
  if (id == 0x00000009) return "ExAcquireReadWriteLockShared";
  if (id == 0x0000000A) return "ExAllocatePool";
  if (id == 0x0000000B) return "ExAllocatePoolWithTag";
  if (id == 0x0000000C) return "ExAllocatePoolTypeWithTag";
  if (id == 0x0000000D) return "ExCreateThread";
  if (id == 0x0000000E) return "ExEventObjectType";
  if (id == 0x0000000F) return "ExGetXConfigSetting";
  if (id == 0x00000010) return "ExFreePool";
  if (id == 0x00000011) return "ExInitializeReadWriteLock";
  if (id == 0x00000012) return "ExMutantObjectType";
  if (id == 0x00000013) return "ExQueryPoolBlockSize";
  if (id == 0x00000014) return "ExRegisterThreadNotification";
  if (id == 0x00000015) return "ExRegisterTitleTerminateNotification";
  if (id == 0x00000016) return "ExReleaseReadWriteLock";
  if (id == 0x00000017) return "ExSemaphoreObjectType";
  if (id == 0x00000018) return "ExSetXConfigSetting";
  if (id == 0x00000019) return "ExTerminateThread";
  if (id == 0x0000001A) return "ExTerminateTitleProcess";
  if (id == 0x0000001B) return "ExThreadObjectType";
  if (id == 0x0000001C) return "ExTimerObjectType";
  if (id == 0x0000001D) return "ExQueryNonVolatileSetting";
  if (id == 0x0000001E) return "ExSaveNonVolatileSetting";
  if (id == 0x0000001F) return "ExQueryConfigPartition";
  if (id == 0x00000020) return "ExSaveConfigPartition";
  if (id == 0x00000021) return "FscGetCacheElementCount";
  if (id == 0x00000022) return "FscSetCacheElementCount";
  if (id == 0x00000023) return "HalGetCurrentAVPack";
  if (id == 0x00000024) return "HalGpioControl";
  if (id == 0x00000025) return "HalOpenCloseODDTray";
  if (id == 0x00000026) return "HalReadWritePCISpace";
  if (id == 0x00000027) return "HalRegisterShutdownNotification";
  if (id == 0x00000028) return "HalRegisterSMCNotification";
  if (id == 0x00000029) return "HalReturnToFirmware";
  if (id == 0x0000002A) return "HalSendSMCMessage";
  if (id == 0x0000002B) return "HalSetAudioEnable";
  if (id == 0x0000002C) return "InterlockedFlushSList";
  if (id == 0x0000002D) return "InterlockedPopEntrySList";
  if (id == 0x0000002E) return "InterlockedPushEntrySList";
  if (id == 0x0000002F) return "IoAcquireDeviceObjectLock";
  if (id == 0x00000030) return "IoAllocateIrp";
  if (id == 0x00000031) return "IoBuildAsynchronousFsdRequest";
  if (id == 0x00000032) return "IoBuildDeviceIoControlRequest";
  if (id == 0x00000033) return "IoBuildSynchronousFsdRequest";
  if (id == 0x00000034) return "IoCallDriver";
  if (id == 0x00000035) return "IoCheckShareAccess";
  if (id == 0x00000036) return "IoCompleteRequest";
  if (id == 0x00000037) return "IoCompletionObjectType";
  if (id == 0x00000038) return "IoCreateDevice";
  if (id == 0x00000039) return "IoCreateFile";
  if (id == 0x0000003A) return "IoDeleteDevice";
  if (id == 0x0000003B) return "IoDeviceObjectType";
  if (id == 0x0000003C) return "IoDismountVolume";
  if (id == 0x0000003D) return "IoDismountVolumeByFileHandle";
  if (id == 0x0000003E) return "IoDismountVolumeByName";
  if (id == 0x0000003F) return "IoFileObjectType";
  if (id == 0x00000040) return "IoFreeIrp";
  if (id == 0x00000041) return "IoInitializeIrp";
  if (id == 0x00000042) return "IoInvalidDeviceRequest";
  if (id == 0x00000043) return "KiApcNormalRoutineNop";
  if (id == 0x00000044) return "IoQueueThreadIrp";
  if (id == 0x00000045) return "IoReleaseDeviceObjectLock";
  if (id == 0x00000046) return "IoRemoveShareAccess";
  if (id == 0x00000047) return "IoSetIoCompletion";
  if (id == 0x00000048) return "IoSetShareAccess";
  if (id == 0x00000049) return "IoStartNextPacket";
  if (id == 0x0000004A) return "IoStartNextPacketByKey";
  if (id == 0x0000004B) return "IoStartPacket";
  if (id == 0x0000004C) return "IoSynchronousDeviceIoControlRequest";
  if (id == 0x0000004D) return "IoSynchronousFsdRequest";
  if (id == 0x0000004E) return "KeAcquireSpinLockAtRaisedIrql";
  if (id == 0x0000004F) return "KeAlertResumeThread";
  if (id == 0x00000050) return "KeAlertThread";
  if (id == 0x00000051) return "KeBoostPriorityThread";
  if (id == 0x00000052) return "KeBugCheck";
  if (id == 0x00000053) return "KeBugCheckEx";
  if (id == 0x00000054) return "KeCancelTimer";
  if (id == 0x00000055) return "KeConnectInterrupt";
  if (id == 0x00000056) return "KeContextFromKframes";
  if (id == 0x00000057) return "KeContextToKframes";
  if (id == 0x00000058) return "KeCreateUserMode";
  if (id == 0x00000059) return "KeDebugMonitorData";
  if (id == 0x0000005A) return "KeDelayExecutionThread";
  if (id == 0x0000005B) return "KeDeleteUserMode";
  if (id == 0x0000005C) return "KeDisconnectInterrupt";
  if (id == 0x0000005D) return "KeEnableFpuExceptions";
  if (id == 0x0000005E) return "KeEnablePPUPerformanceMonitor";
  if (id == 0x0000005F) return "KeEnterCriticalRegion";
  if (id == 0x00000060) return "KeEnterUserMode";
  if (id == 0x00000061) return "KeFlushCacheRange";
  if (id == 0x00000062) return "KeFlushCurrentSingleTb";
  if (id == 0x00000063) return "KeFlushCurrentEntireTb";
  if (id == 0x00000064) return "KeFlushUserModeCurrentTb";
  if (id == 0x00000065) return "KeFlushUserModeTb";
  if (id == 0x00000066) return "KeGetCurrentProcessType";
  if (id == 0x00000067) return "KeGetPMWRegister";
  if (id == 0x00000068) return "KeGetPRVRegister";
  if (id == 0x00000069) return "KeGetSpecialPurposeRegister";
  if (id == 0x0000006A) return "KeInitializeApc";
  if (id == 0x0000006C) return "KeInitializeDeviceQueue";
  if (id == 0x0000006D) return "KeInitializeDpc";
  if (id == 0x0000006E) return "KeInitializeEvent";
  if (id == 0x0000006F) return "KeInitializeInterrupt";
  if (id == 0x00000070) return "KeInitializeMutant";
  if (id == 0x00000071) return "KeInitializeQueue";
  if (id == 0x00000072) return "KeInitializeSemaphore";
  if (id == 0x00000073) return "KeInitializeTimerEx";
  if (id == 0x00000074) return "KeInsertByKeyDeviceQueue";
  if (id == 0x00000075) return "KeInsertDeviceQueue";
  if (id == 0x00000076) return "KeInsertHeadQueue";
  if (id == 0x00000077) return "KeInsertQueue";
  if (id == 0x00000078) return "KeInsertQueueApc";
  if (id == 0x00000079) return "KeInsertQueueDpc";
  if (id == 0x0000007A) return "KeIpiGenericCall";
  if (id == 0x0000007B) return "KeLeaveCriticalRegion";
  if (id == 0x0000007C) return "KeLeaveUserMode";
  if (id == 0x0000007D) return "KePulseEvent";
  if (id == 0x0000007E) return "KeQueryBasePriorityThread";
  if (id == 0x0000007F) return "KeQueryInterruptTime";
  if (id == 0x00000080) return "KeQueryPerformanceFrequency";
  if (id == 0x00000081) return "KeQuerySystemTime";
  if (id == 0x00000082) return "KeRaiseIrqlToDpcLevel";
  if (id == 0x00000083) return "KeReleaseMutant";
  if (id == 0x00000084) return "KeReleaseSemaphore";
  if (id == 0x00000085) return "KeReleaseSpinLockFromRaisedIrql";
  if (id == 0x00000086) return "KeRemoveByKeyDeviceQueue";
  if (id == 0x00000087) return "KeRemoveDeviceQueue";
  if (id == 0x00000088) return "KeRemoveEntryDeviceQueue";
  if (id == 0x00000089) return "KeRemoveQueue";
  if (id == 0x0000008A) return "KeRemoveQueueDpc";
  if (id == 0x0000008B) return "KeResetEvent";
  if (id == 0x0000008C) return "KeRestoreFloatingPointState";
  if (id == 0x0000008D) return "KeRestoreVectorUnitState";
  if (id == 0x0000008E) return "KeResumeThread";
  if (id == 0x0000008F) return "KeRundownQueue";
  if (id == 0x00000090) return "KeSaveFloatingPointState";
  if (id == 0x00000091) return "KeSaveVectorUnitState";
  if (id == 0x00000092) return "KeSetAffinityThread";
  if (id == 0x00000093) return "KeSetBasePriorityThread";
  if (id == 0x00000094) return "KeSetCurrentProcessType";
  if (id == 0x00000095) return "KeSetCurrentStackPointers";
  if (id == 0x00000096) return "KeSetDisableBoostThread";
  if (id == 0x00000097) return "KeSetEvent";
  if (id == 0x00000098) return "KeSetEventBoostPriority";
  if (id == 0x00000099) return "KeSetPMWRegister";
  if (id == 0x0000009A) return "KeSetPRVRegister";
  if (id == 0x0000009B) return "KeSetPriorityClassThread";
  if (id == 0x0000009C) return "KeSetPriorityThread";
  if (id == 0x0000009D) return "KeSetSpecialPurposeRegister";
  if (id == 0x0000009E) return "KeSetTimer";
  if (id == 0x0000009F) return "KeSetTimerEx";
  if (id == 0x000000A0) return "KeStallExecutionProcessor";
  if (id == 0x000000A1) return "KeStartBackgroundScheduling";
  if (id == 0x000000A2) return "KeSuspendThread";
  if (id == 0x000000A3) return "KeSweepDcacheRange";
  if (id == 0x000000A4) return "KeSweepIcacheRange";
  if (id == 0x000000A5) return "KeTestAlertThread";
  if (id == 0x000000A6) return "KeTimeStampBundle";
  if (id == 0x000000A7) return "KeTryToAcquireSpinLockAtRaisedIrql";
  if (id == 0x000000A8) return "KeWaitForMultipleObjects";
  if (id == 0x000000A9) return "KeWaitForSingleObject";
  if (id == 0x000000AA) return "KfAcquireSpinLock";
  if (id == 0x000000AB) return "KfRaiseIrql";
  if (id == 0x000000AC) return "KfLowerIrql";
  if (id == 0x000000AD) return "KfReleaseSpinLock";
  if (id == 0x000000AE) return "KiBugCheckData";
  if (id == 0x000000AF) return "LDICreateDecompression";
  if (id == 0x000000B0) return "LDIDecompress";
  if (id == 0x000000B1) return "LDIDestroyDecompression";
  if (id == 0x000000B2) return "MmAllocatePhysicalMemory";
  if (id == 0x000000B3) return "MmAllocatePhysicalMemoryEx";
  if (id == 0x000000B4) return "MmCreateKernelStack";
  if (id == 0x000000B5) return "MmDeleteKernelStack";
  if (id == 0x000000B6) return "MmFreePhysicalMemory";
  if (id == 0x000000B7) return "MmGetPhysicalAddress";
  if (id == 0x000000B8) return "MmIsAddressValid";
  if (id == 0x000000B9) return "MmLockAndMapSegmentArray";
  if (id == 0x000000BA) return "MmLockUnlockBufferPages";
  if (id == 0x000000BB) return "MmMapIoSpace";
  if (id == 0x000000BC) return "MmPersistPhysicalMemoryAllocation";
  if (id == 0x000000BD) return "MmQueryAddressProtect";
  if (id == 0x000000BE) return "MmQueryAllocationSize";
  if (id == 0x000000BF) return "MmQueryStatistics";
  if (id == 0x000000C0) return "MmSetAddressProtect";
  if (id == 0x000000C1) return "MmSplitPhysicalMemoryAllocation";
  if (id == 0x000000C2) return "MmUnlockAndUnmapSegmentArray";
  if (id == 0x000000C3) return "MmUnmapIoSpace";
  if (id == 0x000000C4) return "Nls844UnicodeCaseTable";
  if (id == 0x000000C5) return "NtAllocateVirtualMemory";
  if (id == 0x000000C6) return "NtCancelTimer";
  if (id == 0x000000C7) return "NtClearEvent";
  if (id == 0x000000C8) return "NtClose";
  if (id == 0x000000C9) return "NtCreateDirectoryObject";
  if (id == 0x000000CA) return "NtCreateEvent";
  if (id == 0x000000CB) return "NtCreateFile";
  if (id == 0x000000CC) return "NtCreateIoCompletion";
  if (id == 0x000000CD) return "NtCreateMutant";
  if (id == 0x000000CE) return "NtCreateSemaphore";
  if (id == 0x000000CF) return "NtCreateSymbolicLinkObject";
  if (id == 0x000000D0) return "NtCreateTimer";
  if (id == 0x000000D1) return "NtDeleteFile";
  if (id == 0x000000D2) return "NtDeviceIoControlFile";
  if (id == 0x000000D3) return "NtDuplicateObject";
  if (id == 0x000000D4) return "NtFlushBuffersFile";
  if (id == 0x000000D5) return "NtFreeVirtualMemory";
  if (id == 0x000000D6) return "NtMakeTemporaryObject";
  if (id == 0x000000D7) return "NtOpenDirectoryObject";
  if (id == 0x000000D8) return "NtOpenFile";
  if (id == 0x000000D9) return "NtOpenSymbolicLinkObject";
  if (id == 0x000000DA) return "NtProtectVirtualMemory";
  if (id == 0x000000DB) return "NtPulseEvent";
  if (id == 0x000000DC) return "NtQueueApcThread";
  if (id == 0x000000DD) return "NtQueryDirectoryFile";
  if (id == 0x000000DE) return "NtQueryDirectoryObject";
  if (id == 0x000000DF) return "NtQueryEvent";
  if (id == 0x000000E0) return "NtQueryFullAttributesFile";
  if (id == 0x000000E1) return "NtQueryInformationFile";
  if (id == 0x000000E2) return "NtQueryIoCompletion";
  if (id == 0x000000E3) return "NtQueryMutant";
  if (id == 0x000000E4) return "NtQuerySemaphore";
  if (id == 0x000000E5) return "NtQuerySymbolicLinkObject";
  if (id == 0x000000E6) return "NtQueryTimer";
  if (id == 0x000000E7) return "NtQueryVirtualMemory";
  if (id == 0x000000E8) return "NtQueryVolumeInformationFile";
  if (id == 0x000000E9) return "NtReadFile";
  if (id == 0x000000EA) return "NtReadFileScatter";
  if (id == 0x000000EB) return "NtReleaseMutant";
  if (id == 0x000000EC) return "NtReleaseSemaphore";
  if (id == 0x000000ED) return "NtRemoveIoCompletion";
  if (id == 0x000000EE) return "NtResumeThread";
  if (id == 0x000000EF) return "NtSetEvent";
  if (id == 0x000000F0) return "NtSetInformationFile";
  if (id == 0x000000F1) return "NtSetIoCompletion";
  if (id == 0x000000F2) return "NtSetSystemTime";
  if (id == 0x000000F3) return "NtSetTimerEx";
  if (id == 0x000000F4) return "NtSignalAndWaitForSingleObjectEx";
  if (id == 0x000000F5) return "NtSuspendThread";
  if (id == 0x000000F6) return "NtWaitForSingleObjectEx";
  if (id == 0x000000F7) return "NtWaitForMultipleObjectsEx";
  if (id == 0x000000F8) return "NtWriteFile";
  if (id == 0x000000F9) return "NtWriteFileGather";
  if (id == 0x000000FA) return "NtYieldExecution";
  if (id == 0x000000FB) return "ObCreateObject";
  if (id == 0x000000FC) return "ObCreateSymbolicLink";
  if (id == 0x000000FD) return "ObDeleteSymbolicLink";
  if (id == 0x000000FE) return "ObDereferenceObject";
  if (id == 0x000000FF) return "ObDirectoryObjectType";
  if (id == 0x00000100) return "ObGetWaitableObject";
  if (id == 0x00000101) return "ObInsertObject";
  if (id == 0x00000102) return "ObIsTitleObject";
  if (id == 0x00000103) return "ObLookupAnyThreadByThreadId";
  if (id == 0x00000104) return "ObLookupThreadByThreadId";
  if (id == 0x00000105) return "ObMakeTemporaryObject";
  if (id == 0x00000106) return "ObOpenObjectByName";
  if (id == 0x00000107) return "ObOpenObjectByPointer";
  if (id == 0x00000108) return "ObReferenceObject";
  if (id == 0x00000109) return "ObReferenceObjectByHandle";
  if (id == 0x0000010A) return "ObReferenceObjectByName";
  if (id == 0x0000010B) return "ObSymbolicLinkObjectType";
  if (id == 0x0000010C) return "ObTranslateSymbolicLink";
  if (id == 0x0000010D) return "RtlAnsiStringToUnicodeString";
  if (id == 0x0000010E) return "RtlAppendStringToString";
  if (id == 0x0000010F) return "RtlAppendUnicodeStringToString";
  if (id == 0x00000110) return "RtlAppendUnicodeToString";
  if (id == 0x00000111) return "RtlAssert";
  if (id == 0x00000112) return "RtlCaptureContext";
  if (id == 0x00000113) return "RtlCompareMemory";
  if (id == 0x00000114) return "RtlCompareMemoryUlong";
  if (id == 0x00000115) return "RtlCompareString";
  if (id == 0x00000116) return "RtlCompareStringN";
  if (id == 0x00000117) return "RtlCompareUnicodeString";
  if (id == 0x00000118) return "RtlCompareUnicodeStringN";
  if (id == 0x00000119) return "RtlCopyString";
  if (id == 0x0000011A) return "RtlCopyUnicodeString";
  if (id == 0x0000011B) return "RtlCreateUnicodeString";
  if (id == 0x0000011C) return "RtlDowncaseUnicodeChar";
  if (id == 0x0000011D) return "RtlEnterCriticalSection";
  if (id == 0x0000011E) return "RtlFillMemoryUlong";
  if (id == 0x0000011F) return "RtlFreeAnsiString";
  if (id == 0x00000120) return "RtlFreeAnsiString";
  if (id == 0x00000121) return "RtlGetCallersAddress";
  if (id == 0x00000122) return "RtlGetStackLimits";
  if (id == 0x00000123) return "RtlImageXexHeaderField";
  if (id == 0x00000124) return "RtlInitAnsiString";
  if (id == 0x00000125) return "RtlInitUnicodeString";
  if (id == 0x00000126) return "RtlInitializeCriticalSection";
  if (id == 0x00000127) return "RtlInitializeCriticalSectionAndSpinCount";
  if (id == 0x00000128) return "RtlLeaveCriticalSection";
  if (id == 0x00000129) return "RtlLookupFunctionEntry";
  if (id == 0x0000012A) return "RtlLowerChar";
  if (id == 0x0000012B) return "RtlMultiByteToUnicodeN";
  if (id == 0x0000012C) return "RtlMultiByteToUnicodeSize";
  if (id == 0x0000012D) return "RtlNtStatusToDosError";
  if (id == 0x0000012E) return "RtlRaiseException";
  if (id == 0x0000012F) return "RtlRaiseStatus";
  if (id == 0x00000130) return "RtlRip";
  if (id == 0x00000131) return "_scprintf";
  if (id == 0x00000132) return "_snprintf";
  if (id == 0x00000133) return "sprintf";
  if (id == 0x00000134) return "_scwprintf";
  if (id == 0x00000135) return "_snwprintf";
  if (id == 0x00000136) return "_swprintf";
  if (id == 0x00000137) return "RtlTimeFieldsToTime";
  if (id == 0x00000138) return "RtlTimeToTimeFields";
  if (id == 0x00000139) return "RtlTryEnterCriticalSection";
  if (id == 0x0000013A) return "RtlUnicodeStringToAnsiString";
  if (id == 0x0000013B) return "RtlUnicodeToMultiByteN";
  if (id == 0x0000013C) return "RtlUnicodeToMultiByteSize";
  if (id == 0x0000013D) return "RtlUnwind";
  if (id == 0x0000013E) return "RtlUnwind2";
  if (id == 0x0000013F) return "RtlUpcaseUnicodeChar";
  if (id == 0x00000140) return "RtlUpperChar";
  if (id == 0x00000141) return "RtlVirtualUnwind";
  if (id == 0x00000142) return "_vscprintf";
  if (id == 0x00000143) return "_vsnprintf";
  if (id == 0x00000144) return "vsprintf";
  if (id == 0x00000145) return "_vscwprintf";
  if (id == 0x00000146) return "_vsnwprintf";
  if (id == 0x00000147) return "_vswprintf";
  if (id == 0x00000148) return "SfcWriteLogical";
  if (id == 0x00000149) return "TlsAlloc";
  if (id == 0x0000014A) return "TlsFree";
  if (id == 0x0000014B) return "TlsGetValue";
  if (id == 0x0000014C) return "TlsSetValue";
  if (id == 0x0000014D) return "XboxHardwareInfo";
  if (id == 0x0000014E) return "XboxKrnlVersion";
  if (id == 0x0000014F) return "XeCryptAesKey";
  if (id == 0x00000150) return "XeCryptAesEcb";
  if (id == 0x00000151) return "XeCryptAesCbc";
  if (id == 0x00000152) return "XeCryptBnDwLeDhEqualBase";
  if (id == 0x00000153) return "XeCryptBnDwLeDhInvalBase";
  if (id == 0x00000154) return "XeCryptBnDwLeDhModExp";
  if (id == 0x00000155) return "XeCryptBnDw_Copy";
  if (id == 0x00000156) return "XeCryptBnDw_SwapLeBe";
  if (id == 0x00000157) return "XeCryptBnDw_Zero";
  if (id == 0x00000158) return "XeCryptBnDwLePkcs1Format";
  if (id == 0x00000159) return "XeCryptBnDwLePkcs1Verify";
  if (id == 0x0000015A) return "XeCryptBnQwBeSigCreate";
  if (id == 0x0000015B) return "XeCryptBnQwBeSigFormat";
  if (id == 0x0000015C) return "XeCryptBnQwBeSigVerify";
  if (id == 0x0000015D) return "XeCryptBnQwNeEcSigVerify";
  if (id == 0x0000015E) return "XeCryptBnQwNeModExp";
  if (id == 0x0000015F) return "XeCryptBnQwNeModExpRoot";
  if (id == 0x00000160) return "XeCryptBnQwNeModInv";
  if (id == 0x00000161) return "XeCryptBnQwNeModMul";
  if (id == 0x00000162) return "XeCryptBnQwNeRsaKeyGen";
  if (id == 0x00000163) return "XeCryptBnQwNeRsaPrvCrypt";
  if (id == 0x00000164) return "XeCryptBnQwNeRsaPubCrypt";
  if (id == 0x00000165) return "XeCryptBnQw_Copy";
  if (id == 0x00000166) return "XeCryptBnQw_SwapDwQw";
  if (id == 0x00000167) return "XeCryptBnQw_SwapDwQwLeBe";
  if (id == 0x00000168) return "XeCryptBnQw_SwapLeBe";
  if (id == 0x00000169) return "XeCryptBnQw_Zero";
  if (id == 0x0000016A) return "XeCryptChainAndSumMac";
  if (id == 0x0000016B) return "XeCryptDesParity";
  if (id == 0x0000016C) return "XeCryptDesKey";
  if (id == 0x0000016D) return "XeCryptDesEcb";
  if (id == 0x0000016E) return "XeCryptDesCbc";
  if (id == 0x0000016F) return "XeCryptDes3Key";
  if (id == 0x00000170) return "XeCryptDes3Ecb";
  if (id == 0x00000171) return "XeCryptDes3Cbc";
  if (id == 0x00000172) return "XeCryptHmacMd5Init";
  if (id == 0x00000173) return "XeCryptHmacMd5Update";
  if (id == 0x00000174) return "XeCryptHmacMd5Final";
  if (id == 0x00000175) return "XeCryptHmacMd5";
  if (id == 0x00000176) return "XeCryptHmacShaInit";
  if (id == 0x00000177) return "XeCryptHmacShaUpdate";
  if (id == 0x00000178) return "XeCryptHmacShaFinal";
  if (id == 0x00000179) return "XeCryptHmacSha";
  if (id == 0x0000017A) return "XeCryptHmacShaVerify";
  if (id == 0x0000017B) return "XeCryptMd5Init";
  if (id == 0x0000017C) return "XeCryptMd5Update";
  if (id == 0x0000017D) return "XeCryptMd5Final";
  if (id == 0x0000017E) return "XeCryptMd5";
  if (id == 0x0000017F) return "XeCryptParveEcb";
  if (id == 0x00000180) return "XeCryptParveCbcMac";
  if (id == 0x00000181) return "XeCryptRandom";
  if (id == 0x00000182) return "XeCryptRc4Key";
  if (id == 0x00000183) return "XeCryptRc4Ecb";
  if (id == 0x00000184) return "XeCryptRc4";
  if (id == 0x00000185) return "XeCryptShaInit";
  if (id == 0x00000186) return "XeCryptShaUpdate";
  if (id == 0x00000187) return "XeCryptShaFinal";
  if (id == 0x00000188) return "XeCryptSha";
  if (id == 0x00000189) return "XexExecutableModuleHandle";
  if (id == 0x0000018A) return "XexGetModuleHandle";
  if (id == 0x0000018B) return "XexGetModuleSection";
  if (id == 0x0000018C) return "XexGetProcedureAddress";
  if (id == 0x0000018D) return "XexLoadExecutable";
  if (id == 0x0000018E) return "XexLoadImage";
  if (id == 0x0000018F) return "XexLoadImageHeaders";
  if (id == 0x00000190) return "XexPcToFileHeader";
  if (id == 0x00000191) return "XexRegisterLoader";
  if (id == 0x00000192) return "XexRegisterPatchDescriptor";
  if (id == 0x00000193) return "XexSendDeferredNotifications";
  if (id == 0x00000194) return "XexStartExecutable";
  if (id == 0x00000195) return "XexUnloadImage";
  if (id == 0x00000196) return "XexUnloadImageAndExitThread";
  if (id == 0x00000197) return "XexUnloadTitleModules";
  if (id == 0x00000198) return "__C_specific_handler";
  if (id == 0x00000199) return "DbgLoadImageSymbols";
  if (id == 0x0000019A) return "DbgUnLoadImageSymbols";
  if (id == 0x0000019B) return "RtlImageDirectoryEntryToData";
  if (id == 0x0000019C) return "RtlImageNtHeader";
  if (id == 0x0000019D) return "ExDebugMonitorService";
  if (id == 0x0000019E) return "MmDbgReadCheck";
  if (id == 0x0000019F) return "MmDbgReleaseAddress";
  if (id == 0x000001A0) return "MmDbgWriteCheck";
  if (id == 0x000001A1) return "ExLoadedCommandLine";
  if (id == 0x000001A2) return "ExLoadedImageName";

  return nullptr;
}

const char* xboxkrnlNameGen_1746(int id)
{
  if (id == 0x00000002) return "DbgBreakPoint";
  if (id == 0x00000003) return "DbgBreakPointWithStatus";
  if (id == 0x00000004) return "DbgPrint";
  if (id == 0x00000005) return "DbgPrompt";
  if (id == 0x00000006) return "DumpGetRawDumpInfo";
  if (id == 0x00000007) return "DumpWriteDump";
  if (id == 0x00000008) return "ExAcquireReadWriteLockExclusive";
  if (id == 0x00000009) return "ExAcquireReadWriteLockShared";
  if (id == 0x0000000A) return "ExAllocatePool";
  if (id == 0x0000000B) return "ExAllocatePoolWithTag";
  if (id == 0x0000000C) return "ExAllocatePoolTypeWithTag";
  if (id == 0x0000000D) return "ExCreateThread";
  if (id == 0x0000000E) return "ExEventObjectType";
  if (id == 0x0000000F) return "ExGetXConfigSetting";
  if (id == 0x00000010) return "ExFreePool";
  if (id == 0x00000011) return "ExInitializeReadWriteLock";
  if (id == 0x00000012) return "ExMutantObjectType";
  if (id == 0x00000013) return "ExQueryPoolBlockSize";
  if (id == 0x00000014) return "ExRegisterThreadNotification";
  if (id == 0x00000015) return "ExRegisterTitleTerminateNotification";
  if (id == 0x00000016) return "ExReleaseReadWriteLock";
  if (id == 0x00000017) return "ExSemaphoreObjectType";
  if (id == 0x00000018) return "ExSetXConfigSetting";
  if (id == 0x00000019) return "ExTerminateThread";
  if (id == 0x0000001A) return "ExTerminateTitleProcess";
  if (id == 0x0000001B) return "ExThreadObjectType";
  if (id == 0x0000001C) return "ExTimerObjectType";
  if (id == 0x0000001D) return "ExQueryNonVolatileSetting";
  if (id == 0x0000001E) return "ExSaveNonVolatileSetting";
  if (id == 0x0000001F) return "ExQueryConfigPartition";
  if (id == 0x00000020) return "ExSaveConfigPartition";
  if (id == 0x00000021) return "FscGetCacheElementCount";
  if (id == 0x00000022) return "FscSetCacheElementCount";
  if (id == 0x00000023) return "HalGetCurrentAVPack";
  if (id == 0x00000024) return "HalGpioControl";
  if (id == 0x00000025) return "HalOpenCloseODDTray";
  if (id == 0x00000026) return "HalReadWritePCISpace";
  if (id == 0x00000027) return "HalRegisterShutdownNotification";
  if (id == 0x00000028) return "HalRegisterSMCNotification";
  if (id == 0x00000029) return "HalReturnToFirmware";
  if (id == 0x0000002A) return "HalSendSMCMessage";
  if (id == 0x0000002B) return "HalSetAudioEnable";
  if (id == 0x0000002C) return "InterlockedFlushSList";
  if (id == 0x0000002D) return "InterlockedPopEntrySList";
  if (id == 0x0000002E) return "InterlockedPushEntrySList";
  if (id == 0x0000002F) return "IoAcquireDeviceObjectLock";
  if (id == 0x00000030) return "IoAllocateIrp";
  if (id == 0x00000031) return "IoBuildAsynchronousFsdRequest";
  if (id == 0x00000032) return "IoBuildDeviceIoControlRequest";
  if (id == 0x00000033) return "IoBuildSynchronousFsdRequest";
  if (id == 0x00000034) return "IoCallDriver";
  if (id == 0x00000035) return "IoCheckShareAccess";
  if (id == 0x00000036) return "IoCompleteRequest";
  if (id == 0x00000037) return "ExTimerObjectType";
  if (id == 0x00000038) return "IoCreateDevice";
  if (id == 0x00000039) return "IoCreateFile";
  if (id == 0x0000003A) return "IoDeleteDevice";
  if (id == 0x0000003B) return "IoDeviceObjectType";
  if (id == 0x0000003C) return "IoDismountVolume";
  if (id == 0x0000003D) return "IoDismountVolumeByFileHandle";
  if (id == 0x0000003E) return "IoDismountVolumeByName";
  if (id == 0x0000003F) return "IoFileObjectType";
  if (id == 0x00000040) return "IoFreeIrp";
  if (id == 0x00000041) return "IoInitializeIrp";
  if (id == 0x00000042) return "IoInvalidDeviceRequest";
  if (id == 0x00000043) return "KiApcNormalRoutineNop";
  if (id == 0x00000044) return "IoQueueThreadIrp";
  if (id == 0x00000045) return "IoReleaseDeviceObjectLock";
  if (id == 0x00000046) return "IoRemoveShareAccess";
  if (id == 0x00000047) return "IoSetIoCompletion";
  if (id == 0x00000048) return "IoSetShareAccess";
  if (id == 0x00000049) return "IoStartNextPacket";
  if (id == 0x0000004A) return "IoStartNextPacketByKey";
  if (id == 0x0000004B) return "IoStartPacket";
  if (id == 0x0000004C) return "IoSynchronousDeviceIoControlRequest";
  if (id == 0x0000004D) return "IoSynchronousFsdRequest";
  if (id == 0x0000004E) return "KeAccessFuses";
  if (id == 0x0000004F) return "KeAcquireSpinLockAtRaisedIrql";
  if (id == 0x00000050) return "KeAlertResumeThread";
  if (id == 0x00000051) return "KeAlertThread";
  if (id == 0x00000052) return "KeBoostPriorityThread";
  if (id == 0x00000053) return "KeBugCheck";
  if (id == 0x00000054) return "KeBugCheckEx";
  if (id == 0x00000055) return "KeCancelTimer";
  if (id == 0x00000056) return "KeConnectInterrupt";
  if (id == 0x00000057) return "KeContextFromKframes";
  if (id == 0x00000058) return "KeContextToKframes";
  if (id == 0x00000059) return "KeCreateUserMode";
  if (id == 0x0000005A) return "KeDebugMonitorData";
  if (id == 0x0000005B) return "KeDelayExecutionThread";
  if (id == 0x0000005C) return "KeDeleteUserMode";
  if (id == 0x0000005D) return "KeDisconnectInterrupt";
  if (id == 0x0000005E) return "KeEnableFpuExceptions";
  if (id == 0x0000005F) return "KeEnablePPUPerformanceMonitor";
  if (id == 0x00000060) return "KeEnterCriticalRegion";
  if (id == 0x00000061) return "KeEnterUserMode";
  if (id == 0x00000062) return "KeFlushCacheRange";
  if (id == 0x00000063) return "KeFlushEntireTb";
  if (id == 0x00000064) return "KeFlushCurrentEntireTb";
  if (id == 0x00000065) return "KeFlushUserModeCurrentTb";
  if (id == 0x00000066) return "KeFlushUserModeTb";
  if (id == 0x00000067) return "KeGetCurrentProcessType";
  if (id == 0x00000068) return "KeGetPMWRegister";
  if (id == 0x00000069) return "KeGetPRVRegister";
  if (id == 0x0000006A) return "KeGetSocRegister";
  if (id == 0x0000006C) return "KeGetSpecialPurposeRegister";
  if (id == 0x0000006D) return "KeInitializeApc";
  if (id == 0x0000006E) return "KeInitializeDeviceQueue";
  if (id == 0x0000006F) return "KeInitializeDpc";
  if (id == 0x00000070) return "KeInitializeEvent";
  if (id == 0x00000071) return "KeInitializeInterrupt";
  if (id == 0x00000072) return "KeInitializeMutant";
  if (id == 0x00000073) return "KeInitializeQueue";
  if (id == 0x00000074) return "KeInitializeSemaphore";
  if (id == 0x00000075) return "KeInitializeTimerEx";
  if (id == 0x00000076) return "KeInsertByKeyDeviceQueue";
  if (id == 0x00000077) return "KeInsertDeviceQueue";
  if (id == 0x00000078) return "KeInsertHeadQueue";
  if (id == 0x00000079) return "KeInsertQueue";
  if (id == 0x0000007A) return "KeInsertQueueApc";
  if (id == 0x0000007B) return "KeInsertQueueDpc";
  if (id == 0x0000007C) return "KeIpiGenericCall";
  if (id == 0x0000007D) return "KeLeaveCriticalRegion";
  if (id == 0x0000007E) return "KeLeaveUserMode";
  if (id == 0x0000007F) return "KePulseEvent";
  if (id == 0x00000080) return "KeQueryBasePriorityThread";
  if (id == 0x00000081) return "KeQueryInterruptTime";
  if (id == 0x00000082) return "KeQueryPerformanceFrequency";
  if (id == 0x00000083) return "KeQuerySystemTime";
  if (id == 0x00000084) return "KeRaiseIrqlToDpcLevel";
  if (id == 0x00000085) return "KeRegisterDriverNotification";
  if (id == 0x00000086) return "KeReleaseMutant";
  if (id == 0x00000087) return "KeReleaseSemaphore";
  if (id == 0x00000088) return "KeReleaseSpinLockFromRaisedIrql";
  if (id == 0x00000089) return "KeRemoveByKeyDeviceQueue";
  if (id == 0x0000008A) return "KeRemoveDeviceQueue";
  if (id == 0x0000008B) return "KeRemoveEntryDeviceQueue";
  if (id == 0x0000008C) return "KeRemoveQueue";
  if (id == 0x0000008D) return "KeRemoveQueueDpc";
  if (id == 0x0000008E) return "KeResetEvent";
  if (id == 0x0000008F) return "KeRestoreFloatingPointState";
  if (id == 0x00000090) return "KeRestoreVectorUnitState";
  if (id == 0x00000091) return "KeResumeThread";
  if (id == 0x00000092) return "KeRetireDpcList";
  if (id == 0x00000093) return "KeRundownQueue";
  if (id == 0x00000094) return "KeSaveFloatingPointState";
  if (id == 0x00000095) return "KeSaveVectorUnitState";
  if (id == 0x00000096) return "KeSetAffinityThread";
  if (id == 0x00000097) return "KeSetBasePriorityThread";
  if (id == 0x00000098) return "KeSetCurrentProcessType";
  if (id == 0x00000099) return "KeSetCurrentStackPointers";
  if (id == 0x0000009A) return "KeSetDisableBoostThread";
  if (id == 0x0000009B) return "KeSetEvent";
  if (id == 0x0000009C) return "KeSetEventBoostPriority";
  if (id == 0x0000009D) return "KeSetPMWRegister";
  if (id == 0x0000009E) return "KeSetPowerMode";
  if (id == 0x0000009F) return "KeSetPRVRegister";
  if (id == 0x000000A0) return "KeSetPriorityClassThread";
  if (id == 0x000000A1) return "KeSetPriorityThread";
  if (id == 0x000000A2) return "KeSetSocRegister";
  if (id == 0x000000A3) return "KeSetSpecialPurposeRegister";
  if (id == 0x000000A4) return "KeSetTimer";
  if (id == 0x000000A5) return "KeSetTimerEx";
  if (id == 0x000000A6) return "KeStallExecutionProcessor";
  if (id == 0x000000A8) return "KeSuspendThread";
  if (id == 0x000000A9) return "KeSweepDcacheRange";
  if (id == 0x000000AA) return "KeSweepIcacheRange";
  if (id == 0x000000AB) return "KeTestAlertThread";
  if (id == 0x000000AC) return "KeTimeStampBundle";
  if (id == 0x000000AD) return "KeTryToAcquireSpinLockAtRaisedIrql";
  if (id == 0x000000AE) return "KeWaitForMultipleObjects";
  if (id == 0x000000AF) return "KeWaitForSingleObject";
  if (id == 0x000000B0) return "KfAcquireSpinLock";
  if (id == 0x000000B1) return "KfRaiseIrql";
  if (id == 0x000000B2) return "KfLowerIrql";
  if (id == 0x000000B3) return "KfReleaseSpinLock";
  if (id == 0x000000B4) return "KiBugCheckData";
  if (id == 0x000000B5) return "LDICreateDecompression";
  if (id == 0x000000B6) return "LDIDecompress";
  if (id == 0x000000B7) return "LDIDestroyDecompression";
  if (id == 0x000000B8) return "MmAllocatePhysicalMemory";
  if (id == 0x000000B9) return "MmAllocatePhysicalMemoryEx";
  if (id == 0x000000BA) return "MmCreateKernelStack";
  if (id == 0x000000BB) return "MmDeleteKernelStack";
  if (id == 0x000000BC) return "MmFreePhysicalMemory";
  if (id == 0x000000BD) return "MmGetPhysicalAddress";
  if (id == 0x000000BE) return "MmIsAddressValid";
  if (id == 0x000000BF) return "MmLockAndMapSegmentArray";
  if (id == 0x000000C0) return "MmLockUnlockBufferPages";
  if (id == 0x000000C1) return "MmMapIoSpace";
  if (id == 0x000000C2) return "MmPersistPhysicalMemoryAllocation";
  if (id == 0x000000C3) return "MmQueryAddressProtect";
  if (id == 0x000000C4) return "MmQueryAllocationSize";
  if (id == 0x000000C5) return "MmQueryStatistics";
  if (id == 0x000000C6) return "MmSetAddressProtect";
  if (id == 0x000000C7) return "MmSplitPhysicalMemoryAllocation";
  if (id == 0x000000C8) return "MmUnlockAndUnmapSegmentArray";
  if (id == 0x000000C9) return "MmUnmapIoSpace";
  if (id == 0x000000CA) return "Nls844UnicodeCaseTable";
  if (id == 0x000000CB) return "NtAllocateVirtualMemory";
  if (id == 0x000000CC) return "NtCancelTimer";
  if (id == 0x000000CD) return "NtClearEvent";
  if (id == 0x000000CE) return "NtClose";
  if (id == 0x000000CF) return "NtCreateDirectoryObject";
  if (id == 0x000000D0) return "NtCreateEvent";
  if (id == 0x000000D1) return "NtCreateFile";
  if (id == 0x000000D2) return "NtCreateIoCompletion";
  if (id == 0x000000D3) return "NtCreateMutant";
  if (id == 0x000000D4) return "NtCreateSemaphore";
  if (id == 0x000000D5) return "NtCreateSymbolicLinkObject";
  if (id == 0x000000D6) return "NtCreateTimer";
  if (id == 0x000000D7) return "NtDeleteFile";
  if (id == 0x000000D8) return "NtDeviceIoControlFile";
  if (id == 0x000000D9) return "NtDuplicateObject";
  if (id == 0x000000DA) return "NtFlushBuffersFile";
  if (id == 0x000000DB) return "NtFreeVirtualMemory";
  if (id == 0x000000DC) return "NtMakeTemporaryObject";
  if (id == 0x000000DD) return "NtOpenDirectoryObject";
  if (id == 0x000000DE) return "NtOpenFile";
  if (id == 0x000000DF) return "NtOpenSymbolicLinkObject";
  if (id == 0x000000E0) return "NtProtectVirtualMemory";
  if (id == 0x000000E1) return "NtPulseEvent";
  if (id == 0x000000E2) return "NtQueueApcThread";
  if (id == 0x000000E3) return "NtQueryDirectoryFile";
  if (id == 0x000000E4) return "NtQueryDirectoryObject";
  if (id == 0x000000E5) return "NtQueryEvent";
  if (id == 0x000000E6) return "NtQueryFullAttributesFile";
  if (id == 0x000000E7) return "NtQueryInformationFile";
  if (id == 0x000000E8) return "NtQueryIoCompletion";
  if (id == 0x000000E9) return "NtQueryMutant";
  if (id == 0x000000EA) return "NtQuerySemaphore";
  if (id == 0x000000EB) return "NtQuerySymbolicLinkObject";
  if (id == 0x000000EC) return "NtQueryTimer";
  if (id == 0x000000ED) return "NtQueryVirtualMemory";
  if (id == 0x000000EE) return "NtQueryVolumeInformationFile";
  if (id == 0x000000EF) return "NtReadFile";
  if (id == 0x000000F0) return "NtReadFileScatter";
  if (id == 0x000000F1) return "NtReleaseMutant";
  if (id == 0x000000F2) return "NtReleaseSemaphore";
  if (id == 0x000000F3) return "NtRemoveIoCompletion";
  if (id == 0x000000F4) return "NtResumeThread";
  if (id == 0x000000F5) return "NtSetEvent";
  if (id == 0x000000F6) return "NtSetInformationFile";
  if (id == 0x000000F7) return "NtSetIoCompletion";
  if (id == 0x000000F8) return "NtSetSystemTime";
  if (id == 0x000000F9) return "NtSetTimerEx";
  if (id == 0x000000FA) return "NtSignalAndWaitForSingleObjectEx";
  if (id == 0x000000FB) return "NtSuspendThread";
  if (id == 0x000000FC) return "NtWaitForSingleObjectEx";
  if (id == 0x000000FD) return "NtWaitForMultipleObjectsEx";
  if (id == 0x000000FE) return "NtWriteFile";
  if (id == 0x000000FF) return "NtWriteFileGather";
  if (id == 0x00000100) return "NtYieldExecution";
  if (id == 0x00000101) return "ObCreateObject";
  if (id == 0x00000102) return "ObCreateSymbolicLink";
  if (id == 0x00000103) return "ObDeleteSymbolicLink";
  if (id == 0x00000104) return "ObDereferenceObject";
  if (id == 0x00000105) return "ObDirectoryObjectType";
  if (id == 0x00000106) return "ObGetWaitableObject";
  if (id == 0x00000107) return "ObInsertObject";
  if (id == 0x00000108) return "ObIsTitleObject";
  if (id == 0x00000109) return "ObLookupAnyThreadByThreadId";
  if (id == 0x0000010A) return "ObLookupThreadByThreadId";
  if (id == 0x0000010B) return "ObMakeTemporaryObject";
  if (id == 0x0000010C) return "ObOpenObjectByName";
  if (id == 0x0000010D) return "ObOpenObjectByPointer";
  if (id == 0x0000010E) return "ObReferenceObject";
  if (id == 0x0000010F) return "ObReferenceObjectByHandle";
  if (id == 0x00000110) return "ObReferenceObjectByName";
  if (id == 0x00000111) return "ObSymbolicLinkObjectType";
  if (id == 0x00000112) return "ObTranslateSymbolicLink";
  if (id == 0x00000113) return "RtlAnsiStringToUnicodeString";
  if (id == 0x00000114) return "RtlAppendStringToString";
  if (id == 0x00000115) return "RtlAppendUnicodeStringToString";
  if (id == 0x00000116) return "RtlAppendUnicodeToString";
  if (id == 0x00000117) return "RtlAssert";
  if (id == 0x00000118) return "RtlCaptureContext";
  if (id == 0x00000119) return "RtlCompareMemory";
  if (id == 0x0000011A) return "RtlCompareMemoryUlong";
  if (id == 0x0000011B) return "RtlCompareString";
  if (id == 0x0000011C) return "RtlCompareStringN";
  if (id == 0x0000011D) return "RtlCompareUnicodeString";
  if (id == 0x0000011E) return "RtlCompareUnicodeStringN";
  if (id == 0x0000011F) return "RtlCompareUtf8ToUnicode";
  if (id == 0x00000120) return "RtlCopyString";
  if (id == 0x00000121) return "RtlCopyUnicodeString";
  if (id == 0x00000122) return "RtlCreateUnicodeString";
  if (id == 0x00000123) return "RtlDowncaseUnicodeChar";
  if (id == 0x00000124) return "RtlEnterCriticalSection";
  if (id == 0x00000125) return "RtlFillMemoryUlong";
  if (id == 0x00000126) return "RtlFreeAnsiString";
  if (id == 0x00000127) return "RtlFreeAnsiString";
  if (id == 0x00000128) return "RtlGetCallersAddress";
  if (id == 0x00000129) return "RtlGetStackLimits";
  if (id == 0x0000012A) return "RtlImageXexHeaderField";
  if (id == 0x0000012B) return "RtlInitAnsiString";
  if (id == 0x0000012C) return "RtlInitUnicodeString";
  if (id == 0x0000012D) return "RtlInitializeCriticalSection";
  if (id == 0x0000012E) return "RtlInitializeCriticalSectionAndSpinCount";
  if (id == 0x0000012F) return "RtlLeaveCriticalSection";
  if (id == 0x00000130) return "RtlLookupFunctionEntry";
  if (id == 0x00000131) return "RtlLowerChar";
  if (id == 0x00000132) return "RtlMultiByteToUnicodeN";
  if (id == 0x00000133) return "RtlMultiByteToUnicodeSize";
  if (id == 0x00000134) return "RtlNtStatusToDosError";
  if (id == 0x00000135) return "RtlRaiseException";
  if (id == 0x00000136) return "RtlRaiseStatus";
  if (id == 0x00000137) return "RtlRip";
  if (id == 0x00000138) return "_scprintf";
  if (id == 0x00000139) return "_snprintf";
  if (id == 0x0000013A) return "sprintf";
  if (id == 0x0000013B) return "_scwprintf";
  if (id == 0x0000013C) return "_snwprintf";
  if (id == 0x0000013D) return "_swprintf";
  if (id == 0x0000013E) return "RtlTimeFieldsToTime";
  if (id == 0x0000013F) return "RtlTimeToTimeFields";
  if (id == 0x00000140) return "RtlTryEnterCriticalSection";
  if (id == 0x00000141) return "RtlUnicodeStringToAnsiString";
  if (id == 0x00000142) return "RtlUnicodeToMultiByteN";
  if (id == 0x00000143) return "RtlUnicodeToMultiByteSize";
  if (id == 0x00000144) return "RtlUnicodeToUtf8";
  if (id == 0x00000145) return "RtlUnicodeToUtf8Size";
  if (id == 0x00000146) return "RtlUnwind";
  if (id == 0x00000147) return "RtlUnwind2";
  if (id == 0x00000148) return "RtlUpcaseUnicodeChar";
  if (id == 0x00000149) return "RtlUpperChar";
  if (id == 0x0000014A) return "RtlVirtualUnwind";
  if (id == 0x0000014B) return "_vscprintf";
  if (id == 0x0000014C) return "_vsnprintf";
  if (id == 0x0000014D) return "vsprintf";
  if (id == 0x0000014E) return "_vscwprintf";
  if (id == 0x0000014F) return "_vsnwprintf";
  if (id == 0x00000150) return "_vswprintf";
  if (id == 0x00000151) return "SfcWriteLogical";
  if (id == 0x00000152) return "TlsAlloc";
  if (id == 0x00000153) return "TlsFree";
  if (id == 0x00000154) return "TlsGetValue";
  if (id == 0x00000155) return "TlsSetValue";
  if (id == 0x00000156) return "XboxHardwareInfo";
  if (id == 0x00000157) return "XboxKrnlVersion";
  if (id == 0x00000158) return "XeCryptAesKey";
  if (id == 0x00000159) return "XeCryptAesEcb";
  if (id == 0x0000015A) return "XeCryptAesCbc";
  if (id == 0x0000015B) return "XeCryptBnDwLeDhEqualBase";
  if (id == 0x0000015C) return "XeCryptBnDwLeDhInvalBase";
  if (id == 0x0000015D) return "XeCryptBnDwLeDhModExp";
  if (id == 0x0000015E) return "XeCryptBnDw_Copy";
  if (id == 0x0000015F) return "XeCryptBnDw_SwapLeBe";
  if (id == 0x00000160) return "XeCryptBnDw_Zero";
  if (id == 0x00000161) return "XeCryptBnDwLePkcs1Format";
  if (id == 0x00000162) return "XeCryptBnDwLePkcs1Verify";
  if (id == 0x00000163) return "XeCryptBnQwBeSigCreate";
  if (id == 0x00000164) return "XeCryptBnQwBeSigFormat";
  if (id == 0x00000165) return "XeCryptBnQwBeSigVerify";
  if (id == 0x00000167) return "XeCryptBnQwNeModExp";
  if (id == 0x00000168) return "XeCryptBnQwNeModExpRoot";
  if (id == 0x00000169) return "XeCryptBnQwNeModInv";
  if (id == 0x0000016A) return "XeCryptBnQwNeModMul";
  if (id == 0x0000016B) return "XeCryptBnQwNeRsaKeyGen";
  if (id == 0x0000016C) return "XeCryptBnQwNeRsaPrvCrypt";
  if (id == 0x0000016D) return "XeCryptBnQwNeRsaPubCrypt";
  if (id == 0x0000016E) return "XeCryptBnQw_Copy";
  if (id == 0x0000016F) return "XeCryptBnQw_SwapDwQw";
  if (id == 0x00000170) return "XeCryptBnQw_SwapDwQwLeBe";
  if (id == 0x00000171) return "XeCryptBnQw_SwapLeBe";
  if (id == 0x00000172) return "XeCryptBnQw_Zero";
  if (id == 0x00000173) return "XeCryptChainAndSumMac";
  if (id == 0x00000174) return "XeCryptDesParity";
  if (id == 0x00000175) return "XeCryptDesKey";
  if (id == 0x00000176) return "XeCryptDesEcb";
  if (id == 0x00000177) return "XeCryptDesCbc";
  if (id == 0x00000178) return "XeCryptDes3Key";
  if (id == 0x00000179) return "XeCryptDes3Ecb";
  if (id == 0x0000017A) return "XeCryptDes3Cbc";
  if (id == 0x0000017B) return "XeCryptHmacMd5Init";
  if (id == 0x0000017C) return "XeCryptHmacMd5Update";
  if (id == 0x0000017D) return "XeCryptHmacMd5Final";
  if (id == 0x0000017E) return "XeCryptHmacMd5";
  if (id == 0x0000017F) return "XeCryptHmacShaInit";
  if (id == 0x00000180) return "XeCryptHmacShaUpdate";
  if (id == 0x00000181) return "XeCryptHmacShaFinal";
  if (id == 0x00000182) return "XeCryptHmacSha";
  if (id == 0x00000183) return "XeCryptHmacShaVerify";
  if (id == 0x00000184) return "XeCryptMd5Init";
  if (id == 0x00000185) return "XeCryptMd5Update";
  if (id == 0x00000186) return "XeCryptMd5Final";
  if (id == 0x00000187) return "XeCryptMd5";
  if (id == 0x00000188) return "XeCryptParveEcb";
  if (id == 0x00000189) return "XeCryptParveCbcMac";
  if (id == 0x0000018A) return "XeCryptRandom";
  if (id == 0x0000018B) return "XeCryptRc4Key";
  if (id == 0x0000018C) return "XeCryptRc4Ecb";
  if (id == 0x0000018D) return "XeCryptRc4";
  if (id == 0x0000018E) return "XeCryptShaInit";
  if (id == 0x0000018F) return "XeCryptShaUpdate";
  if (id == 0x00000190) return "XeCryptShaFinal";
  if (id == 0x00000191) return "XeCryptSha";
  if (id == 0x00000192) return "XexExecutableModuleHandle";
  if (id == 0x00000193) return "XexCheckExecutablePrivilege";
  if (id == 0x00000194) return "XexGetModuleHandle";
  if (id == 0x00000195) return "XexGetModuleSection";
  if (id == 0x00000196) return "XexGetProcedureAddress";
  if (id == 0x00000197) return "XexLoadExecutable";
  if (id == 0x00000198) return "XexLoadImage";
  if (id == 0x00000199) return "XexLoadImageFromMemory";
  if (id == 0x0000019A) return "XexLoadImageHeaders";
  if (id == 0x0000019B) return "XexPcToFileHeader";
  if (id == 0x0000019C) return "XexRegisterLoader";
  if (id == 0x0000019D) return "XexRegisterPatchDescriptor";
  if (id == 0x0000019E) return "XexSendDeferredNotifications";
  if (id == 0x0000019F) return "XexStartExecutable";
  if (id == 0x000001A0) return "XexUnloadImage";
  if (id == 0x000001A1) return "XexUnloadImageAndExitThread";
  if (id == 0x000001A2) return "XexUnloadTitleModules";
  if (id == 0x000001A3) return "XexVerifyImageHeaders";
  if (id == 0x000001A4) return "__C_specific_handler";
  if (id == 0x000001A5) return "DbgLoadImageSymbols";
  if (id == 0x000001A6) return "DbgUnLoadImageSymbols";
  if (id == 0x000001A7) return "RtlImageDirectoryEntryToData";
  if (id == 0x000001A8) return "RtlImageNtHeader";
  if (id == 0x000001A9) return "ExDebugMonitorService";
  if (id == 0x000001AA) return "MmDbgReadCheck";
  if (id == 0x000001AB) return "MmDbgReleaseAddress";
  if (id == 0x000001AC) return "MmDbgWriteCheck";
  if (id == 0x000001AD) return "ExLoadedCommandLine";
  if (id == 0x000001AE) return "ExLoadedImageName";
  if (id == 0x000001AF) return "VdBlockUntilGUIIdle";
  if (id == 0x000001B0) return "VdCallGraphicsNotificationRoutines";
  if (id == 0x000001B1) return "VdDisplayFatalError";
  if (id == 0x000001B3) return "VdEnableClosedCaption";
  if (id == 0x000001B4) return "VdEnableDisablePowerSavingMode";
  if (id == 0x000001B5) return "VdEnableRingBufferRPtrWriteBack";
  if (id == 0x000001B6) return "VdGenerateGPUCSCCoefficients";
  if (id == 0x000001B7) return "VdGetClosedCaptionReadyStatus";
  if (id == 0x000001B8) return "VdGetCurrentDisplayGamma";
  if (id == 0x000001B9) return "VdGetCurrentDisplayInformation";
  if (id == 0x000001BA) return "VdGetDefaultMEInitCommand";
  if (id == 0x000001BB) return "VdGetDisplayModeOverride";
  if (id == 0x000001BC) return "VdGetGraphicsAsicID";
  if (id == 0x000001BD) return "VdGetSystemCommandBuffer";
  if (id == 0x000001BE) return "VdGlobalDevice";
  if (id == 0x000001BF) return "VdHSIOCalibrationLock";
  if (id == 0x000001C0) return "VdInitializeEngines";
  if (id == 0x000001C1) return "VdInitializeRingBuffer";
  if (id == 0x000001C2) return "VdInitializeScaler";
  if (id == 0x000001C3) return "VdInitializeScalerCommandBuffer";
  if (id == 0x000001C4) return "VdIsHSIOTrainingSucceeded";
  if (id == 0x000001C5) return "VdPersistDisplay";
  if (id == 0x000001C6) return "VdQuerySystemCommandBuffer";
  if (id == 0x000001C7) return "VdQueryVideoFlags";
  if (id == 0x000001C8) return "VdQueryVideoMode";
  if (id == 0x000001C9) return "VdReadDVERegisterUlong";
  if (id == 0x000001CA) return "VdReadWriteHSIOCalibrationFlag";
  if (id == 0x000001CB) return "VdRegisterGraphicsNotification";
  if (id == 0x000001CC) return "VdSendClosedCaptionData";
  if (id == 0x000001CD) return "VdSetCGMSOption";
  if (id == 0x000001CE) return "VdSetColorProfileAdjustment";
  if (id == 0x000001CF) return "VdSetDisplayMode";
  if (id == 0x000001D0) return "VdSetDisplayModeOverride";
  if (id == 0x000001D1) return "VdSetGraphicsInterruptCallback";
  if (id == 0x000001D2) return "VdSetMacrovisionOption";
  if (id == 0x000001D3) return "VdSetSystemCommandBuffer";
  if (id == 0x000001D4) return "VdSetSystemCommandBufferGpuIdentifierAddress";
  if (id == 0x000001D5) return "VdSetWSSData";
  if (id == 0x000001D6) return "VdSetWSSOption";
  if (id == 0x000001D7) return "VdShutdownEngines";
  if (id == 0x000001D8) return "VdTurnDisplayOff";
  if (id == 0x000001D9) return "VdTurnDisplayOn";
  if (id == 0x000001DA) return "VdWriteDVERegisterUlong";
  if (id == 0x000001DB) return "KiApcNormalRoutineNop";
  if (id == 0x000001DC) return "XVoicedSubmitPacket";
  if (id == 0x000001DD) return "XVoicedClose";
  if (id == 0x000001DE) return "XVoicedActivate";
  if (id == 0x000001DF) return "XInputdGetCapabilities";
  if (id == 0x000001E0) return "XInputdReadState";
  if (id == 0x000001E1) return "XInputdWriteState";
  if (id == 0x000001E2) return "XInputdNotify";
  if (id == 0x000001E3) return "XInputdRawState";
  if (id == 0x000001E4) return "HidGetCapabilities";
  if (id == 0x000001E5) return "HidReadKeys";
  if (id == 0x000001E6) return "XInputdGetDeviceStats";
  if (id == 0x000001E7) return "XInputdResetDevice";
  if (id == 0x000001E8) return "XInputdSetRingOfLight";
  if (id == 0x000001E9) return "XAudioRenderDriverInitialize";
  if (id == 0x000001EA) return "XAudioRegisterRenderDriverClient";
  if (id == 0x000001EB) return "XAudioUnregisterRenderDriverClient";
  if (id == 0x000001EC) return "XAudioSubmitRenderDriverFrame";
  if (id == 0x000001ED) return "XAudioRenderDriverLock";
  if (id == 0x000001EE) return "XAudioGetVoiceCategoryVolumeChangeMask";
  if (id == 0x000001EF) return "XAudioGetVoiceCategoryVolume";
  if (id == 0x000001F0) return "XAudioSetVoiceCategoryVolume";
  if (id == 0x000001F1) return "XAudioBeginDigitalBypassMode";
  if (id == 0x000001F2) return "XAudioEndDigitalBypassMode";
  if (id == 0x000001F3) return "XAudioSubmitDigitalPacket";
  if (id == 0x000001F4) return "XAudioQueryDriverPerformance";
  if (id == 0x000001F5) return "XAudioGetRenderDriverThread";
  if (id == 0x000001F6) return "NicSetUnicastAddress";
  if (id == 0x000001F7) return "NicAttach";
  if (id == 0x000001F8) return "NicDetach";
  if (id == 0x000001F9) return "NicXmit";
  if (id == 0x000001FA) return "NicUpdateMcastMembership";
  if (id == 0x000001FB) return "NicFlushXmitQueue";
  if (id == 0x000001FC) return "NicShutdown";
  if (id == 0x000001FD) return "NicGetLinkState";
  if (id == 0x000001FE) return "NicGetStats";
  if (id == 0x000001FF) return "NicGetOpt";
  if (id == 0x00000200) return "NicSetOpt";
  if (id == 0x00000201) return "DrvSetSysReqCallback";
  if (id == 0x00000202) return "DrvSetUserBindingCallback";
  if (id == 0x00000203) return "DrvSetContentStorageCallback";
  if (id == 0x00000204) return "DrvSetAutobind";
  if (id == 0x00000205) return "DrvGetContentStorageNotification";
  if (id == 0x00000206) return "MtpdBeginTransaction";
  if (id == 0x00000207) return "MtpdCancelTransaction";
  if (id == 0x00000208) return "MtpdEndTransaction";
  if (id == 0x00000209) return "MtpdGetCurrentDevices";
  if (id == 0x0000020A) return "MtpdReadData";
  if (id == 0x0000020B) return "MtpdReadEvent";
  if (id == 0x0000020C) return "MtpdResetDevice";
  if (id == 0x0000020D) return "MtpdSendData";
  if (id == 0x0000020E) return "MtpdVerifyProximity";
  if (id == 0x0000020F) return "XUsbcamSetCaptureMode";
  if (id == 0x00000210) return "XUsbcamGetConfig";
  if (id == 0x00000211) return "XUsbcamSetConfig";
  if (id == 0x00000212) return "XUsbcamGetState";
  if (id == 0x00000213) return "XUsbcamReadFrame";
  if (id == 0x00000214) return "XUsbcamSnapshot";
  if (id == 0x00000215) return "XUsbcamSetView";
  if (id == 0x00000216) return "XUsbcamGetView";
  if (id == 0x00000217) return "XUsbcamCreate";
  if (id == 0x00000218) return "XUsbcamDestroy";
  if (id == 0x00000219) return "XMACreateContext";
  if (id == 0x0000021A) return "XMAInitializeContext";
  if (id == 0x0000021B) return "XMAReleaseContext";
  if (id == 0x0000021C) return "XMAEnableContext";
  if (id == 0x0000021D) return "XMADisableContext";
  if (id == 0x0000021E) return "XMAGetOutputBufferWriteOffset";
  if (id == 0x0000021F) return "XMASetOutputBufferReadOffset";
  if (id == 0x00000220) return "XMAGetOutputBufferReadOffset";
  if (id == 0x00000221) return "XMASetOutputBufferValid";
  if (id == 0x00000222) return "XMAIsOutputBufferValid";
  if (id == 0x00000223) return "XMASetInputBuffer0Valid";
  if (id == 0x00000224) return "XMAIsInputBuffer0Valid";
  if (id == 0x00000225) return "XMASetInputBuffer1Valid";
  if (id == 0x00000226) return "XMAIsInputBuffer1Valid";
  if (id == 0x00000227) return "XMASetInputBuffer0";
  if (id == 0x00000228) return "XMASetInputBuffer1";
  if (id == 0x00000229) return "XMAGetPacketMetadata";
  if (id == 0x0000022A) return "XMABlockWhileInUse";
  if (id == 0x0000022B) return "XMASetLoopData";
  if (id == 0x0000022C) return "XMASetInputBufferReadOffset";
  if (id == 0x0000022D) return "XboxKrnlBaseVersion";
  if (id == 0x0000022E) return "XeKeysSaveKeyVault";
  if (id == 0x0000022F) return "XeKeysGetStatus";
  if (id == 0x00000230) return "XeKeysGeneratePrivateKey";
  if (id == 0x00000231) return "XeKeysGetKeyProperties";
  if (id == 0x00000232) return "XeKeysSetKey";
  if (id == 0x00000233) return "XeKeysGenerateRandomKey";
  if (id == 0x00000234) return "XeKeysGetKey";
  if (id == 0x00000235) return "XeKeysGetDigest";
  if (id == 0x00000236) return "XeKeysGetConsoleID";
  if (id == 0x00000237) return "XeKeysGetConsoleType";
  if (id == 0x00000238) return "XeKeysQwNeRsaPrvCrypt";
  if (id == 0x00000239) return "XeKeysHmacSha";
  if (id == 0x0000023A) return "XeKeysHmacMd5";
  if (id == 0x0000023B) return "XeKeysAesCbc";
  if (id == 0x0000023C) return "XeKeysDes2Cbc";
  if (id == 0x0000023D) return "XeKeysDesCbc";
  if (id == 0x0000023E) return "XeKeysObscureKey";
  if (id == 0x0000023F) return "XeKeysHmacShaUsingKey";
  if (id == 0x00000240) return "XeKeysHmacMd5UsingKey";
  if (id == 0x00000241) return "XeKeysAesCbcUsingKey";
  if (id == 0x00000242) return "XeKeysDes2CbcUsingKey";
  if (id == 0x00000243) return "XeKeysDesCbcUsingKey";
  if (id == 0x00000244) return "XeKeysObfuscate";
  if (id == 0x00000245) return "XeKeysUnObfuscate";
  if (id == 0x00000246) return "XeKeysConsolePrivateKeySign";
  if (id == 0x00000247) return "XeKeysConsoleSignatureVerification";
  if (id == 0x00000248) return "XeKeysSaveEncryptedBootLoader";
  if (id == 0x00000249) return "XAudioGetSpeakerConfig";
  if (id == 0x0000024A) return "XAudioSetSpeakerConfig";
  if (id == 0x0000024B) return "XeKeysInitialize";
  if (id == 0x0000024C) return "XeKeysGetFactoryChallenge";
  if (id == 0x0000024D) return "XeKeysSetFactoryResponse";
  if (id == 0x0000024E) return "XeKeysInitializeFuses";
  if (id == 0x0000024F) return "VdGlobalXamDevice";
  if (id == 0x00000250) return "KeQueryBackgroundProcessors";
  if (id == 0x00000251) return "KeSetBackgroundProcessors";
  if (id == 0x00000252) return "FdfxCreateDevice";
  if (id == 0x00000253) return "FdfxDeleteDevice";
  if (id == 0x00000254) return "VdEnableDisableClockGating";
  if (id == 0x00000255) return "FdfxGetRootDigest";
  if (id == 0x00000256) return "VdSetCscMatricesOverride";
  if (id == 0x00000257) return "XMAGetInputBufferReadOffset";
  if (id == 0x00000258) return "VdRegisterXamGraphicsNotification";
  if (id == 0x0000025A) return "XInputdSetRFPowerMode";
  if (id == 0x0000025B) return "XInputdSetRadioFrequency";

  return nullptr;
}

const char* xboxkrnlNameGen_1838(int id)
{
  if (id == 0x00000001) return "DbgBreakPoint";
  if (id == 0x00000002) return "DbgBreakPointWithStatus";
  if (id == 0x00000003) return "DbgPrint";
  if (id == 0x00000004) return "DbgPrompt";
  if (id == 0x00000005) return "DumpGetRawDumpInfo";
  if (id == 0x00000006) return "DumpWriteDump";
  if (id == 0x00000007) return "ExAcquireReadWriteLockExclusive";
  if (id == 0x00000008) return "ExAcquireReadWriteLockShared";
  if (id == 0x00000009) return "ExAllocatePool";
  if (id == 0x0000000A) return "ExAllocatePoolWithTag";
  if (id == 0x0000000B) return "ExAllocatePoolTypeWithTag";
  if (id == 0x0000000C) return "ExConsoleGameRegion";
  if (id == 0x0000000D) return "ExCreateThread";
  if (id == 0x0000000E) return "ExEventObjectType";
  if (id == 0x0000000F) return "ExFreePool";
  if (id == 0x00000010) return "ExGetXConfigSetting";
  if (id == 0x00000011) return "ExInitializeReadWriteLock";
  if (id == 0x00000012) return "ExMutantObjectType";
  if (id == 0x00000013) return "ExQueryPoolBlockSize";
  if (id == 0x00000014) return "ExRegisterThreadNotification";
  if (id == 0x00000015) return "ExRegisterTitleTerminateNotification";
  if (id == 0x00000016) return "ExReleaseReadWriteLock";
  if (id == 0x00000017) return "ExSemaphoreObjectType";
  if (id == 0x00000018) return "ExSetXConfigSetting";
  if (id == 0x00000019) return "ExTerminateThread";
  if (id == 0x0000001A) return "ExTerminateTitleProcess";
  if (id == 0x0000001B) return "ExThreadObjectType";
  if (id == 0x0000001C) return "ExTimerObjectType";
  if (id == 0x00000020) return "FscGetCacheElementCount";
  if (id == 0x00000021) return "FscSetCacheElementCount";
  if (id == 0x00000022) return "HalGetCurrentAVPack";
  if (id == 0x00000023) return "HalGpioControl";
  if (id == 0x00000024) return "HalOpenCloseODDTray";
  if (id == 0x00000025) return "HalReadWritePCISpace";
  if (id == 0x00000026) return "HalRegisterShutdownNotification";
  if (id == 0x00000027) return "HalRegisterSMCNotification";
  if (id == 0x00000028) return "HalReturnToFirmware";
  if (id == 0x00000029) return "HalSendSMCMessage";
  if (id == 0x0000002A) return "HalSetAudioEnable";
  if (id == 0x0000002B) return "InterlockedFlushSList";
  if (id == 0x0000002C) return "InterlockedPopEntrySList";
  if (id == 0x0000002D) return "InterlockedPushEntrySList";
  if (id == 0x0000002E) return "IoAcquireDeviceObjectLock";
  if (id == 0x0000002F) return "IoAllocateIrp";
  if (id == 0x00000030) return "IoBuildAsynchronousFsdRequest";
  if (id == 0x00000031) return "IoBuildDeviceIoControlRequest";
  if (id == 0x00000032) return "IoBuildSynchronousFsdRequest";
  if (id == 0x00000033) return "IoCallDriver";
  if (id == 0x00000034) return "IoCheckShareAccess";
  if (id == 0x00000035) return "IoCompleteRequest";
  if (id == 0x00000036) return "IoCompletionObjectType";
  if (id == 0x00000037) return "IoCreateDevice";
  if (id == 0x00000038) return "IoCreateFile";
  if (id == 0x00000039) return "IoDeleteDevice";
  if (id == 0x0000003A) return "IoDeviceObjectType";
  if (id == 0x0000003B) return "IoDismountVolume";
  if (id == 0x0000003C) return "IoDismountVolumeByFileHandle";
  if (id == 0x0000003D) return "IoDismountVolumeByName";
  if (id == 0x0000003E) return "IoFileObjectType";
  if (id == 0x0000003F) return "IoFreeIrp";
  if (id == 0x00000040) return "IoInitializeIrp";
  if (id == 0x00000041) return "IoInvalidDeviceRequest";
  if (id == 0x00000042) return "KiApcNormalRoutineNop";
  if (id == 0x00000043) return "IoQueueThreadIrp";
  if (id == 0x00000044) return "IoReleaseDeviceObjectLock";
  if (id == 0x00000045) return "IoRemoveShareAccess";
  if (id == 0x00000046) return "IoSetIoCompletion";
  if (id == 0x00000047) return "IoSetShareAccess";
  if (id == 0x00000048) return "IoStartNextPacket";
  if (id == 0x00000049) return "IoStartNextPacketByKey";
  if (id == 0x0000004A) return "IoStartPacket";
  if (id == 0x0000004B) return "IoSynchronousDeviceIoControlRequest";
  if (id == 0x0000004C) return "IoSynchronousFsdRequest";
  if (id == 0x0000004D) return "KeAcquireSpinLockAtRaisedIrql";
  if (id == 0x0000004E) return "KeAlertResumeThread";
  if (id == 0x0000004F) return "KeAlertThread";
  if (id == 0x00000050) return "KeBlowFuses";
  if (id == 0x00000051) return "KeBoostPriorityThread";
  if (id == 0x00000052) return "KeBugCheck";
  if (id == 0x00000053) return "KeBugCheckEx";
  if (id == 0x00000054) return "KeCancelTimer";
  if (id == 0x00000055) return "KeConnectInterrupt";
  if (id == 0x00000056) return "KeContextFromKframes";
  if (id == 0x00000057) return "KeContextToKframes";
  if (id == 0x00000058) return "KeCreateUserMode";
  if (id == 0x00000059) return "KeDebugMonitorData";
  if (id == 0x0000005A) return "KeDelayExecutionThread";
  if (id == 0x0000005B) return "KeDeleteUserMode";
  if (id == 0x0000005C) return "KeDisconnectInterrupt";
  if (id == 0x0000005D) return "KeEnableFpuExceptions";
  if (id == 0x0000005E) return "KeEnablePPUPerformanceMonitor";
  if (id == 0x0000005F) return "KeEnterCriticalRegion";
  if (id == 0x00000060) return "KeEnterUserMode";
  if (id == 0x00000061) return "KeFlushCacheRange";
  if (id == 0x00000062) return "KeFlushCurrentEntireTb";
  if (id == 0x00000063) return "KeFlushEntireTb";
  if (id == 0x00000064) return "KeFlushUserModeCurrentTb";
  if (id == 0x00000065) return "KeFlushUserModeTb";
  if (id == 0x00000066) return "KeGetCurrentProcessType";
  if (id == 0x00000067) return "KeGetPMWRegister";
  if (id == 0x00000068) return "KeGetPRVRegister";
  if (id == 0x00000069) return "KeGetSocRegister";
  if (id == 0x0000006A) return "KeGetSpecialPurposeRegister";
  if (id == 0x0000006B) return "KeLockL2";
  if (id == 0x0000006C) return "KeUnlockL2";
  if (id == 0x0000006D) return "KeInitializeApc";
  if (id == 0x0000006E) return "KeInitializeDeviceQueue";
  if (id == 0x0000006F) return "KeInitializeDpc";
  if (id == 0x00000070) return "KeInitializeEvent";
  if (id == 0x00000071) return "KeInitializeInterrupt";
  if (id == 0x00000072) return "KeInitializeMutant";
  if (id == 0x00000073) return "KeInitializeQueue";
  if (id == 0x00000074) return "KeInitializeSemaphore";
  if (id == 0x00000075) return "KeInitializeTimerEx";
  if (id == 0x00000076) return "KeInsertByKeyDeviceQueue";
  if (id == 0x00000077) return "KeInsertDeviceQueue";
  if (id == 0x00000078) return "KeInsertHeadQueue";
  if (id == 0x00000079) return "KeInsertQueue";
  if (id == 0x0000007A) return "KeInsertQueueApc";
  if (id == 0x0000007B) return "KeInsertQueueDpc";
  if (id == 0x0000007C) return "KeIpiGenericCall";
  if (id == 0x0000007D) return "KeLeaveCriticalRegion";
  if (id == 0x0000007E) return "KeLeaveUserMode";
  if (id == 0x0000007F) return "KePulseEvent";
  if (id == 0x00000080) return "KeQueryBackgroundProcessors";
  if (id == 0x00000081) return "KeQueryBasePriorityThread";
  if (id == 0x00000082) return "KeQueryInterruptTime";
  if (id == 0x00000083) return "KeQueryPerformanceFrequency";
  if (id == 0x00000084) return "KeQuerySystemTime";
  if (id == 0x00000085) return "KeRaiseIrqlToDpcLevel";
  if (id == 0x00000086) return "KeRegisterDriverNotification";
  if (id == 0x00000087) return "KeReleaseMutant";
  if (id == 0x00000088) return "KeReleaseSemaphore";
  if (id == 0x00000089) return "KeReleaseSpinLockFromRaisedIrql";
  if (id == 0x0000008A) return "KeRemoveByKeyDeviceQueue";
  if (id == 0x0000008B) return "KeRemoveDeviceQueue";
  if (id == 0x0000008C) return "KeRemoveEntryDeviceQueue";
  if (id == 0x0000008D) return "KeRemoveQueue";
  if (id == 0x0000008E) return "KeRemoveQueueDpc";
  if (id == 0x0000008F) return "KeResetEvent";
  if (id == 0x00000090) return "KeRestoreFloatingPointState";
  if (id == 0x00000091) return "KeRestoreVectorUnitState";
  if (id == 0x00000092) return "KeResumeThread";
  if (id == 0x00000093) return "KeRetireDpcList";
  if (id == 0x00000094) return "KeRundownQueue";
  if (id == 0x00000095) return "KeSaveFloatingPointState";
  if (id == 0x00000096) return "KeSaveVectorUnitState";
  if (id == 0x00000097) return "KeSetAffinityThread";
  if (id == 0x00000098) return "KeSetBackgroundProcessors";
  if (id == 0x00000099) return "KeSetBasePriorityThread";
  if (id == 0x0000009A) return "KeSetCurrentProcessType";
  if (id == 0x0000009B) return "KeSetCurrentStackPointers";
  if (id == 0x0000009C) return "KeSetDisableBoostThread";
  if (id == 0x0000009D) return "KeSetEvent";
  if (id == 0x0000009E) return "KeSetEventBoostPriority";
  if (id == 0x0000009F) return "KeSetPMWRegister";
  if (id == 0x000000A0) return "KeSetPowerMode";
  if (id == 0x000000A1) return "KeSetPRVRegister";
  if (id == 0x000000A2) return "KeSetPriorityClassThread";
  if (id == 0x000000A3) return "KeSetPriorityThread";
  if (id == 0x000000A4) return "KeSetSocRegister";
  if (id == 0x000000A5) return "KeSetSpecialPurposeRegister";
  if (id == 0x000000A6) return "KeSetTimer";
  if (id == 0x000000A7) return "KeSetTimerEx";
  if (id == 0x000000A8) return "KeStallExecutionProcessor";
  if (id == 0x000000A9) return "KeSuspendThread";
  if (id == 0x000000AA) return "KeSweepDcacheRange";
  if (id == 0x000000AB) return "KeSweepIcacheRange";
  if (id == 0x000000AC) return "KeTestAlertThread";
  if (id == 0x000000AD) return "KeTimeStampBundle";
  if (id == 0x000000AE) return "KeTryToAcquireSpinLockAtRaisedIrql";
  if (id == 0x000000AF) return "KeWaitForMultipleObjects";
  if (id == 0x000000B0) return "KeWaitForSingleObject";
  if (id == 0x000000B1) return "KfAcquireSpinLock";
  if (id == 0x000000B2) return "KfRaiseIrql";
  if (id == 0x000000B3) return "KfLowerIrql";
  if (id == 0x000000B4) return "KfReleaseSpinLock";
  if (id == 0x000000B5) return "KiBugCheckData";
  if (id == 0x000000B6) return "LDICreateDecompression";
  if (id == 0x000000B7) return "LDIDecompress";
  if (id == 0x000000B8) return "LDIDestroyDecompression";
  if (id == 0x000000B9) return "MmAllocatePhysicalMemory";
  if (id == 0x000000BA) return "MmAllocatePhysicalMemoryEx";
  if (id == 0x000000BB) return "MmCreateKernelStack";
  if (id == 0x000000BC) return "MmDeleteKernelStack";
  if (id == 0x000000BD) return "MmFreePhysicalMemory";
  if (id == 0x000000BE) return "MmGetPhysicalAddress";
  if (id == 0x000000BF) return "MmIsAddressValid";
  if (id == 0x000000C0) return "MmLockAndMapSegmentArray";
  if (id == 0x000000C1) return "MmLockUnlockBufferPages";
  if (id == 0x000000C2) return "MmMapIoSpace";
  if (id == 0x000000C3) return "MmPersistPhysicalMemoryAllocation";
  if (id == 0x000000C4) return "MmQueryAddressProtect";
  if (id == 0x000000C5) return "MmQueryAllocationSize";
  if (id == 0x000000C6) return "MmQueryStatistics";
  if (id == 0x000000C7) return "MmSetAddressProtect";
  if (id == 0x000000C8) return "MmSplitPhysicalMemoryAllocation";
  if (id == 0x000000C9) return "MmUnlockAndUnmapSegmentArray";
  if (id == 0x000000CA) return "MmUnmapIoSpace";
  if (id == 0x000000CB) return "Nls844UnicodeCaseTable";
  if (id == 0x000000CC) return "NtAllocateVirtualMemory";
  if (id == 0x000000CD) return "NtCancelTimer";
  if (id == 0x000000CE) return "NtClearEvent";
  if (id == 0x000000CF) return "NtClose";
  if (id == 0x000000D0) return "NtCreateDirectoryObject";
  if (id == 0x000000D1) return "NtCreateEvent";
  if (id == 0x000000D2) return "NtCreateFile";
  if (id == 0x000000D3) return "NtCreateIoCompletion";
  if (id == 0x000000D4) return "NtCreateMutant";
  if (id == 0x000000D5) return "NtCreateSemaphore";
  if (id == 0x000000D6) return "NtCreateSymbolicLinkObject";
  if (id == 0x000000D7) return "NtCreateTimer";
  if (id == 0x000000D8) return "NtDeleteFile";
  if (id == 0x000000D9) return "NtDeviceIoControlFile";
  if (id == 0x000000DA) return "NtDuplicateObject";
  if (id == 0x000000DB) return "NtFlushBuffersFile";
  if (id == 0x000000DC) return "NtFreeVirtualMemory";
  if (id == 0x000000DD) return "NtMakeTemporaryObject";
  if (id == 0x000000DE) return "NtOpenDirectoryObject";
  if (id == 0x000000DF) return "NtOpenFile";
  if (id == 0x000000E0) return "NtOpenSymbolicLinkObject";
  if (id == 0x000000E1) return "NtProtectVirtualMemory";
  if (id == 0x000000E2) return "NtPulseEvent";
  if (id == 0x000000E3) return "NtQueueApcThread";
  if (id == 0x000000E4) return "NtQueryDirectoryFile";
  if (id == 0x000000E5) return "NtQueryDirectoryObject";
  if (id == 0x000000E6) return "NtQueryEvent";
  if (id == 0x000000E7) return "NtQueryFullAttributesFile";
  if (id == 0x000000E8) return "NtQueryInformationFile";
  if (id == 0x000000E9) return "NtQueryIoCompletion";
  if (id == 0x000000EA) return "NtQueryMutant";
  if (id == 0x000000EB) return "NtQuerySemaphore";
  if (id == 0x000000EC) return "NtQuerySymbolicLinkObject";
  if (id == 0x000000ED) return "NtQueryTimer";
  if (id == 0x000000EE) return "NtQueryVirtualMemory";
  if (id == 0x000000EF) return "NtQueryVolumeInformationFile";
  if (id == 0x000000F0) return "NtReadFile";
  if (id == 0x000000F1) return "NtReadFileScatter";
  if (id == 0x000000F2) return "NtReleaseMutant";
  if (id == 0x000000F3) return "NtReleaseSemaphore";
  if (id == 0x000000F4) return "NtRemoveIoCompletion";
  if (id == 0x000000F5) return "NtResumeThread";
  if (id == 0x000000F6) return "NtSetEvent";
  if (id == 0x000000F7) return "NtSetInformationFile";
  if (id == 0x000000F8) return "NtSetIoCompletion";
  if (id == 0x000000F9) return "NtSetSystemTime";
  if (id == 0x000000FA) return "NtSetTimerEx";
  if (id == 0x000000FB) return "NtSignalAndWaitForSingleObjectEx";
  if (id == 0x000000FC) return "NtSuspendThread";
  if (id == 0x000000FD) return "NtWaitForSingleObjectEx";
  if (id == 0x000000FE) return "NtWaitForMultipleObjectsEx";
  if (id == 0x000000FF) return "NtWriteFile";
  if (id == 0x00000100) return "NtWriteFileGather";
  if (id == 0x00000101) return "NtYieldExecution";
  if (id == 0x00000102) return "ObCreateObject";
  if (id == 0x00000103) return "ObCreateSymbolicLink";
  if (id == 0x00000104) return "ObDeleteSymbolicLink";
  if (id == 0x00000105) return "ObDereferenceObject";
  if (id == 0x00000106) return "ObDirectoryObjectType";
  if (id == 0x00000107) return "ObGetWaitableObject";
  if (id == 0x00000108) return "ObInsertObject";
  if (id == 0x00000109) return "ObIsTitleObject";
  if (id == 0x0000010A) return "ObLookupAnyThreadByThreadId";
  if (id == 0x0000010B) return "ObLookupThreadByThreadId";
  if (id == 0x0000010C) return "ObMakeTemporaryObject";
  if (id == 0x0000010D) return "ObOpenObjectByName";
  if (id == 0x0000010E) return "ObOpenObjectByPointer";
  if (id == 0x0000010F) return "ObReferenceObject";
  if (id == 0x00000110) return "ObReferenceObjectByHandle";
  if (id == 0x00000111) return "ObReferenceObjectByName";
  if (id == 0x00000112) return "ObSymbolicLinkObjectType";
  if (id == 0x00000113) return "ObTranslateSymbolicLink";
  if (id == 0x00000114) return "RtlAnsiStringToUnicodeString";
  if (id == 0x00000115) return "RtlAppendStringToString";
  if (id == 0x00000116) return "RtlAppendUnicodeStringToString";
  if (id == 0x00000117) return "RtlAppendUnicodeToString";
  if (id == 0x00000118) return "RtlAssert";
  if (id == 0x00000119) return "RtlCaptureContext";
  if (id == 0x0000011A) return "RtlCompareMemory";
  if (id == 0x0000011B) return "RtlCompareMemoryUlong";
  if (id == 0x0000011C) return "RtlCompareString";
  if (id == 0x0000011D) return "RtlCompareStringN";
  if (id == 0x0000011E) return "RtlCompareUnicodeString";
  if (id == 0x0000011F) return "RtlCompareUnicodeStringN";
  if (id == 0x00000120) return "RtlCompareUtf8ToUnicode";
  if (id == 0x00000121) return "RtlCopyString";
  if (id == 0x00000122) return "RtlCopyUnicodeString";
  if (id == 0x00000123) return "RtlCreateUnicodeString";
  if (id == 0x00000124) return "RtlDowncaseUnicodeChar";
  if (id == 0x00000125) return "RtlEnterCriticalSection";
  if (id == 0x00000126) return "RtlFillMemoryUlong";
  if (id == 0x00000127) return "RtlFreeAnsiString";
  if (id == 0x00000128) return "RtlFreeAnsiString";
  if (id == 0x00000129) return "RtlGetCallersAddress";
  if (id == 0x0000012A) return "RtlGetStackLimits";
  if (id == 0x0000012B) return "RtlImageXexHeaderField";
  if (id == 0x0000012C) return "RtlInitAnsiString";
  if (id == 0x0000012D) return "RtlInitUnicodeString";
  if (id == 0x0000012E) return "RtlInitializeCriticalSection";
  if (id == 0x0000012F) return "RtlInitializeCriticalSectionAndSpinCount";
  if (id == 0x00000130) return "RtlLeaveCriticalSection";
  if (id == 0x00000131) return "RtlLookupFunctionEntry";
  if (id == 0x00000132) return "RtlLowerChar";
  if (id == 0x00000133) return "RtlMultiByteToUnicodeN";
  if (id == 0x00000134) return "RtlMultiByteToUnicodeSize";
  if (id == 0x00000135) return "RtlNtStatusToDosError";
  if (id == 0x00000136) return "RtlRaiseException";
  if (id == 0x00000137) return "RtlRaiseStatus";
  if (id == 0x00000138) return "RtlRip";
  if (id == 0x00000139) return "_scprintf";
  if (id == 0x0000013A) return "_snprintf";
  if (id == 0x0000013B) return "sprintf";
  if (id == 0x0000013C) return "_scwprintf";
  if (id == 0x0000013D) return "_snwprintf";
  if (id == 0x0000013E) return "_swprintf";
  if (id == 0x0000013F) return "RtlTimeFieldsToTime";
  if (id == 0x00000140) return "RtlTimeToTimeFields";
  if (id == 0x00000141) return "RtlTryEnterCriticalSection";
  if (id == 0x00000142) return "RtlUnicodeStringToAnsiString";
  if (id == 0x00000143) return "RtlUnicodeToMultiByteN";
  if (id == 0x00000144) return "RtlUnicodeToMultiByteSize";
  if (id == 0x00000145) return "RtlUnicodeToUtf8";
  if (id == 0x00000146) return "RtlUnicodeToUtf8Size";
  if (id == 0x00000147) return "RtlUnwind";
  if (id == 0x00000148) return "RtlUnwind2";
  if (id == 0x00000149) return "RtlUpcaseUnicodeChar";
  if (id == 0x0000014A) return "RtlUpperChar";
  if (id == 0x0000014B) return "RtlVirtualUnwind";
  if (id == 0x0000014C) return "_vscprintf";
  if (id == 0x0000014D) return "_vsnprintf";
  if (id == 0x0000014E) return "vsprintf";
  if (id == 0x0000014F) return "_vscwprintf";
  if (id == 0x00000150) return "_vsnwprintf";
  if (id == 0x00000151) return "_vswprintf";
  if (id == 0x00000152) return "KeTlsAlloc";
  if (id == 0x00000153) return "KeTlsFree";
  if (id == 0x00000154) return "KeTlsGetValue";
  if (id == 0x00000155) return "KeTlsSetValue";
  if (id == 0x00000156) return "XboxHardwareInfo";
  if (id == 0x00000157) return "XboxKrnlBaseVersion";
  if (id == 0x00000158) return "XboxKrnlVersion";
  if (id == 0x00000159) return "XeCryptAesKey";
  if (id == 0x0000015A) return "XeCryptAesEcb";
  if (id == 0x0000015B) return "XeCryptAesCbc";
  if (id == 0x0000015C) return "XeCryptBnDwLeDhEqualBase";
  if (id == 0x0000015D) return "XeCryptBnDwLeDhInvalBase";
  if (id == 0x0000015E) return "XeCryptBnDwLeDhModExp";
  if (id == 0x0000015F) return "XeCryptBnDw_Copy";
  if (id == 0x00000160) return "XeCryptBnDw_SwapLeBe";
  if (id == 0x00000161) return "XeCryptBnDw_Zero";
  if (id == 0x00000162) return "XeCryptBnDwLePkcs1Format";
  if (id == 0x00000163) return "XeCryptBnDwLePkcs1Verify";
  if (id == 0x00000164) return "XeCryptBnQwBeSigCreate";
  if (id == 0x00000165) return "XeCryptBnQwBeSigFormat";
  if (id == 0x00000166) return "XeCryptBnQwBeSigVerify";
  if (id == 0x00000167) return "XeCryptBnQwNeModExp";
  if (id == 0x00000168) return "XeCryptBnQwNeModExpRoot";
  if (id == 0x00000169) return "XeCryptBnQwNeModInv";
  if (id == 0x0000016A) return "XeCryptBnQwNeModMul";
  if (id == 0x0000016B) return "XeCryptBnQwNeRsaKeyGen";
  if (id == 0x0000016C) return "XeCryptBnQwNeRsaPrvCrypt";
  if (id == 0x0000016D) return "XeCryptBnQwNeRsaPubCrypt";
  if (id == 0x0000016E) return "XeCryptBnQw_Copy";
  if (id == 0x0000016F) return "XeCryptBnQw_SwapDwQw";
  if (id == 0x00000170) return "XeCryptBnQw_SwapDwQwLeBe";
  if (id == 0x00000171) return "XeCryptBnQw_SwapLeBe";
  if (id == 0x00000172) return "XeCryptBnQw_Zero";
  if (id == 0x00000173) return "XeCryptChainAndSumMac";
  if (id == 0x00000174) return "XeCryptDesParity";
  if (id == 0x00000175) return "XeCryptDesKey";
  if (id == 0x00000176) return "XeCryptDesEcb";
  if (id == 0x00000177) return "XeCryptDesCbc";
  if (id == 0x00000178) return "XeCryptDes3Key";
  if (id == 0x00000179) return "XeCryptDes3Ecb";
  if (id == 0x0000017A) return "XeCryptDes3Cbc";
  if (id == 0x0000017B) return "XeCryptHmacMd5Init";
  if (id == 0x0000017C) return "XeCryptHmacMd5Update";
  if (id == 0x0000017D) return "XeCryptHmacMd5Final";
  if (id == 0x0000017E) return "XeCryptHmacMd5";
  if (id == 0x0000017F) return "XeCryptHmacShaInit";
  if (id == 0x00000180) return "XeCryptHmacShaUpdate";
  if (id == 0x00000181) return "XeCryptHmacShaFinal";
  if (id == 0x00000182) return "XeCryptHmacSha";
  if (id == 0x00000183) return "XeCryptHmacShaVerify";
  if (id == 0x00000184) return "XeCryptMd5Init";
  if (id == 0x00000185) return "XeCryptMd5Update";
  if (id == 0x00000186) return "XeCryptMd5Final";
  if (id == 0x00000187) return "XeCryptMd5";
  if (id == 0x00000188) return "XeCryptParveEcb";
  if (id == 0x00000189) return "XeCryptParveCbcMac";
  if (id == 0x0000018A) return "XeCryptRandom";
  if (id == 0x0000018B) return "XeCryptRc4Key";
  if (id == 0x0000018C) return "XeCryptRc4Ecb";
  if (id == 0x0000018D) return "XeCryptRc4";
  if (id == 0x0000018E) return "XeCryptRotSumSha";
  if (id == 0x0000018F) return "XeCryptShaInit";
  if (id == 0x00000190) return "XeCryptShaUpdate";
  if (id == 0x00000191) return "XeCryptShaFinal";
  if (id == 0x00000192) return "XeCryptSha";
  if (id == 0x00000193) return "XexExecutableModuleHandle";
  if (id == 0x00000194) return "XexCheckExecutablePrivilege";
  if (id == 0x00000195) return "XexGetModuleHandle";
  if (id == 0x00000196) return "XexGetModuleSection";
  if (id == 0x00000197) return "XexGetProcedureAddress";
  if (id == 0x00000198) return "XexLoadExecutable";
  if (id == 0x00000199) return "XexLoadImage";
  if (id == 0x0000019A) return "XexLoadImageFromMemory";
  if (id == 0x0000019B) return "XexLoadImageHeaders";
  if (id == 0x0000019C) return "XexPcToFileHeader";
  if (id == 0x0000019D) return "XexRegisterLoader";
  if (id == 0x0000019E) return "XexRegisterPatchDescriptor";
  if (id == 0x0000019F) return "XexSendDeferredNotifications";
  if (id == 0x000001A0) return "XexStartExecutable";
  if (id == 0x000001A1) return "XexUnloadImage";
  if (id == 0x000001A2) return "XexUnloadImageAndExitThread";
  if (id == 0x000001A3) return "XexUnloadTitleModules";
  if (id == 0x000001A4) return "XexVerifyImageHeaders";
  if (id == 0x000001A5) return "__C_specific_handler";
  if (id == 0x000001A6) return "DbgLoadImageSymbols";
  if (id == 0x000001A7) return "DbgUnLoadImageSymbols";
  if (id == 0x000001A8) return "RtlImageDirectoryEntryToData";
  if (id == 0x000001A9) return "RtlImageNtHeader";
  if (id == 0x000001AA) return "ExDebugMonitorService";
  if (id == 0x000001AB) return "MmDbgReadCheck";
  if (id == 0x000001AC) return "MmDbgReleaseAddress";
  if (id == 0x000001AD) return "MmDbgWriteCheck";
  if (id == 0x000001AE) return "ExLoadedCommandLine";
  if (id == 0x000001AF) return "ExLoadedImageName";
  if (id == 0x000001B0) return "VdBlockUntilGUIIdle";
  if (id == 0x000001B1) return "VdCallGraphicsNotificationRoutines";
  if (id == 0x000001B2) return "VdDisplayFatalError";
  if (id == 0x000001B3) return "VdEnableClosedCaption";
  if (id == 0x000001B4) return "VdEnableDisableClockGating";
  if (id == 0x000001B5) return "VdEnableDisablePowerSavingMode";
  if (id == 0x000001B6) return "VdEnableRingBufferRPtrWriteBack";
  if (id == 0x000001B7) return "VdGenerateGPUCSCCoefficients";
  if (id == 0x000001B8) return "VdGetClosedCaptionReadyStatus";
  if (id == 0x000001B9) return "VdGetCurrentDisplayGamma";
  if (id == 0x000001BA) return "VdGetCurrentDisplayInformation";
  if (id == 0x000001BB) return "VdGetDisplayModeOverride";
  if (id == 0x000001BC) return "VdGetGraphicsAsicID";
  if (id == 0x000001BD) return "VdGetSystemCommandBuffer";
  if (id == 0x000001BE) return "VdGlobalDevice";
  if (id == 0x000001BF) return "VdGlobalXamDevice";
  if (id == 0x000001C0) return "VdGpuClockInMHz";
  if (id == 0x000001C1) return "VdHSIOCalibrationLock";
  if (id == 0x000001C2) return "VdInitializeEngines";
  if (id == 0x000001C3) return "VdInitializeRingBuffer";
  if (id == 0x000001C4) return "VdInitializeScaler";
  if (id == 0x000001C5) return "VdInitializeScalerCommandBuffer";
  if (id == 0x000001C6) return "VdIsHSIOTrainingSucceeded";
  if (id == 0x000001C7) return "VdPersistDisplay";
  if (id == 0x000001C8) return "VdQuerySystemCommandBuffer";
  if (id == 0x000001C9) return "VdQueryVideoFlags";
  if (id == 0x000001CA) return "VdQueryVideoMode";
  if (id == 0x000001CB) return "VdReadDVERegisterUlong";
  if (id == 0x000001CC) return "VdReadWriteHSIOCalibrationFlag";
  if (id == 0x000001CD) return "VdRegisterGraphicsNotification";
  if (id == 0x000001CE) return "VdRegisterXamGraphicsNotification";
  if (id == 0x000001CF) return "VdSendClosedCaptionData";
  if (id == 0x000001D0) return "VdSetCGMSOption";
  if (id == 0x000001D1) return "VdSetColorProfileAdjustment";
  if (id == 0x000001D2) return "VdSetCscMatricesOverride";
  if (id == 0x000001D3) return "VdSetDisplayMode";
  if (id == 0x000001D4) return "VdSetDisplayModeOverride";
  if (id == 0x000001D5) return "VdSetGraphicsInterruptCallback";
  if (id == 0x000001D6) return "VdSetHDCPOption";
  if (id == 0x000001D7) return "VdSetMacrovisionOption";
  if (id == 0x000001D8) return "VdSetSystemCommandBuffer";
  if (id == 0x000001D9) return "VdSetSystemCommandBufferGpuIdentifierAddress";
  if (id == 0x000001DA) return "VdSetWSSData";
  if (id == 0x000001DB) return "VdSetWSSOption";
  if (id == 0x000001DC) return "VdShutdownEngines";
  if (id == 0x000001DD) return "VdTurnDisplayOff";
  if (id == 0x000001DE) return "VdTurnDisplayOn";
  if (id == 0x000001DF) return "VdVerifyMEInitCommand";
  if (id == 0x000001E0) return "VdWriteDVERegisterUlong";
  if (id == 0x000001E1) return "XVoicedHeadsetPresent";
  if (id == 0x000001E2) return "XVoicedSubmitPacket";
  if (id == 0x000001E3) return "XVoicedClose";
  if (id == 0x000001E4) return "XVoicedActivate";
  if (id == 0x000001E5) return "XInputdGetCapabilities";
  if (id == 0x000001E6) return "XInputdReadState";
  if (id == 0x000001E7) return "XInputdWriteState";
  if (id == 0x000001E8) return "XInputdNotify";
  if (id == 0x000001E9) return "XInputdRawState";
  if (id == 0x000001EA) return "HidGetCapabilities";
  if (id == 0x000001EB) return "HidReadKeys";
  if (id == 0x000001EC) return "XInputdGetDeviceStats";
  if (id == 0x000001ED) return "XInputdResetDevice";
  if (id == 0x000001EE) return "XInputdSetRingOfLight";
  if (id == 0x000001EF) return "XInputdSetRFPowerMode";
  if (id == 0x000001F0) return "XInputdSetRadioFrequency";
  if (id == 0x000001F1) return "HidGetLastInputTime";
  if (id == 0x000001F2) return "XAudioRenderDriverInitialize";
  if (id == 0x000001F3) return "XAudioRegisterRenderDriverClient";
  if (id == 0x000001F4) return "XAudioUnregisterRenderDriverClient";
  if (id == 0x000001F5) return "XAudioSubmitRenderDriverFrame";
  if (id == 0x000001F6) return "XAudioRenderDriverLock";
  if (id == 0x000001F7) return "XAudioGetVoiceCategoryVolumeChangeMask";
  if (id == 0x000001F8) return "XAudioGetVoiceCategoryVolume";
  if (id == 0x000001F9) return "XAudioSetVoiceCategoryVolume";
  if (id == 0x000001FA) return "XAudioBeginDigitalBypassMode";
  if (id == 0x000001FB) return "XAudioEndDigitalBypassMode";
  if (id == 0x000001FC) return "XAudioSubmitDigitalPacket";
  if (id == 0x000001FD) return "XAudioQueryDriverPerformance";
  if (id == 0x000001FE) return "XAudioGetRenderDriverThread";
  if (id == 0x000001FF) return "XAudioGetSpeakerConfig";
  if (id == 0x00000200) return "XAudioSetSpeakerConfig";
  if (id == 0x00000201) return "NicSetUnicastAddress";
  if (id == 0x00000202) return "NicAttach";
  if (id == 0x00000203) return "NicDetach";
  if (id == 0x00000204) return "NicXmit";
  if (id == 0x00000205) return "NicUpdateMcastMembership";
  if (id == 0x00000206) return "NicFlushXmitQueue";
  if (id == 0x00000207) return "NicShutdown";
  if (id == 0x00000208) return "NicGetLinkState";
  if (id == 0x00000209) return "NicGetStats";
  if (id == 0x0000020A) return "NicGetOpt";
  if (id == 0x0000020B) return "NicSetOpt";
  if (id == 0x0000020C) return "DrvSetSysReqCallback";
  if (id == 0x0000020D) return "DrvSetUserBindingCallback";
  if (id == 0x0000020E) return "DrvSetContentStorageCallback";
  if (id == 0x0000020F) return "DrvSetAutobind";
  if (id == 0x00000210) return "DrvGetContentStorageNotification";
  if (id == 0x00000211) return "MtpdBeginTransaction";
  if (id == 0x00000212) return "MtpdCancelTransaction";
  if (id == 0x00000213) return "MtpdEndTransaction";
  if (id == 0x00000214) return "MtpdGetCurrentDevices";
  if (id == 0x00000215) return "MtpdReadData";
  if (id == 0x00000216) return "MtpdReadEvent";
  if (id == 0x00000217) return "MtpdResetDevice";
  if (id == 0x00000218) return "MtpdSendData";
  if (id == 0x00000219) return "MtpdVerifyProximity";
  if (id == 0x0000021A) return "XUsbcamSetCaptureMode";
  if (id == 0x0000021B) return "XUsbcamGetConfig";
  if (id == 0x0000021C) return "XUsbcamSetConfig";
  if (id == 0x0000021D) return "XUsbcamGetState";
  if (id == 0x0000021E) return "XUsbcamReadFrame";
  if (id == 0x0000021F) return "XUsbcamSnapshot";
  if (id == 0x00000220) return "XUsbcamSetView";
  if (id == 0x00000221) return "XUsbcamGetView";
  if (id == 0x00000222) return "XUsbcamCreate";
  if (id == 0x00000223) return "XUsbcamDestroy";
  if (id == 0x00000224) return "XMACreateContext";
  if (id == 0x00000225) return "XMAInitializeContext";
  if (id == 0x00000226) return "XMAReleaseContext";
  if (id == 0x00000227) return "XMAEnableContext";
  if (id == 0x00000228) return "XMADisableContext";
  if (id == 0x00000229) return "XMAGetOutputBufferWriteOffset";
  if (id == 0x0000022A) return "XMASetOutputBufferReadOffset";
  if (id == 0x0000022B) return "XMAGetOutputBufferReadOffset";
  if (id == 0x0000022C) return "XMASetOutputBufferValid";
  if (id == 0x0000022D) return "XMAIsOutputBufferValid";
  if (id == 0x0000022E) return "XMASetInputBuffer0Valid";
  if (id == 0x0000022F) return "XMAIsInputBuffer0Valid";
  if (id == 0x00000230) return "XMASetInputBuffer1Valid";
  if (id == 0x00000231) return "XMAIsInputBuffer1Valid";
  if (id == 0x00000232) return "XMASetInputBuffer0";
  if (id == 0x00000233) return "XMASetInputBuffer1";
  if (id == 0x00000234) return "XMAGetPacketMetadata";
  if (id == 0x00000235) return "XMABlockWhileInUse";
  if (id == 0x00000236) return "XMASetLoopData";
  if (id == 0x00000237) return "XMASetInputBufferReadOffset";
  if (id == 0x00000238) return "XMAGetInputBufferReadOffset";
  if (id == 0x0000023A) return "XeKeysGetFactoryChallenge";
  if (id == 0x0000023B) return "XeKeysSetFactoryResponse";
  if (id == 0x0000023C) return "XeKeysInitializeFuses";
  if (id == 0x0000023D) return "XeKeysSaveBootLoader";
  if (id == 0x0000023E) return "XeKeysSaveKeyVault";
  if (id == 0x0000023F) return "XeKeysGetStatus";
  if (id == 0x00000240) return "XeKeysGeneratePrivateKey";
  if (id == 0x00000241) return "XeKeysGetKeyProperties";
  if (id == 0x00000242) return "XeKeysSetKey";
  if (id == 0x00000243) return "XeKeysGenerateRandomKey";
  if (id == 0x00000244) return "XeKeysGetKey";
  if (id == 0x00000245) return "XeKeysGetDigest";
  if (id == 0x00000246) return "XeKeysGetConsoleID";
  if (id == 0x00000247) return "XeKeysGetConsoleType";
  if (id == 0x00000248) return "XeKeysQwNeRsaPrvCrypt";
  if (id == 0x00000249) return "XeKeysHmacSha";
  if (id == 0x0000024A) return "XeKeysHmacMd5";
  if (id == 0x0000024B) return "XeKeysAesCbc";
  if (id == 0x0000024C) return "XeKeysDes2Cbc";
  if (id == 0x0000024D) return "XeKeysDesCbc";
  if (id == 0x0000024E) return "XeKeysObscureKey";
  if (id == 0x0000024F) return "XeKeysHmacShaUsingKey";
  if (id == 0x00000250) return "XeKeysHmacMd5UsingKey";
  if (id == 0x00000251) return "XeKeysAesCbcUsingKey";
  if (id == 0x00000252) return "XeKeysDes2CbcUsingKey";
  if (id == 0x00000253) return "XeKeysDesCbcUsingKey";
  if (id == 0x00000254) return "XeKeysObfuscate";
  if (id == 0x00000255) return "XeKeysUnObfuscate";
  if (id == 0x00000256) return "XeKeysConsolePrivateKeySign";
  if (id == 0x00000257) return "XeKeysConsoleSignatureVerification";
  if (id == 0x00000258) return "XeKeysVerifyRSASignature";
  if (id == 0x00000259) return "StfsCreateDevice";
  if (id == 0x0000025A) return "StfsControlDevice";
  if (id == 0x0000025B) return "VdSwap";
  if (id == 0x0000025C) return "HalFsbInterruptCount";
  if (id == 0x0000025D) return "XeKeysSaveSystemUpdate";
  if (id == 0x0000025E) return "XeKeysLockSystemUpdate";
  if (id == 0x0000025F) return "XeKeysExecute";
  if (id == 0x00000260) return "XeKeysGetVersions";

  return nullptr;
}

const char* xboxkrnlNameGen(int id, int version)
{
  if (version > 0) {
    if (version <= 1640) return xboxkrnlNameGen_1640(id);
    if (version <= 1746) return xboxkrnlNameGen_1746(id);
    if (version <= 1838) return xboxkrnlNameGen_1838(id);
  }

  if (id == 0x00000001) return "DbgBreakPoint";
  if (id == 0x00000002) return "DbgBreakPointWithStatus";
  if (id == 0x00000003) return "DbgPrint";
  if (id == 0x00000004) return "DbgPrompt";
  if (id == 0x00000005) return "DumpGetRawDumpInfo";
  if (id == 0x00000006) return "DumpWriteDump";
  if (id == 0x00000007) return "ExAcquireReadWriteLockExclusive";
  if (id == 0x00000008) return "ExAcquireReadWriteLockShared";
  if (id == 0x00000009) return "ExAllocatePool";
  if (id == 0x0000000A) return "ExAllocatePoolWithTag";
  if (id == 0x0000000B) return "ExAllocatePoolTypeWithTag";
  if (id == 0x0000000C) return "ExConsoleGameRegion";
  if (id == 0x0000000D) return "ExCreateThread";
  if (id == 0x0000000E) return "ExEventObjectType";
  if (id == 0x0000000F) return "ExFreePool";
  if (id == 0x00000010) return "ExGetXConfigSetting";
  if (id == 0x00000011) return "ExInitializeReadWriteLock";
  if (id == 0x00000012) return "ExMutantObjectType";
  if (id == 0x00000013) return "ExQueryPoolBlockSize";
  if (id == 0x00000014) return "ExRegisterThreadNotification";
  if (id == 0x00000015) return "ExRegisterTitleTerminateNotification";
  if (id == 0x00000016) return "ExReleaseReadWriteLock";
  if (id == 0x00000017) return "ExSemaphoreObjectType";
  if (id == 0x00000018) return "ExSetXConfigSetting";
  if (id == 0x00000019) return "ExTerminateThread";
  if (id == 0x0000001A) return "ExTerminateTitleProcess";
  if (id == 0x0000001B) return "ExThreadObjectType";
  if (id == 0x0000001C) return "ExTimerObjectType";
  if (id == 0x0000001D) return "MmDoubleMapMemory";
  if (id == 0x0000001E) return "MmUnmapMemory";
  if (id == 0x0000001F) return "XeKeysGetConsoleCertificate";
  if (id == 0x00000020) return "FscGetCacheElementCount";
  if (id == 0x00000021) return "FscSetCacheElementCount";
  if (id == 0x00000022) return "HalGetCurrentAVPack";
  if (id == 0x00000023) return "HalGpioControl";
  if (id == 0x00000024) return "HalOpenCloseODDTray";
  if (id == 0x00000025) return "HalReadWritePCISpace";
  if (id == 0x00000026) return "HalRegisterPowerDownNotification";
  if (id == 0x00000027) return "HalRegisterSMCNotification";
  if (id == 0x00000028) return "HalReturnToFirmware";
  if (id == 0x00000029) return "HalSendSMCMessage";
  if (id == 0x0000002A) return "HalSetAudioEnable";
  if (id == 0x0000002B) return "InterlockedFlushSList";
  if (id == 0x0000002C) return "InterlockedPopEntrySList";
  if (id == 0x0000002D) return "InterlockedPushEntrySList";
  if (id == 0x0000002E) return "IoAcquireDeviceObjectLock";
  if (id == 0x0000002F) return "IoAllocateIrp";
  if (id == 0x00000030) return "IoBuildAsynchronousFsdRequest";
  if (id == 0x00000031) return "IoBuildDeviceIoControlRequest";
  if (id == 0x00000032) return "IoBuildSynchronousFsdRequest";
  if (id == 0x00000033) return "IoCallDriver";
  if (id == 0x00000034) return "IoCheckShareAccess";
  if (id == 0x00000035) return "IoCompleteRequest";
  if (id == 0x00000036) return "IoCompletionObjectType";
  if (id == 0x00000037) return "IoCreateDevice";
  if (id == 0x00000038) return "IoCreateFile";
  if (id == 0x00000039) return "IoDeleteDevice";
  if (id == 0x0000003A) return "IoDeviceObjectType";
  if (id == 0x0000003B) return "IoDismountVolume";
  if (id == 0x0000003C) return "IoDismountVolumeByFileHandle";
  if (id == 0x0000003D) return "IoDismountVolumeByName";
  if (id == 0x0000003E) return "IoFileObjectType";
  if (id == 0x0000003F) return "IoFreeIrp";
  if (id == 0x00000040) return "IoInitializeIrp";
  if (id == 0x00000041) return "IoInvalidDeviceRequest";
  if (id == 0x00000042) return "ExSetBetaFeaturesEnabled";
  if (id == 0x00000043) return "IoQueueThreadIrp";
  if (id == 0x00000044) return "IoReleaseDeviceObjectLock";
  if (id == 0x00000045) return "IoRemoveShareAccess";
  if (id == 0x00000046) return "IoSetIoCompletion";
  if (id == 0x00000047) return "IoSetShareAccess";
  if (id == 0x00000048) return "IoStartNextPacket";
  if (id == 0x00000049) return "IoStartNextPacketByKey";
  if (id == 0x0000004A) return "IoStartPacket";
  if (id == 0x0000004B) return "IoSynchronousDeviceIoControlRequest";
  if (id == 0x0000004C) return "IoSynchronousFsdRequest";
  if (id == 0x0000004D) return "KeAcquireSpinLockAtRaisedIrql";
  if (id == 0x0000004E) return "KeAlertResumeThread";
  if (id == 0x0000004F) return "KeAlertThread";
  if (id == 0x00000050) return "KeBlowFuses";
  if (id == 0x00000051) return "KeBoostPriorityThread";
  if (id == 0x00000052) return "KeBugCheck";
  if (id == 0x00000053) return "KeBugCheckEx";
  if (id == 0x00000054) return "KeCancelTimer";
  if (id == 0x00000055) return "KeConnectInterrupt";
  if (id == 0x00000056) return "KeContextFromKframes";
  if (id == 0x00000057) return "KeContextToKframes";
  if (id == 0x00000058) return "KeCreateUserMode";
  if (id == 0x00000059) return "KeDebugMonitorData";
  if (id == 0x0000005A) return "KeDelayExecutionThread";
  if (id == 0x0000005B) return "KeDeleteUserMode";
  if (id == 0x0000005C) return "KeDisconnectInterrupt";
  if (id == 0x0000005D) return "KeEnableFpuExceptions";
  if (id == 0x0000005E) return "KeEnablePPUPerformanceMonitor";
  if (id == 0x0000005F) return "KeEnterCriticalRegion";
  if (id == 0x00000060) return "KeEnterUserMode";
  if (id == 0x00000061) return "KeFlushCacheRange";
  if (id == 0x00000062) return "KeFlushCurrentEntireTb";
  if (id == 0x00000063) return "KeFlushEntireTb";
  if (id == 0x00000064) return "KeFlushUserModeCurrentTb";
  if (id == 0x00000065) return "KeFlushUserModeTb";
  if (id == 0x00000066) return "KeGetCurrentProcessType";
  if (id == 0x00000067) return "KeGetPMWRegister";
  if (id == 0x00000068) return "KeGetPRVRegister";
  if (id == 0x00000069) return "KeGetSocRegister";
  if (id == 0x0000006A) return "KeGetSpecialPurposeRegister";
  if (id == 0x0000006B) return "KeLockL2";
  if (id == 0x0000006C) return "KeUnlockL2";
  if (id == 0x0000006D) return "KeInitializeApc";
  if (id == 0x0000006E) return "KeInitializeDeviceQueue";
  if (id == 0x0000006F) return "KeInitializeDpc";
  if (id == 0x00000070) return "KeInitializeEvent";
  if (id == 0x00000071) return "KeInitializeInterrupt";
  if (id == 0x00000072) return "KeInitializeMutant";
  if (id == 0x00000073) return "KeInitializeQueue";
  if (id == 0x00000074) return "KeInitializeSemaphore";
  if (id == 0x00000075) return "KeInitializeTimerEx";
  if (id == 0x00000076) return "KeInsertByKeyDeviceQueue";
  if (id == 0x00000077) return "KeInsertDeviceQueue";
  if (id == 0x00000078) return "KeInsertHeadQueue";
  if (id == 0x00000079) return "KeInsertQueue";
  if (id == 0x0000007A) return "KeInsertQueueApc";
  if (id == 0x0000007B) return "KeInsertQueueDpc";
  if (id == 0x0000007C) return "KeIpiGenericCall";
  if (id == 0x0000007D) return "KeLeaveCriticalRegion";
  if (id == 0x0000007E) return "KeLeaveUserMode";
  if (id == 0x0000007F) return "KePulseEvent";
  if (id == 0x00000080) return "KeQueryBackgroundProcessors";
  if (id == 0x00000081) return "KeQueryBasePriorityThread";
  if (id == 0x00000082) return "KeQueryInterruptTime";
  if (id == 0x00000083) return "KeQueryPerformanceFrequency";
  if (id == 0x00000084) return "KeQuerySystemTime";
  if (id == 0x00000085) return "KeRaiseIrqlToDpcLevel";
  if (id == 0x00000086) return "KeRegisterDriverNotification";
  if (id == 0x00000087) return "KeReleaseMutant";
  if (id == 0x00000088) return "KeReleaseSemaphore";
  if (id == 0x00000089) return "KeReleaseSpinLockFromRaisedIrql";
  if (id == 0x0000008A) return "KeRemoveByKeyDeviceQueue";
  if (id == 0x0000008B) return "KeRemoveDeviceQueue";
  if (id == 0x0000008C) return "KeRemoveEntryDeviceQueue";
  if (id == 0x0000008D) return "KeRemoveQueue";
  if (id == 0x0000008E) return "KeRemoveQueueDpc";
  if (id == 0x0000008F) return "KeResetEvent";
  if (id == 0x00000090) return "KeRestoreFloatingPointState";
  if (id == 0x00000091) return "KeRestoreVectorUnitState";
  if (id == 0x00000092) return "KeResumeThread";
  if (id == 0x00000093) return "KeRetireDpcList";
  if (id == 0x00000094) return "KeRundownQueue";
  if (id == 0x00000095) return "KeSaveFloatingPointState";
  if (id == 0x00000096) return "KeSaveVectorUnitState";
  if (id == 0x00000097) return "KeSetAffinityThread";
  if (id == 0x00000098) return "KeSetBackgroundProcessors";
  if (id == 0x00000099) return "KeSetBasePriorityThread";
  if (id == 0x0000009A) return "KeSetCurrentProcessType";
  if (id == 0x0000009B) return "KeSetCurrentStackPointers";
  if (id == 0x0000009C) return "KeSetDisableBoostThread";
  if (id == 0x0000009D) return "KeSetEvent";
  if (id == 0x0000009E) return "KeSetEventBoostPriority";
  if (id == 0x0000009F) return "KeSetPMWRegister";
  if (id == 0x000000A0) return "KeSetPowerMode";
  if (id == 0x000000A1) return "KeSetPRVRegister";
  if (id == 0x000000A2) return "KeSetPriorityClassThread";
  if (id == 0x000000A3) return "KeSetPriorityThread";
  if (id == 0x000000A4) return "KeSetSocRegister";
  if (id == 0x000000A5) return "KeSetSpecialPurposeRegister";
  if (id == 0x000000A6) return "KeSetTimer";
  if (id == 0x000000A7) return "KeSetTimerEx";
  if (id == 0x000000A8) return "KeStallExecutionProcessor";
  if (id == 0x000000A9) return "KeSuspendThread";
  if (id == 0x000000AA) return "KeSweepDcacheRange";
  if (id == 0x000000AB) return "KeSweepIcacheRange";
  if (id == 0x000000AC) return "KeTestAlertThread";
  if (id == 0x000000AD) return "KeTimeStampBundle";
  if (id == 0x000000AE) return "KeTryToAcquireSpinLockAtRaisedIrql";
  if (id == 0x000000AF) return "KeWaitForMultipleObjects";
  if (id == 0x000000B0) return "KeWaitForSingleObject";
  if (id == 0x000000B1) return "KfAcquireSpinLock";
  if (id == 0x000000B2) return "KfRaiseIrql";
  if (id == 0x000000B3) return "KfLowerIrql";
  if (id == 0x000000B4) return "KfReleaseSpinLock";
  if (id == 0x000000B5) return "KiBugCheckData";
  if (id == 0x000000B6) return "LDICreateDecompression";
  if (id == 0x000000B7) return "LDIDecompress";
  if (id == 0x000000B8) return "LDIDestroyDecompression";
  if (id == 0x000000B9) return "MmAllocatePhysicalMemory";
  if (id == 0x000000BA) return "MmAllocatePhysicalMemoryEx";
  if (id == 0x000000BB) return "MmCreateKernelStack";
  if (id == 0x000000BC) return "MmDeleteKernelStack";
  if (id == 0x000000BD) return "MmFreePhysicalMemory";
  if (id == 0x000000BE) return "MmGetPhysicalAddress";
  if (id == 0x000000BF) return "MmIsAddressValid";
  if (id == 0x000000C0) return "MmLockAndMapSegmentArray";
  if (id == 0x000000C1) return "MmLockUnlockBufferPages";
  if (id == 0x000000C2) return "MmMapIoSpace";
  if (id == 0x000000C3) return "MmPersistPhysicalMemoryAllocation";
  if (id == 0x000000C4) return "MmQueryAddressProtect";
  if (id == 0x000000C5) return "MmQueryAllocationSize";
  if (id == 0x000000C6) return "MmQueryStatistics";
  if (id == 0x000000C7) return "MmSetAddressProtect";
  if (id == 0x000000C8) return "MmSplitPhysicalMemoryAllocation";
  if (id == 0x000000C9) return "MmUnlockAndUnmapSegmentArray";
  if (id == 0x000000CA) return "MmUnmapIoSpace";
  if (id == 0x000000CB) return "Nls844UnicodeCaseTable";
  if (id == 0x000000CC) return "NtAllocateVirtualMemory";
  if (id == 0x000000CD) return "NtCancelTimer";
  if (id == 0x000000CE) return "NtClearEvent";
  if (id == 0x000000CF) return "NtClose";
  if (id == 0x000000D0) return "NtCreateDirectoryObject";
  if (id == 0x000000D1) return "NtCreateEvent";
  if (id == 0x000000D2) return "NtCreateFile";
  if (id == 0x000000D3) return "NtCreateIoCompletion";
  if (id == 0x000000D4) return "NtCreateMutant";
  if (id == 0x000000D5) return "NtCreateSemaphore";
  if (id == 0x000000D6) return "NtCreateSymbolicLinkObject";
  if (id == 0x000000D7) return "NtCreateTimer";
  if (id == 0x000000D8) return "NtDeleteFile";
  if (id == 0x000000D9) return "NtDeviceIoControlFile";
  if (id == 0x000000DA) return "NtDuplicateObject";
  if (id == 0x000000DB) return "NtFlushBuffersFile";
  if (id == 0x000000DC) return "NtFreeVirtualMemory";
  if (id == 0x000000DD) return "NtMakeTemporaryObject";
  if (id == 0x000000DE) return "NtOpenDirectoryObject";
  if (id == 0x000000DF) return "NtOpenFile";
  if (id == 0x000000E0) return "NtOpenSymbolicLinkObject";
  if (id == 0x000000E1) return "NtProtectVirtualMemory";
  if (id == 0x000000E2) return "NtPulseEvent";
  if (id == 0x000000E3) return "NtQueueApcThread";
  if (id == 0x000000E4) return "NtQueryDirectoryFile";
  if (id == 0x000000E5) return "NtQueryDirectoryObject";
  if (id == 0x000000E6) return "NtQueryEvent";
  if (id == 0x000000E7) return "NtQueryFullAttributesFile";
  if (id == 0x000000E8) return "NtQueryInformationFile";
  if (id == 0x000000E9) return "NtQueryIoCompletion";
  if (id == 0x000000EA) return "NtQueryMutant";
  if (id == 0x000000EB) return "NtQuerySemaphore";
  if (id == 0x000000EC) return "NtQuerySymbolicLinkObject";
  if (id == 0x000000ED) return "NtQueryTimer";
  if (id == 0x000000EE) return "NtQueryVirtualMemory";
  if (id == 0x000000EF) return "NtQueryVolumeInformationFile";
  if (id == 0x000000F0) return "NtReadFile";
  if (id == 0x000000F1) return "NtReadFileScatter";
  if (id == 0x000000F2) return "NtReleaseMutant";
  if (id == 0x000000F3) return "NtReleaseSemaphore";
  if (id == 0x000000F4) return "NtRemoveIoCompletion";
  if (id == 0x000000F5) return "NtResumeThread";
  if (id == 0x000000F6) return "NtSetEvent";
  if (id == 0x000000F7) return "NtSetInformationFile";
  if (id == 0x000000F8) return "NtSetIoCompletion";
  if (id == 0x000000F9) return "NtSetSystemTime";
  if (id == 0x000000FA) return "NtSetTimerEx";
  if (id == 0x000000FB) return "NtSignalAndWaitForSingleObjectEx";
  if (id == 0x000000FC) return "NtSuspendThread";
  if (id == 0x000000FD) return "NtWaitForSingleObjectEx";
  if (id == 0x000000FE) return "NtWaitForMultipleObjectsEx";
  if (id == 0x000000FF) return "NtWriteFile";
  if (id == 0x00000100) return "NtWriteFileGather";
  if (id == 0x00000101) return "NtYieldExecution";
  if (id == 0x00000102) return "ObCreateObject";
  if (id == 0x00000103) return "ObCreateSymbolicLink";
  if (id == 0x00000104) return "ObDeleteSymbolicLink";
  if (id == 0x00000105) return "ObDereferenceObject";
  if (id == 0x00000106) return "ObDirectoryObjectType";
  if (id == 0x00000107) return "ObGetWaitableObject";
  if (id == 0x00000108) return "ObInsertObject";
  if (id == 0x00000109) return "ObIsTitleObject";
  if (id == 0x0000010A) return "ObLookupAnyThreadByThreadId";
  if (id == 0x0000010B) return "ObLookupThreadByThreadId";
  if (id == 0x0000010C) return "ObMakeTemporaryObject";
  if (id == 0x0000010D) return "ObOpenObjectByName";
  if (id == 0x0000010E) return "ObOpenObjectByPointer";
  if (id == 0x0000010F) return "ObReferenceObject";
  if (id == 0x00000110) return "ObReferenceObjectByHandle";
  if (id == 0x00000111) return "ObReferenceObjectByName";
  if (id == 0x00000112) return "ObSymbolicLinkObjectType";
  if (id == 0x00000113) return "ObTranslateSymbolicLink";
  if (id == 0x00000114) return "RtlAnsiStringToUnicodeString";
  if (id == 0x00000115) return "RtlAppendStringToString";
  if (id == 0x00000116) return "RtlAppendUnicodeStringToString";
  if (id == 0x00000117) return "RtlAppendUnicodeToString";
  if (id == 0x00000118) return "RtlAssert";
  if (id == 0x00000119) return "RtlCaptureContext";
  if (id == 0x0000011A) return "RtlCompareMemory";
  if (id == 0x0000011B) return "RtlCompareMemoryUlong";
  if (id == 0x0000011C) return "RtlCompareString";
  if (id == 0x0000011D) return "RtlCompareStringN";
  if (id == 0x0000011E) return "RtlCompareUnicodeString";
  if (id == 0x0000011F) return "RtlCompareUnicodeStringN";
  if (id == 0x00000120) return "RtlCompareUtf8ToUnicode";
  if (id == 0x00000121) return "RtlCopyString";
  if (id == 0x00000122) return "RtlCopyUnicodeString";
  if (id == 0x00000123) return "RtlCreateUnicodeString";
  if (id == 0x00000124) return "RtlDowncaseUnicodeChar";
  if (id == 0x00000125) return "RtlEnterCriticalSection";
  if (id == 0x00000126) return "RtlFillMemoryUlong";
  if (id == 0x00000127) return "RtlFreeAnsiString";
  if (id == 0x00000128) return "RtlFreeUnicodeString";
  if (id == 0x00000129) return "RtlGetCallersAddress";
  if (id == 0x0000012A) return "RtlGetStackLimits";
  if (id == 0x0000012B) return "RtlImageXexHeaderField";
  if (id == 0x0000012C) return "RtlInitAnsiString";
  if (id == 0x0000012D) return "RtlInitUnicodeString";
  if (id == 0x0000012E) return "RtlInitializeCriticalSection";
  if (id == 0x0000012F) return "RtlInitializeCriticalSectionAndSpinCount";
  if (id == 0x00000130) return "RtlLeaveCriticalSection";
  if (id == 0x00000131) return "RtlLookupFunctionEntry";
  if (id == 0x00000132) return "RtlLowerChar";
  if (id == 0x00000133) return "RtlMultiByteToUnicodeN";
  if (id == 0x00000134) return "RtlMultiByteToUnicodeSize";
  if (id == 0x00000135) return "RtlNtStatusToDosError";
  if (id == 0x00000136) return "RtlRaiseException";
  if (id == 0x00000137) return "RtlRaiseStatus";
  if (id == 0x00000138) return "RtlRip";
  if (id == 0x00000139) return "_scprintf";
  if (id == 0x0000013A) return "_snprintf";
  if (id == 0x0000013B) return "sprintf";
  if (id == 0x0000013C) return "_scwprintf";
  if (id == 0x0000013D) return "_snwprintf";
  if (id == 0x0000013E) return "swprintf";
  if (id == 0x0000013F) return "RtlTimeFieldsToTime";
  if (id == 0x00000140) return "RtlTimeToTimeFields";
  if (id == 0x00000141) return "RtlTryEnterCriticalSection";
  if (id == 0x00000142) return "RtlUnicodeStringToAnsiString";
  if (id == 0x00000143) return "RtlUnicodeToMultiByteN";
  if (id == 0x00000144) return "RtlUnicodeToMultiByteSize";
  if (id == 0x00000145) return "RtlUnicodeToUtf8";
  if (id == 0x00000146) return "RtlUnicodeToUtf8Size";
  if (id == 0x00000147) return "RtlUnwind";
  if (id == 0x00000148) return "RtlUnwind2";
  if (id == 0x00000149) return "RtlUpcaseUnicodeChar";
  if (id == 0x0000014A) return "RtlUpperChar";
  if (id == 0x0000014B) return "RtlVirtualUnwind";
  if (id == 0x0000014C) return "_vscprintf";
  if (id == 0x0000014D) return "_vsnprintf";
  if (id == 0x0000014E) return "vsprintf";
  if (id == 0x0000014F) return "_vscwprintf";
  if (id == 0x00000150) return "_vsnwprintf";
  if (id == 0x00000151) return "vswprintf";
  if (id == 0x00000152) return "KeTlsAlloc";
  if (id == 0x00000153) return "KeTlsFree";
  if (id == 0x00000154) return "KeTlsGetValue";
  if (id == 0x00000155) return "KeTlsSetValue";
  if (id == 0x00000156) return "XboxHardwareInfo";
  if (id == 0x00000157) return "XboxKrnlBaseVersion";
  if (id == 0x00000158) return "XboxKrnlVersion";
  if (id == 0x00000159) return "XeCryptAesKey";
  if (id == 0x0000015A) return "XeCryptAesEcb";
  if (id == 0x0000015B) return "XeCryptAesCbc";
  if (id == 0x0000015C) return "XeCryptBnDwLeDhEqualBase";
  if (id == 0x0000015D) return "XeCryptBnDwLeDhInvalBase";
  if (id == 0x0000015E) return "XeCryptBnDwLeDhModExp";
  if (id == 0x0000015F) return "XeCryptBnDw_Copy";
  if (id == 0x00000160) return "XeCryptBnDw_SwapLeBe";
  if (id == 0x00000161) return "XeCryptBnDw_Zero";
  if (id == 0x00000162) return "XeCryptBnDwLePkcs1Format";
  if (id == 0x00000163) return "XeCryptBnDwLePkcs1Verify";
  if (id == 0x00000164) return "XeCryptBnQwBeSigCreate";
  if (id == 0x00000165) return "XeCryptBnQwBeSigFormat";
  if (id == 0x00000166) return "XeCryptBnQwBeSigVerify";
  if (id == 0x00000167) return "XeCryptBnQwNeModExp";
  if (id == 0x00000168) return "XeCryptBnQwNeModExpRoot";
  if (id == 0x00000169) return "XeCryptBnQwNeModInv";
  if (id == 0x0000016A) return "XeCryptBnQwNeModMul";
  if (id == 0x0000016B) return "XeCryptBnQwNeRsaKeyGen";
  if (id == 0x0000016C) return "XeCryptBnQwNeRsaPrvCrypt";
  if (id == 0x0000016D) return "XeCryptBnQwNeRsaPubCrypt";
  if (id == 0x0000016E) return "XeCryptBnQw_Copy";
  if (id == 0x0000016F) return "XeCryptBnQw_SwapDwQw";
  if (id == 0x00000170) return "XeCryptBnQw_SwapDwQwLeBe";
  if (id == 0x00000171) return "XeCryptBnQw_SwapLeBe";
  if (id == 0x00000172) return "XeCryptBnQw_Zero";
  if (id == 0x00000173) return "XeCryptChainAndSumMac";
  if (id == 0x00000174) return "XeCryptDesParity";
  if (id == 0x00000175) return "XeCryptDesKey";
  if (id == 0x00000176) return "XeCryptDesEcb";
  if (id == 0x00000177) return "XeCryptDesCbc";
  if (id == 0x00000178) return "XeCryptDes3Key";
  if (id == 0x00000179) return "XeCryptDes3Ecb";
  if (id == 0x0000017A) return "XeCryptDes3Cbc";
  if (id == 0x0000017B) return "XeCryptHmacMd5Init";
  if (id == 0x0000017C) return "XeCryptHmacMd5Update";
  if (id == 0x0000017D) return "XeCryptHmacMd5Final";
  if (id == 0x0000017E) return "XeCryptHmacMd5";
  if (id == 0x0000017F) return "XeCryptHmacShaInit";
  if (id == 0x00000180) return "XeCryptHmacShaUpdate";
  if (id == 0x00000181) return "XeCryptHmacShaFinal";
  if (id == 0x00000182) return "XeCryptHmacSha";
  if (id == 0x00000183) return "XeCryptHmacShaVerify";
  if (id == 0x00000184) return "XeCryptMd5Init";
  if (id == 0x00000185) return "XeCryptMd5Update";
  if (id == 0x00000186) return "XeCryptMd5Final";
  if (id == 0x00000187) return "XeCryptMd5";
  if (id == 0x00000188) return "XeCryptParveEcb";
  if (id == 0x00000189) return "XeCryptParveCbcMac";
  if (id == 0x0000018A) return "XeCryptRandom";
  if (id == 0x0000018B) return "XeCryptRc4Key";
  if (id == 0x0000018C) return "XeCryptRc4Ecb";
  if (id == 0x0000018D) return "XeCryptRc4";
  if (id == 0x0000018E) return "XeCryptRotSumSha";
  if (id == 0x0000018F) return "XeCryptShaInit";
  if (id == 0x00000190) return "XeCryptShaUpdate";
  if (id == 0x00000191) return "XeCryptShaFinal";
  if (id == 0x00000192) return "XeCryptSha";
  if (id == 0x00000193) return "XexExecutableModuleHandle";
  if (id == 0x00000194) return "XexCheckExecutablePrivilege";
  if (id == 0x00000195) return "XexGetModuleHandle";
  if (id == 0x00000196) return "XexGetModuleSection";
  if (id == 0x00000197) return "XexGetProcedureAddress";
  if (id == 0x00000198) return "XexLoadExecutable";
  if (id == 0x00000199) return "XexLoadImage";
  if (id == 0x0000019A) return "XexLoadImageFromMemory";
  if (id == 0x0000019B) return "XexLoadImageHeaders";
  if (id == 0x0000019C) return "XexPcToFileHeader";
  if (id == 0x0000019D) return "KiApcNormalRoutineNop";
  if (id == 0x0000019E) return "XexRegisterPatchDescriptor";
  if (id == 0x0000019F) return "XexSendDeferredNotifications";
  if (id == 0x000001A0) return "XexStartExecutable";
  if (id == 0x000001A1) return "XexUnloadImage";
  if (id == 0x000001A2) return "XexUnloadImageAndExitThread";
  if (id == 0x000001A3) return "XexUnloadTitleModules";
  if (id == 0x000001A4) return "XexVerifyImageHeaders";
  if (id == 0x000001A5) return "__C_specific_handler";
  if (id == 0x000001A6) return "DbgLoadImageSymbols";
  if (id == 0x000001A7) return "DbgUnLoadImageSymbols";
  if (id == 0x000001A8) return "RtlImageDirectoryEntryToData";
  if (id == 0x000001A9) return "RtlImageNtHeader";
  if (id == 0x000001AA) return "ExDebugMonitorService";
  if (id == 0x000001AB) return "MmDbgReadCheck";
  if (id == 0x000001AC) return "MmDbgReleaseAddress";
  if (id == 0x000001AD) return "MmDbgWriteCheck";
  if (id == 0x000001AE) return "ExLoadedCommandLine";
  if (id == 0x000001AF) return "ExLoadedImageName";
  if (id == 0x000001B0) return "VdBlockUntilGUIIdle";
  if (id == 0x000001B1) return "VdCallGraphicsNotificationRoutines";
  if (id == 0x000001B2) return "VdDisplayFatalError";
  if (id == 0x000001B3) return "VdEnableClosedCaption";
  if (id == 0x000001B4) return "VdEnableDisableClockGating";
  if (id == 0x000001B5) return "VdEnableDisablePowerSavingMode";
  if (id == 0x000001B6) return "VdEnableRingBufferRPtrWriteBack";
  if (id == 0x000001B7) return "VdGenerateGPUCSCCoefficients";
  if (id == 0x000001B8) return "VdGetClosedCaptionReadyStatus";
  if (id == 0x000001B9) return "VdGetCurrentDisplayGamma";
  if (id == 0x000001BA) return "VdGetCurrentDisplayInformation";
  if (id == 0x000001BB) return "VdGetDisplayModeOverride";
  if (id == 0x000001BC) return "VdGetGraphicsAsicID";
  if (id == 0x000001BD) return "VdGetSystemCommandBuffer";
  if (id == 0x000001BE) return "VdGlobalDevice";
  if (id == 0x000001BF) return "VdGlobalXamDevice";
  if (id == 0x000001C0) return "VdGpuClockInMHz";
  if (id == 0x000001C1) return "VdHSIOCalibrationLock";
  if (id == 0x000001C2) return "VdInitializeEngines";
  if (id == 0x000001C3) return "VdInitializeRingBuffer";
  if (id == 0x000001C4) return "VdInitializeScaler";
  if (id == 0x000001C5) return "VdInitializeScalerCommandBuffer";
  if (id == 0x000001C6) return "VdIsHSIOTrainingSucceeded";
  if (id == 0x000001C7) return "VdPersistDisplay";
  if (id == 0x000001C8) return "VdQuerySystemCommandBuffer";
  if (id == 0x000001C9) return "VdQueryVideoFlags";
  if (id == 0x000001CA) return "VdQueryVideoMode";
  if (id == 0x000001CB) return "VdReadDVERegisterUlong";
  if (id == 0x000001CC) return "VdReadWriteHSIOCalibrationFlag";
  if (id == 0x000001CD) return "VdRegisterGraphicsNotification";
  if (id == 0x000001CE) return "VdRegisterXamGraphicsNotification";
  if (id == 0x000001CF) return "VdSendClosedCaptionData";
  if (id == 0x000001D0) return "VdSetCGMSOption";
  if (id == 0x000001D1) return "VdSetColorProfileAdjustment";
  if (id == 0x000001D2) return "VdSetCscMatricesOverride";
  if (id == 0x000001D3) return "VdSetDisplayMode";
  if (id == 0x000001D4) return "VdSetDisplayModeOverride";
  if (id == 0x000001D5) return "VdSetGraphicsInterruptCallback";
  if (id == 0x000001D6) return "VdSetHDCPOption";
  if (id == 0x000001D7) return "VdSetMacrovisionOption";
  if (id == 0x000001D8) return "VdSetSystemCommandBuffer";
  if (id == 0x000001D9) return "VdSetSystemCommandBufferGpuIdentifierAddress";
  if (id == 0x000001DA) return "VdSetWSSData";
  if (id == 0x000001DB) return "VdSetWSSOption";
  if (id == 0x000001DC) return "VdShutdownEngines";
  if (id == 0x000001DD) return "VdTurnDisplayOff";
  if (id == 0x000001DE) return "VdTurnDisplayOn";
  if (id == 0x000001DF) return "KiApcNormalRoutineNop_0";
  if (id == 0x000001E0) return "VdWriteDVERegisterUlong";
  if (id == 0x000001E1) return "XVoicedHeadsetPresent";
  if (id == 0x000001E2) return "XVoicedSubmitPacket";
  if (id == 0x000001E3) return "XVoicedClose";
  if (id == 0x000001E4) return "XVoicedActivate";
  if (id == 0x000001E5) return "XInputdGetCapabilities";
  if (id == 0x000001E6) return "XInputdReadState";
  if (id == 0x000001E7) return "XInputdWriteState";
  if (id == 0x000001E8) return "XInputdNotify";
  if (id == 0x000001E9) return "XInputdRawState";
  if (id == 0x000001EA) return "HidGetCapabilities";
  if (id == 0x000001EB) return "HidReadKeys";
  if (id == 0x000001EC) return "XInputdGetDeviceStats";
  if (id == 0x000001ED) return "XInputdResetDevice";
  if (id == 0x000001EE) return "XInputdSetRingOfLight";
  if (id == 0x000001EF) return "XInputdSetRFPowerMode";
  if (id == 0x000001F0) return "XInputdSetRadioFrequency";
  if (id == 0x000001F1) return "HidGetLastInputTime";
  if (id == 0x000001F2) return "XAudioRenderDriverInitialize";
  if (id == 0x000001F3) return "XAudioRegisterRenderDriverClient";
  if (id == 0x000001F4) return "XAudioUnregisterRenderDriverClient";
  if (id == 0x000001F5) return "XAudioSubmitRenderDriverFrame";
  if (id == 0x000001F6) return "XAudioRenderDriverLock";
  if (id == 0x000001F7) return "XAudioGetVoiceCategoryVolumeChangeMask";
  if (id == 0x000001F8) return "XAudioGetVoiceCategoryVolume";
  if (id == 0x000001F9) return "XAudioSetVoiceCategoryVolume";
  if (id == 0x000001FA) return "XAudioBeginDigitalBypassMode";
  if (id == 0x000001FB) return "XAudioEndDigitalBypassMode";
  if (id == 0x000001FC) return "XAudioSubmitDigitalPacket";
  if (id == 0x000001FD) return "XAudioQueryDriverPerformance";
  if (id == 0x000001FE) return "XAudioGetRenderDriverThread";
  if (id == 0x000001FF) return "XAudioGetSpeakerConfig";
  if (id == 0x00000200) return "XAudioSetSpeakerConfig";
  if (id == 0x00000201) return "NicSetUnicastAddress";
  if (id == 0x00000202) return "NicAttach";
  if (id == 0x00000203) return "NicDetach";
  if (id == 0x00000204) return "NicXmit";
  if (id == 0x00000205) return "NicUpdateMcastMembership";
  if (id == 0x00000206) return "NicFlushXmitQueue";
  if (id == 0x00000207) return "NicShutdown";
  if (id == 0x00000208) return "NicGetLinkState";
  if (id == 0x00000209) return "NicGetStats";
  if (id == 0x0000020A) return "NicGetOpt";
  if (id == 0x0000020B) return "NicSetOpt";
  if (id == 0x0000020C) return "DrvSetSysReqCallback";
  if (id == 0x0000020D) return "DrvSetUserBindingCallback";
  if (id == 0x0000020E) return "DrvSetContentStorageCallback";
  if (id == 0x0000020F) return "DrvSetAutobind";
  if (id == 0x00000210) return "DrvGetContentStorageNotification";
  if (id == 0x00000211) return "MtpdBeginTransaction";
  if (id == 0x00000212) return "MtpdCancelTransaction";
  if (id == 0x00000213) return "MtpdEndTransaction";
  if (id == 0x00000214) return "MtpdGetCurrentDevices";
  if (id == 0x00000215) return "MtpdReadData";
  if (id == 0x00000216) return "MtpdReadEvent";
  if (id == 0x00000217) return "MtpdResetDevice";
  if (id == 0x00000218) return "MtpdSendData";
  if (id == 0x00000219) return "MtpdVerifyProximity";
  if (id == 0x0000021A) return "XUsbcamSetCaptureMode";
  if (id == 0x0000021B) return "XUsbcamGetConfig";
  if (id == 0x0000021C) return "XUsbcamSetConfig";
  if (id == 0x0000021D) return "XUsbcamGetState";
  if (id == 0x0000021E) return "XUsbcamReadFrame";
  if (id == 0x0000021F) return "XUsbcamSnapshot";
  if (id == 0x00000220) return "XUsbcamSetView";
  if (id == 0x00000221) return "XUsbcamGetView";
  if (id == 0x00000222) return "XUsbcamCreate";
  if (id == 0x00000223) return "XUsbcamDestroy";
  if (id == 0x00000224) return "XMACreateContext";
  if (id == 0x00000225) return "XMAInitializeContext";
  if (id == 0x00000226) return "XMAReleaseContext";
  if (id == 0x00000227) return "XMAEnableContext";
  if (id == 0x00000228) return "XMADisableContext";
  if (id == 0x00000229) return "XMAGetOutputBufferWriteOffset";
  if (id == 0x0000022A) return "XMASetOutputBufferReadOffset";
  if (id == 0x0000022B) return "XMAGetOutputBufferReadOffset";
  if (id == 0x0000022C) return "XMASetOutputBufferValid";
  if (id == 0x0000022D) return "XMAIsOutputBufferValid";
  if (id == 0x0000022E) return "XMASetInputBuffer0Valid";
  if (id == 0x0000022F) return "XMAIsInputBuffer0Valid";
  if (id == 0x00000230) return "XMASetInputBuffer1Valid";
  if (id == 0x00000231) return "XMAIsInputBuffer1Valid";
  if (id == 0x00000232) return "XMASetInputBuffer0";
  if (id == 0x00000233) return "XMASetInputBuffer1";
  if (id == 0x00000234) return "XMAGetPacketMetadata";
  if (id == 0x00000235) return "XMABlockWhileInUse";
  if (id == 0x00000236) return "XMASetLoopData";
  if (id == 0x00000237) return "XMASetInputBufferReadOffset";
  if (id == 0x00000238) return "XMAGetInputBufferReadOffset";
  if (id == 0x00000239) return "ExIsBetaFeatureEnabled";
  if (id == 0x0000023A) return "XeKeysGetFactoryChallenge";
  if (id == 0x0000023B) return "XeKeysSetFactoryResponse";
  if (id == 0x0000023C) return "XeKeysInitializeFuses";
  if (id == 0x0000023D) return "XeKeysSaveBootLoader";
  if (id == 0x0000023E) return "XeKeysSaveKeyVault";
  if (id == 0x0000023F) return "XeKeysGetStatus";
  if (id == 0x00000240) return "XeKeysGeneratePrivateKey";
  if (id == 0x00000241) return "XeKeysGetKeyProperties";
  if (id == 0x00000242) return "XeKeysSetKey";
  if (id == 0x00000243) return "XeKeysGenerateRandomKey";
  if (id == 0x00000244) return "XeKeysGetKey";
  if (id == 0x00000245) return "XeKeysGetDigest";
  if (id == 0x00000246) return "XeKeysGetConsoleID";
  if (id == 0x00000247) return "XeKeysGetConsoleType";
  if (id == 0x00000248) return "XeKeysQwNeRsaPrvCrypt";
  if (id == 0x00000249) return "XeKeysHmacSha";
  if (id == 0x0000024A) return "XInputdPassThroughRFCommand";
  if (id == 0x0000024B) return "XeKeysAesCbc";
  if (id == 0x0000024C) return "XeKeysDes2Cbc";
  if (id == 0x0000024D) return "XeKeysDesCbc";
  if (id == 0x0000024E) return "XeKeysObscureKey";
  if (id == 0x0000024F) return "XeKeysHmacShaUsingKey";
  if (id == 0x00000250) return "XeKeysSaveBootLoaderEx";
  if (id == 0x00000251) return "XeKeysAesCbcUsingKey";
  if (id == 0x00000252) return "XeKeysDes2CbcUsingKey";
  if (id == 0x00000253) return "XeKeysDesCbcUsingKey";
  if (id == 0x00000254) return "XeKeysObfuscate";
  if (id == 0x00000255) return "XeKeysUnObfuscate";
  if (id == 0x00000256) return "XeKeysConsolePrivateKeySign";
  if (id == 0x00000257) return "XeKeysConsoleSignatureVerification";
  if (id == 0x00000258) return "XeKeysVerifyRSASignature";
  if (id == 0x00000259) return "StfsCreateDevice";
  if (id == 0x0000025A) return "StfsControlDevice";
  if (id == 0x0000025B) return "VdSwap";
  if (id == 0x0000025C) return "HalFsbInterruptCount";
  if (id == 0x0000025D) return "XeKeysSaveSystemUpdate";
  if (id == 0x0000025E) return "XeKeysLockSystemUpdate";
  if (id == 0x0000025F) return "XeKeysExecute";
  if (id == 0x00000260) return "XeKeysGetVersions";
  if (id == 0x00000261) return "XInputdPowerDownDevice";
  if (id == 0x00000262) return "AniBlockOnAnimation";
  if (id == 0x00000263) return "AniTerminateAnimation";
  if (id == 0x00000264) return "XUsbcamReset";
  if (id == 0x00000265) return "AniSetLogo";
  if (id == 0x00000266) return "KeCertMonitorData";
  if (id == 0x00000267) return "HalIsExecutingPowerDownDpc";
  if (id == 0x00000268) return "VdInitializeEDRAM";
  if (id == 0x00000269) return "VdRetrainEDRAM";
  if (id == 0x0000026A) return "VdRetrainEDRAMWorker";
  if (id == 0x0000026B) return "VdHSIOTrainCount";
  if (id == 0x0000026C) return "HalGetPowerUpCause";
  if (id == 0x0000026D) return "VdHSIOTrainingStatus";
  if (id == 0x0000026E) return "RgcBindInfo";
  if (id == 0x0000026F) return "VdReadEEDIDBlock";
  if (id == 0x00000270) return "VdEnumerateVideoModes";
  if (id == 0x00000271) return "VdEnableHDCP";
  if (id == 0x00000272) return "VdRegisterHDCPNotification";
  if (id == 0x00000273) return "HidReadMouseChanges";
  if (id == 0x00000274) return "DumpSetCollectionFacility";
  if (id == 0x00000275) return "XexTransformImageKey";
  if (id == 0x00000276) return "XAudioOverrideSpeakerConfig";
  if (id == 0x00000277) return "XInputdReadTextKeystroke";
  if (id == 0x00000278) return "DrvXenonButtonPressed";
  if (id == 0x00000279) return "DrvBindToUser";
  if (id == 0x0000027A) return "XexGetModuleImportVersions";
  if (id == 0x0000027B) return "RtlComputeCrc32";
  if (id == 0x0000027C) return "XeKeysSetRevocationList";
  if (id == 0x0000027D) return "HalRegisterPowerDownCallback";
  if (id == 0x0000027E) return "VdGetDisplayDiscoveryData";
  if (id == 0x0000027F) return "XInputdSendStayAliveRequest";
  if (id == 0x00000280) return "XVoicedSendVPort";
  if (id == 0x00000281) return "XVoicedGetBatteryStatus";
  if (id == 0x00000282) return "XInputdFFGetDeviceInfo";
  if (id == 0x00000283) return "XInputdFFSetEffect";
  if (id == 0x00000284) return "XInputdFFUpdateEffect";
  if (id == 0x00000285) return "XInputdFFEffectOperation";
  if (id == 0x00000286) return "XInputdFFDeviceControl";
  if (id == 0x00000287) return "XInputdFFSetDeviceGain";
  if (id == 0x00000288) return "XInputdFFCancelIo";
  if (id == 0x00000289) return "XInputdFFSetRumble";
  if (id == 0x0000028A) return "NtAllocateEncryptedMemory";
  if (id == 0x0000028B) return "NtFreeEncryptedMemory";
  if (id == 0x0000028C) return "XeKeysExSaveKeyVault";
  if (id == 0x0000028D) return "XeKeysExSetKey";
  if (id == 0x0000028E) return "XeKeysExGetKey";
  if (id == 0x0000028F) return "DrvSetDeviceConfigChangeCallback";
  if (id == 0x00000290) return "DrvDeviceConfigChange";
  if (id == 0x00000291) return "HalRegisterHdDvdRomNotification";
  if (id == 0x00000292) return "XeKeysSecurityInitialize";
  if (id == 0x00000293) return "XeKeysSecurityLoadSettings";
  if (id == 0x00000294) return "XeKeysSecuritySaveSettings";
  if (id == 0x00000295) return "XeKeysSecuritySetDetected";
  if (id == 0x00000296) return "XeKeysSecurityGetDetected";
  if (id == 0x00000297) return "XeKeysSecuritySetActivated";
  if (id == 0x00000298) return "XeKeysSecurityGetActivated";
  if (id == 0x00000299) return "XeKeysDvdAuthAP25InstallTable";
  if (id == 0x0000029A) return "XeKeysDvdAuthAP25GetTableVersion";
  if (id == 0x0000029B) return "XeKeysGetProtectedFlag";
  if (id == 0x0000029C) return "XeKeysSetProtectedFlag";
  if (id == 0x0000029D) return "KeEnablePFMInterrupt";
  if (id == 0x0000029E) return "KeDisablePFMInterrupt";
  if (id == 0x0000029F) return "KeSetProfilerISR";
  if (id == 0x000002A0) return "VdStartDisplayDiscovery";
  if (id == 0x000002A1) return "VdSetHDCPRevocationList";
  if (id == 0x000002A2) return "XeKeysGetUpdateSequence";
  if (id == 0x000002A3) return "XeKeysDvdAuthExActivate";
  if (id == 0x000002A4) return "KeGetImagePageTableEntry";
  if (id == 0x000002A5) return "HalRegisterBackgroundModeTransitionCallback";
  if (id == 0x000002A6) return "AniStartBootAnimation";
  if (id == 0x000002A7) return "HalClampUnclampOutputDACs";
  if (id == 0x000002A8) return "HalPowerDownToBackgroundMode";
  if (id == 0x000002A9) return "HalNotifyAddRemoveBackgroundTask";
  if (id == 0x000002AA) return "HalCallBackgroundModeNotificationRoutines";
  if (id == 0x000002AB) return "HalFsbResetCount";
  if (id == 0x000002AC) return "HalGetMemoryInformation";
  if (id == 0x000002AD) return "XInputdGetLastTextInputTime";
  if (id == 0x000002AE) return "VdEnableWMAProOverHDMI";
  if (id == 0x000002AF) return "XeKeysRevokeSaveSettings";
  if (id == 0x000002B0) return "XInputdSetTextMessengerIndicator";
  if (id == 0x000002B1) return "MicDeviceRequest";
  if (id == 0x000002B2) return "XeKeysGetMediaID";
  if (id == 0x000002B3) return "XeKeysLoadKeyVault";
  if (id == 0x000002B4) return "KeGetVidInfo";
  if (id == 0x000002B5) return "HalNotifyBackgroundModeTransitionComplete";
  if (id == 0x000002B6) return "IoAcquireCancelSpinLock";
  if (id == 0x000002B7) return "IoReleaseCancelSpinLock";
  if (id == 0x000002B8) return "NtCancelIoFile";
  if (id == 0x000002B9) return "NtCancelIoFileEx";
  if (id == 0x000002BA) return "HalFinalizePowerLossRecovery";
  if (id == 0x000002BB) return "HalSetPowerLossRecovery";
  if (id == 0x000002BC) return "ExReadModifyWriteXConfigSettingUlong";
  if (id == 0x000002BD) return "HalRegisterXamPowerDownCallback";
  if (id == 0x000002BE) return "ExCancelAlarm";
  if (id == 0x000002BF) return "ExInitializeAlarm";
  if (id == 0x000002C0) return "ExSetAlarm";
  if (id == 0x000002C1) return "XexActivationGetNonce";
  if (id == 0x000002C2) return "XexActivationSetLicense";
  if (id == 0x000002C3) return "IptvSetBoundaryKey";
  if (id == 0x000002C4) return "IptvSetSessionKey";
  if (id == 0x000002C5) return "IptvVerifyOmac1Signature";
  if (id == 0x000002C6) return "IptvGetAesCtrTransform";
  if (id == 0x000002C7) return "SataCdRomRecordReset";
  if (id == 0x000002C8) return "XInputdSetTextDeviceKeyLocks";
  if (id == 0x000002C9) return "XInputdGetTextDeviceKeyLocks";
  if (id == 0x000002CA) return "XexActivationVerifyOwnership";
  if (id == 0x000002CB) return "XexDisableVerboseDbgPrint";
  if (id == 0x000002CC) return "SvodCreateDevice";
  if (id == 0x000002CD) return "RtlCaptureStackBackTrace";
  if (id == 0x000002CE) return "XeKeysRevokeUpdateDynamic";
  if (id == 0x000002CF) return "XexImportTraceEnable";
  if (id == 0x000002D0) return "ExRegisterXConfigNotification";
  if (id == 0x000002D1) return "XeKeysSecuritySetStat";
  if (id == 0x000002D2) return "VdQueryRealVideoMode";
  if (id == 0x000002D3) return "XexSetExecutablePrivilege";
  if (id == 0x000002D4) return "XAudioSuspendRenderDriverClients";
  if (id == 0x000002D5) return "IptvGetSessionKeyHash";
  if (id == 0x000002D6) return "VdSetCGMSState";
  if (id == 0x000002D7) return "VdSetSCMSState";
  if (id == 0x000002D8) return "KeFlushMultipleTb";
  if (id == 0x000002D9) return "VdGetOption";
  if (id == 0x000002DA) return "VdSetOption";
  if (id == 0x000002DB) return "UsbdBootEnumerationDoneEvent";
  if (id == 0x000002DC) return "StfsDeviceErrorEvent";
  if (id == 0x000002DD) return "ExTryToAcquireReadWriteLockExclusive";
  if (id == 0x000002DE) return "ExTryToAcquireReadWriteLockShared";
  if (id == 0x000002DF) return "XexSetLastKdcTime";
  if (id == 0x000002E0) return "XInputdControl";
  if (id == 0x000002E1) return "RmcDeviceRequest";
  if (id == 0x000002E2) return "LDIResetDecompression";
  if (id == 0x000002E3) return "NicRegisterDevice";
  if (id == 0x000002E4) return "UsbdAddDeviceComplete";
  if (id == 0x000002E5) return "UsbdCancelAsyncTransfer";
  if (id == 0x000002E6) return "UsbdGetDeviceSpeed";
  if (id == 0x000002E7) return "UsbdGetDeviceTopology";
  if (id == 0x000002E8) return "UsbdGetEndpointDescriptor";
  if (id == 0x000002E9) return "UsbdIsDeviceAuthenticated";
  if (id == 0x000002EA) return "UsbdOpenDefaultEndpoint";
  if (id == 0x000002EB) return "UsbdOpenEndpoint";
  if (id == 0x000002EC) return "UsbdQueueAsyncTransfer";
  if (id == 0x000002ED) return "UsbdQueueCloseDefaultEndpoint";
  if (id == 0x000002EE) return "UsbdQueueCloseEndpoint";
  if (id == 0x000002EF) return "UsbdRemoveDeviceComplete";
  if (id == 0x000002F0) return "KeRemoveQueueApc";
  if (id == 0x000002F1) return "UsbdDriverLoadRequiredEvent";
  if (id == 0x000002F2) return "UsbdGetRequiredDrivers";
  if (id == 0x000002F3) return "UsbdRegisterDriverObject";
  if (id == 0x000002F4) return "UsbdUnregisterDriverObject";
  if (id == 0x000002F5) return "UsbdCallAndBlockOnDpcRoutine";
  if (id == 0x000002F6) return "UsbdResetDevice";
  if (id == 0x000002F7) return "UsbdGetDeviceDescriptor";
  if (id == 0x000002F8) return "NomnilGetExtension";
  if (id == 0x000002F9) return "NomnilStartCloseDevice";
  if (id == 0x000002FA) return "WifiBeginAuthentication";
  if (id == 0x000002FB) return "WifiCheckCounterMeasures";
  if (id == 0x000002FC) return "WifiChooseAuthenCipherSetFromBSSID";
  if (id == 0x000002FD) return "WifiCompleteAuthentication";
  if (id == 0x000002FE) return "WifiGetAssociationIE";
  if (id == 0x000002FF) return "WifiOnMICError";
  if (id == 0x00000300) return "WifiPrepareAuthenticationContext";
  if (id == 0x00000301) return "WifiRecvEAPOLPacket";
  if (id == 0x00000302) return "WifiDeduceNetworkType";
  if (id == 0x00000303) return "NicUnregisterDevice";
  if (id == 0x00000304) return "DumpXitThread";
  if (id == 0x00000305) return "XInputdSetWifiChannel";
  if (id == 0x00000306) return "NomnilSetLed";
  if (id == 0x00000307) return "WifiCalculateRegulatoryDomain";
  if (id == 0x00000308) return "WifiSelectAdHocChannel";
  if (id == 0x00000309) return "WifiChannelToFrequency";
  if (id == 0x0000030A) return "MmGetPoolPagesType";
  if (id == 0x0000030B) return "ExExpansionInstall";
  if (id == 0x0000030C) return "ExExpansionCall";
  if (id == 0x0000030D) return "PsCamDeviceRequest";
  if (id == 0x0000030E) return "McaDeviceRequest";
  if (id == 0x0000030F) return "DetroitDeviceRequest";
  if (id == 0x00000310) return "XeCryptSha256Init";
  if (id == 0x00000311) return "XeCryptSha256Update";
  if (id == 0x00000312) return "XeCryptSha256Final";
  if (id == 0x00000313) return "XeCryptSha256";
  if (id == 0x00000314) return "XeCryptSha384Init";
  if (id == 0x00000315) return "XeCryptSha384Update";
  if (id == 0x00000316) return "XInputdGetDevicePid";
  if (id == 0x00000317) return "HalGetNotedArgonErrors";
  if (id == 0x00000318) return "XeCryptSha384Final";
  if (id == 0x00000319) return "HalReadArgonEeprom";
  if (id == 0x0000031A) return "HalWriteArgonEeprom";
  if (id == 0x0000031B) return "XeKeysFcrtLoad";
  if (id == 0x0000031C) return "XeKeysFcrtSave";
  if (id == 0x0000031D) return "XeKeysFcrtSet";
  if (id == 0x0000031E) return "XeCryptSha384";
  if (id == 0x0000031F) return "XeCryptSha512Init";
  if (id == 0x00000320) return "XAudioRegisterRenderDriverMECClient";
  if (id == 0x00000321) return "XAudioUnregisterRenderDriverMECClient";
  if (id == 0x00000322) return "XAudioCaptureRenderDriverFrame";
  if (id == 0x00000323) return "XeCryptSha512Update";
  if (id == 0x00000324) return "XeCryptSha512Final";
  if (id == 0x00000325) return "XeCryptSha512";
  if (id == 0x00000326) return "XeCryptBnQwNeCompare";
  if (id == 0x00000327) return "XVoicedGetDirectionalData";
  if (id == 0x00000328) return "DrvSetMicArrayStartCallback";
  if (id == 0x00000329) return "DevAuthGetStatistics";
  if (id == 0x0000032A) return "NullCableRequest";
  if (id == 0x0000032B) return "XeKeysRevokeIsDeviceRevoked";
  if (id == 0x0000032C) return "DumpUpdateDumpSettings";
  if (id == 0x0000032D) return "EtxConsumerDisableEventType";
  if (id == 0x0000032E) return "EtxConsumerEnableEventType";
  if (id == 0x0000032F) return "EtxConsumerProcessLogs";
  if (id == 0x00000330) return "EtxConsumerRegister";
  if (id == 0x00000331) return "EtxConsumerUnregister";
  if (id == 0x00000332) return "EtxProducerLog";
  if (id == 0x00000333) return "EtxProducerLogV";
  if (id == 0x00000334) return "EtxProducerRegister";
  if (id == 0x00000335) return "EtxProducerUnregister";
  if (id == 0x00000336) return "EtxConsumerFlushBuffers";
  if (id == 0x00000337) return "EtxProducerLogXwpp";
  if (id == 0x00000338) return "EtxProducerLogXwppV";
  if (id == 0x00000339) return "UsbdEnableDisableRootHubPort";
  if (id == 0x0000033A) return "EtxBufferRegister";
  if (id == 0x0000033B) return "EtxBufferUnregister";
  if (id == 0x0000033C) return "DumpRegisterDedicatedDataBlock";
  if (id == 0x0000033D) return "XeKeysDvdAuthExSave";
  if (id == 0x0000033E) return "XeKeysDvdAuthExInstall";
  if (id == 0x0000033F) return "XexShimDisable";
  if (id == 0x00000340) return "XexShimEnable";
  if (id == 0x00000341) return "XexShimEntryDisable";
  if (id == 0x00000342) return "XexShimEntryEnable";
  if (id == 0x00000343) return "XexShimEntryRegister";
  if (id == 0x00000344) return "XexShimLock";
  if (id == 0x00000345) return "XboxKrnlVersion4Digit";
  if (id == 0x00000346) return "XeKeysObfuscateEx";
  if (id == 0x00000347) return "XeKeysUnObfuscateEx";
  if (id == 0x00000348) return "XexTitleHash";
  if (id == 0x00000349) return "XexTitleHashClose";
  if (id == 0x0000034A) return "XexTitleHashContinue";
  if (id == 0x0000034B) return "XexTitleHashOpen";
  if (id == 0x0000034C) return "XAudioGetRenderDriverTic";
  if (id == 0x0000034D) return "XAudioEnableDucker";
  if (id == 0x0000034E) return "XAudioSetDuckerLevel";
  if (id == 0x0000034F) return "XAudioIsDuckerEnabled";
  if (id == 0x00000350) return "XAudioGetDuckerLevel";
  if (id == 0x00000351) return "XAudioGetDuckerThreshold";
  if (id == 0x00000352) return "XAudioSetDuckerThreshold";
  if (id == 0x00000353) return "XAudioGetDuckerAttackTime";
  if (id == 0x00000354) return "XAudioSetDuckerAttackTime";
  if (id == 0x00000355) return "XAudioGetDuckerReleaseTime";
  if (id == 0x00000356) return "XAudioSetDuckerReleaseTime";
  if (id == 0x00000357) return "XAudioGetDuckerHoldTime";
  if (id == 0x00000358) return "XAudioSetDuckerHoldTime";
  if (id == 0x00000359) return "DevAuthShouldAlwaysEnforce";
  if (id == 0x0000035A) return "XAudioGetUnderrunCount";
  if (id == 0x0000035B) return "DrvSetAudioLatencyCallback";
  if (id == 0x0000035C) return "XVoicedIsActiveProcess";
  if (id == 0x0000035D) return "KeExecuteOnProtectedStack";
  if (id == 0x0000035E) return "XeKeysVerifyPIRSSignature";
  if (id == 0x0000035F) return "XeCryptAesCtr";
  if (id == 0x00000360) return "XeCryptAesCbcMac";
  if (id == 0x00000361) return "XeCryptAesDmMac";
  if (id == 0x00000362) return "EmaExecute";
  if (id == 0x00000363) return "XeKeysGetTruncatedSecondaryConsoleId";
  if (id == 0x00000364) return "ExFreeDebugPool";
  if (id == 0x00000365) return "VdQueryVideoCapabilities";
  if (id == 0x00000366) return "UsbdGetDeviceRootPortType";
  if (id == 0x00000367) return "VdGet3dVideoFormat";
  if (id == 0x00000368) return "VdGetWSS2Data";
  if (id == 0x00000369) return "VdSet3dVideoFormat";
  if (id == 0x0000036A) return "VdSetWSS2Data";
  if (id == 0x0000036B) return "XexReserveCodeBuffer";
  if (id == 0x0000036C) return "XexCommitCodeBuffer";
  if (id == 0x0000036D) return "RtlSetVectoredExceptionHandler";
  if (id == 0x0000036E) return "RtlClearVectoredExceptionHandler";
  if (id == 0x0000036F) return "XAudioSetProcessFrameCallback";
  if (id == 0x00000370) return "UsbdGetRootHubDeviceNode";
  if (id == 0x00000371) return "UsbdGetPortDeviceNode";
  if (id == 0x00000372) return "UsbdGetNatalHub";
  if (id == 0x00000373) return "UsbdGetNatalHardwareVersion";
  if (id == 0x00000374) return "UsbdNatalHubRegisterNotificationCallback";
  if (id == 0x00000375) return "KeCallAndBlockOnDpcRoutine";
  if (id == 0x00000376) return "KeCallAndWaitForDpcRoutine";
  if (id == 0x00000377) return "TidDeviceRequest";
  if (id == 0x00000378) return "DmPrintData";
  if (id == 0x00000379) return "VdSetStudioRGBMode";
  if (id == 0x0000037A) return "UsbdTitleDriverResetAllUnrecognizedPorts";
  if (id == 0x0000037B) return "UsbdTitleDriverSetUnrecognizedPort";
  if (id == 0x0000037C) return "UsbdResetEndpoint";
  if (id == 0x0000037D) return "UsbdSetTimer";
  if (id == 0x0000037E) return "UsbdCancelTimer";
  if (id == 0x0000037F) return "UsbdQueueIsochTransfer";
  if (id == 0x00000380) return "KeSetPageRelocationCallback";
  if (id == 0x00000381) return "XexRegisterUsermodeModule";
  if (id == 0x00000383) return "TitleDeviceAuthRequest";
  if (id == 0x00000384) return "KeRegisterSwapNotification";
  if (id == 0x00000385) return "XInputdGetFailedConnectionOrBind";
  if (id == 0x00000386) return "XInputdSetFailedConnectionOrBindCallback";
  if (id == 0x00000388) return "XInputdSetMinMaxAuthDelay";
  if (id == 0x00000389) return "VgcHandler_SetHandlers";
  if (id == 0x0000038A) return "VvcHandlerCancelTransfers";
  if (id == 0x0000038B) return "VvcHandlerRetrieveVoiceExtension";
  if (id == 0x0000038D) return "MmResetLowestAvailablePages";
  if (id == 0x00000394) return "VeSetHandlers";
  if (id == 0x00000395) return "HalConfigureVeDevice";
  if (id == 0x00000396) return "XeCryptSha224Init";
  if (id == 0x00000397) return "XeCryptAesCreateKeySchedule";
  if (id == 0x00000398) return "XeCryptAesEncryptOne";
  if (id == 0x00000399) return "XeCryptAesDecryptOne";
  if (id == 0x0000039A) return "XeCryptAesCbcEncrypt";
  if (id == 0x0000039B) return "XeCryptAesCbcDecrypt";
  if (id == 0x0000039C) return "XeCryptAesGcmInitialize";
  if (id == 0x0000039D) return "XeCryptAesGcmUpdate";
  if (id == 0x0000039E) return "XeCryptAesGcmFinalize";
  if (id == 0x0000039F) return "XeCryptEccGetCurveParameters";
  if (id == 0x000003A0) return "XeCryptEccEcdhGenerateKeypair";
  if (id == 0x000003A1) return "XeCryptEccEcdhExponentiate";
  if (id == 0x000003A2) return "XeCryptEccEcdsaGenerateSignature";
  if (id == 0x000003A3) return "XeCryptEccEcdsaVerifySignature";

  return nullptr;
}

const char* syscallNameGen(int id)
{
  if (id == 0x00000000) return "HvxGetVersions";
  if (id == 0x00000001) return "HvxStartupProcessors";
  if (id == 0x00000002) return "HvxQuiesceProcessor";
  if (id == 0x00000003) return "HvxFlushEntireTb";
  if (id == 0x00000004) return "HvxFlushSingleTb";
  if (id == 0x00000005) return "HvxRelocateAndFlush";
  if (id == 0x00000006) return "HvxGetSpecialPurposeRegister";
  if (id == 0x00000007) return "HvxSetSpecialPurposeRegister";
  if (id == 0x00000008) return "HvxGetSocRegister";
  if (id == 0x00000009) return "HvxSetSocRegister";
  if (id == 0x0000000A) return "HvxSetTimeBaseToZero";
  if (id == 0x0000000B) return "HvxZeroPage";
  if (id == 0x0000000C) return "HvxFlushDcacheRange";
  if (id == 0x0000000D) return "HvxPostOutput";
  if (id == 0x0000000E) return "HvxEnablePPUPerformanceMonitor";
  if (id == 0x0000000F) return "HvxGetImagePageTableEntry";
  if (id == 0x00000010) return "HvxSetImagePageTableEntry";
  if (id == 0x00000011) return "HvxCreateImageMapping";
  if (id == 0x00000012) return "HvxMapImagePage";
  if (id == 0x00000013) return "HvxCompleteImageMapping";
  if (id == 0x00000014) return "HvxLoadImageData";
  if (id == 0x00000015) return "HvxFinishImageDataLoad";
  if (id == 0x00000016) return "HvxStartResolveImports";
  if (id == 0x00000017) return "HvxResolveImports";
  if (id == 0x00000018) return "HvxFinishImageLoad";
  if (id == 0x00000019) return "HvxAbandonImageLoad";
  if (id == 0x0000001A) return "HvxUnmapImagePages";
  if (id == 0x0000001B) return "HvxUnmapImage";
  if (id == 0x0000001C) return "HvxUnmapImageRange";
  if (id == 0x0000001D) return "HvxCreateUserMode";
  if (id == 0x0000001E) return "HvxDeleteUserMode";
  if (id == 0x0000001F) return "HvxFlushUserModeTb";
  if (id == 0x00000020) return "HvxSetPowerMode";
  if (id == 0x00000021) return "HvxShadowBoot";
  if (id == 0x00000022) return "HvxBlowFuses";
  if (id == 0x00000023) return "HvxFsbInterrupt";
  if (id == 0x00000024) return "HvxLockL2";
  if (id == 0x00000025) return "HvxDvdAuthBuildNVPage";
  if (id == 0x00000026) return "HvxDvdAuthVerifyNVPage";
  if (id == 0x00000027) return "HvxDvdAuthRecordAuthenticationPage";
  if (id == 0x00000028) return "HvxDvdAuthRecordXControl";
  if (id == 0x00000029) return "HvxDvdAuthGetAuthPage";
  if (id == 0x0000002A) return "HvxDvdAuthVerifyAuthPage";
  if (id == 0x0000002B) return "HvxDvdAuthGetNextLBAIndex";
  if (id == 0x0000002C) return "HvxDvdAuthVerifyLBA";
  if (id == 0x0000002D) return "HvxDvdAuthClearDiscAuthInfo";
  if (id == 0x0000002E) return "HvxKeysInitialize";
  if (id == 0x0000002F) return "HvxKeysGetKeyProperties";
  if (id == 0x00000030) return "HvxKeysGetStatus";
  if (id == 0x00000031) return "HvxKeysGenerateRandomKey";
  if (id == 0x00000032) return "HvxKeysGetFactoryChallenge";
  if (id == 0x00000033) return "HvxKeysSetFactoryResponse";
  if (id == 0x00000034) return "HvxKeysSaveBootLoader";
  if (id == 0x00000035) return "HvxKeysSaveKeyVault";
  if (id == 0x00000036) return "HvxKeysSetKey";
  if (id == 0x00000037) return "HvxKeysGetKey";
  if (id == 0x00000038) return "HvxKeysGetDigest";
  if (id == 0x00000039) return "HvxKeysRsaPrvCrypt";
  if (id == 0x0000003A) return "HvxKeysHmacSha";
  if (id == 0x0000003B) return "HvxKeysAesCbc";
  if (id == 0x0000003C) return "HvxKeysDes2Cbc";
  if (id == 0x0000003D) return "HvxKeysDesCbc";
  if (id == 0x0000003E) return "HvxKeysObscureKey";
  if (id == 0x0000003F) return "HvxKeysSaveSystemUpdate";
  if (id == 0x00000040) return "HvxKeysExecute";
  if (id == 0x00000041) return "HvxDvdAuthTestMode";
  if (id == 0x00000042) return "HvxEnableTimebase";
  if (id == 0x00000043) return "HvxHdcpCalculateMi";
  if (id == 0x00000044) return "HvxHdcpCalculateAKsvSignature";
  if (id == 0x00000045) return "HvxHdcpCalculateBKsvSignature";
  if (id == 0x00000046) return "HvxSetRevocationList";
  if (id == 0x00000047) return "HvxEncryptedReserveAllocation";
  if (id == 0x00000048) return "HvxEncryptedReleaseAllocation";
  if (id == 0x00000049) return "HvxEncryptedEncryptAllocation";
  if (id == 0x0000004A) return "HvxEncryptedSweepAddressRange";
  if (id == 0x0000004B) return "HvxKeysExCreateKeyVault";
  if (id == 0x0000004C) return "HvxKeysExLoadKeyVault";
  if (id == 0x0000004D) return "HvxKeysExSaveKeyVault";
  if (id == 0x0000004E) return "HvxKeysExSetKey";
  if (id == 0x0000004F) return "HvxKeysExGetKey";
  if (id == 0x00000050) return "HvxGetUpdateSequence";
  if (id == 0x00000051) return "HvxSecurityInitialize";
  if (id == 0x00000052) return "HvxSecurityLoadSettings";
  if (id == 0x00000053) return "HvxSecuritySaveSettings";
  if (id == 0x00000054) return "HvxSecuritySetDetected";
  if (id == 0x00000055) return "HvxSecurityGetDetected";
  if (id == 0x00000056) return "HvxSecuritySetActivated";
  if (id == 0x00000057) return "HvxSecurityGetActivated";
  if (id == 0x00000058) return "HvxSecuritySetStat";
  if (id == 0x00000059) return "HvxGetProtectedFlags";
  if (id == 0x0000005A) return "HvxSetProtectedFlag";
  if (id == 0x0000005B) return "HvxDvdAuthGetAuthResults";
  if (id == 0x0000005C) return "HvxDvdAuthSetDriveAuthResult";
  if (id == 0x0000005D) return "HvxDvdAuthSetDiscAuthResult";
  if (id == 0x0000005E) return "HvxImageTransformImageKey";
  if (id == 0x0000005F) return "HvxImageXexHeader";
  if (id == 0x00000060) return "HvxRevokeLoad";
  if (id == 0x00000061) return "HvxRevokeSave";
  if (id == 0x00000062) return "HvxRevokeUpdate";
  if (id == 0x00000063) return "HvxDvdAuthGetMediaId";
  if (id == 0x00000064) return "HvxKeysLoadKeyVault";
  if (id == 0x00000065) return "HvxXexActivationGetNonce";
  if (id == 0x00000066) return "HvxXexActivationSetLicense";
  if (id == 0x00000067) return "HvxXexActivationVerifyOwnership";
  if (id == 0x00000068) return "HvxIptvSetBoundaryKey";
  if (id == 0x00000069) return "HvxIptvSetSessionKey";
  if (id == 0x0000006A) return "HvxIptvVerifyOmac1Signature";
  if (id == 0x0000006B) return "HvxIptvGetAesCtrTransform";
  if (id == 0x0000006C) return "HvxIptvGetSessionKeyHash";
  if (id == 0x0000006D) return "HvxImageDvdEmulationMode";
  if (id == 0x0000006E) return "HvxImageUserMode";
  if (id == 0x0000006F) return "HvxImageShim";
  if (id == 0x00000070) return "HvxExpansionInstall";
  if (id == 0x00000071) return "HvxExpansionCall";
  if (id == 0x00000072) return "HvxDvdAuthFwcr";
  if (id == 0x00000073) return "HvxDvdAuthFcrt";
  if (id == 0x00000074) return "HvxDvdAuthEx";
  if (id == 0x00000075) return "HvxTest";

  return nullptr;
}

// <= 1640 only
const char* driversNameGen(int id)
{
  if (id == 0x00000001) return "VdBlockUntilGUIIdle";
  if (id == 0x00000002) return "VdCallGraphicsNotificationRoutines";
  if (id == 0x00000003) return "VdEdramHeap";
  if (id == 0x00000004) return "VdSetColorProfileAdjustment";
  if (id == 0x00000005) return "VdEnableDisablePowerSavingMode";
  if (id == 0x00000006) return "VdEnableRingBufferRPtrWriteBack";
  if (id == 0x00000008) return "VdGetCurrentDisplayInformation";
  if (id == 0x00000009) return "VdGetDefaultGammaTable";
  if (id == 0x0000000A) return "VdGetDefaultMEInitCommand";
  if (id == 0x0000000B) return "VdGetGraphicsAsicID";
  if (id == 0x0000000C) return "VdGetSystemCommandBuffer";
  if (id == 0x0000000D) return "VdGlobalDevice";
  if (id == 0x0000000E) return "VdInitializeEngines";
  if (id == 0x0000000F) return "VdInitializeRingBuffer";
  if (id == 0x00000010) return "VdInitializeScaler";
  if (id == 0x00000011) return "VdInitializeScalerCommandBuffer";
  if (id == 0x00000012) return "VdIsHSIOTrainingSucceeded";
  if (id == 0x00000013) return "VdQuerySystemCommandBuffer";
  if (id == 0x00000014) return "VdRegisterGraphicsNotification";
  if (id == 0x00000015) return "VdSetDisplayMode";
  if (id == 0x00000016) return "VdGenerateGPUCSCCoefficients";
  if (id == 0x00000017) return "VdSetGraphicsInterruptCallback";
  if (id == 0x00000018) return "VdSetSystemCommandBuffer";
  if (id == 0x00000019) return "?VdSetSystemCommandBufferGpuIdentifierAddress@@YAXPAK@Z";
  if (id == 0x0000001A) return "VdShutdownEngines";
  if (id == 0x0000001B) return "VdTurnDisplayOff";
  if (id == 0x0000001C) return "VdTurnDisplayOn";
  if (id == 0x0000001D) return "XVoicedSubmitPacket";
  if (id == 0x0000001E) return "XVoicedClose";
  if (id == 0x0000001F) return "XVoicedActivate";
  if (id == 0x00000020) return "XInputdGetCapabilities";
  if (id == 0x00000021) return "XInputdReadState";
  if (id == 0x00000022) return "XInputdWriteState";
  if (id == 0x00000023) return "XInputdNotify";
  if (id == 0x00000024) return "XInputdRawState";
  if (id == 0x00000025) return "HidGetCapabilities";
  if (id == 0x00000026) return "HidReadKeys";
  if (id == 0x00000027) return "XAudioRenderDriverInitialize";
  if (id == 0x00000028) return "XAudioRegisterRenderDriverClient";
  if (id == 0x00000029) return "XAudioUnregisterRenderDriverClient";
  if (id == 0x0000002A) return "XAudioSubmitRenderDriverFrame";
  if (id == 0x0000002B) return "XAudioRenderDriverLock";
  if (id == 0x0000002C) return "XAudioGetVoiceCategoryVolumeChangeMask";
  if (id == 0x0000002D) return "XAudioGetVoiceCategoryVolume";
  if (id == 0x0000002E) return "XAudioSetVoiceCategoryVolume";
  if (id == 0x0000002F) return "XAudioBeginDolbyDigitalBypassMode";
  if (id == 0x00000030) return "XAudioEndDolbyDigitalBypassMode";
  if (id == 0x00000031) return "XAudioSubmitDolbyDigitalPacket";
  if (id == 0x00000032) return "NicSetUnicastAddress";
  if (id == 0x00000033) return "NicAttach";
  if (id == 0x00000034) return "NicDetach";
  if (id == 0x00000035) return "NicXmit";
  if (id == 0x00000036) return "NicUpdateMcastMembership";
  if (id == 0x00000037) return "NicFlushXmitQueue";
  if (id == 0x00000038) return "NicShutdown";
  if (id == 0x00000039) return "NicGetLinkState";
  if (id == 0x0000003A) return "NicGetStats";
  if (id == 0x0000003B) return "NicReadAlphaNicFactoryAddress";
  if (id == 0x0000003C) return "DrvSetSysReqCallback";
  if (id == 0x0000003D) return "DrvSetUserBindingCallback";
  if (id == 0x0000003E) return "DrvSetContentStorageCallback";
  if (id == 0x0000003F) return "DrvSetAutobind";
  if (id == 0x00000040) return "MtpdBeginTransaction";
  if (id == 0x00000041) return "MtpdCancelTransaction";
  if (id == 0x00000042) return "MtpdEndTransaction";
  if (id == 0x00000043) return "MtpdGetCurrentDevices";
  if (id == 0x00000044) return "MtpdReadData";
  if (id == 0x00000045) return "MtpdReadEvent";
  if (id == 0x00000046) return "MtpdResetDevice";
  if (id == 0x00000047) return "MtpdSendData";
  if (id == 0x00000048) return "XUsbcamSetCaptureMode";
  if (id == 0x00000049) return "XUsbcamGetConfig";
  if (id == 0x0000004A) return "XUsbcamGetHWConfig";
  if (id == 0x0000004B) return "XUsbcamSetConfig";
  if (id == 0x0000004C) return "XUsbcamGetState";
  if (id == 0x0000004D) return "XUsbcamReadFrame";
  if (id == 0x0000004E) return "XUsbcamSnapshot";
  if (id == 0x0000004F) return "XMACreateContext";
  if (id == 0x00000050) return "XMAInitializeContext";
  if (id == 0x00000051) return "XMAReleaseContext";
  if (id == 0x00000052) return "XMAEnableContext";
  if (id == 0x00000053) return "XMADisableContext";
  if (id == 0x00000054) return "XMAGetOutputBufferWriteOffset";
  if (id == 0x00000055) return "XMASetOutputBufferReadOffset";
  if (id == 0x00000056) return "XMAGetOutputBufferReadOffset";
  if (id == 0x00000057) return "XMASetOutputBufferValid";
  if (id == 0x00000058) return "XMAIsOutputBufferValid";
  if (id == 0x00000059) return "XMASetInputBuffer0Valid";
  if (id == 0x0000005A) return "XMAIsInputBuffer0Valid";
  if (id == 0x0000005B) return "XMASetInputBuffer1Valid";
  if (id == 0x0000005C) return "XMAIsInputBuffer1Valid";
  if (id == 0x0000005D) return "XMASetInputBuffer0";
  if (id == 0x0000005E) return "XMASetInputBuffer1";
  if (id == 0x0000005F) return "XMAGetPacketMetadata";
  if (id == 0x00000060) return "XMABlockWhileInUse";
  if (id == 0x00000061) return "XMASetLoopData";
  if (id == 0x00000062) return "XMASetInputBufferReadOffset";
  if (id == 0x00000063) return "VdSetDisplayModeOverride";
  if (id == 0x00000064) return "VdGetDisplayModeOverride";
  if (id == 0x00000065) return "XInputdGetDeviceStats";
  if (id == 0x00000066) return "?VdReadDVERegisterUlong@@YAKK@Z";
  if (id == 0x00000067) return "?VdWriteDVERegisterUlong@@YAXKK@Z";
  if (id == 0x00000068) return "VdEnableClosedCaption";
  if (id == 0x00000069) return "VdSendClosedCaptionData";
  if (id == 0x0000006A) return "VdGetClosedCaptionReadyStatus";
  if (id == 0x0000006B) return "VdSetCGMSOption";
  if (id == 0x0000006C) return "?VdSetWSSData@@YAXU_VD_WSS_DATA@@@Z";
  if (id == 0x0000006D) return "VdSetMacrovisionOption";
  if (id == 0x0000006E) return "XAudioQueryDriverPerformance";
  if (id == 0x0000006F) return "VdReadWriteHSIOCalibrationFlag";
  if (id == 0x00000070) return "VdHSIOCalibrationLock";
  if (id == 0x00000071) return "VdGetCurrentDisplayGamma";
  if (id == 0x00000072) return "NicGetOpt";
  if (id == 0x00000073) return "NicSetOpt";
  if (id == 0x00000074) return "XAudioGetRenderDriverThread";
  if (id == 0x00000075) return "VdSetWSSOption";
  if (id == 0x00000076) return "MtpdVerifyProximity";
  if (id == 0x00000077) return "?VdDisplayFatalError@@YAXK@Z";

  return nullptr;
}

// <= 1640 only
const char* xnetNameGen(int id)
{
  if (id == 0x00000001) return "NetDll_WSAStartup";
  if (id == 0x00000002) return "NetDll_WSACleanup";
  if (id == 0x00000003) return "NetDll_socket";
  if (id == 0x00000004) return "NetDll_closesocket";
  if (id == 0x00000005) return "NetDll_shutdown";
  if (id == 0x00000006) return "NetDll_ioctlsocket";
  if (id == 0x00000007) return "NetDll_setsockopt";
  if (id == 0x00000008) return "NetDll_getsockopt";
  if (id == 0x00000009) return "NetDll_getsockname";
  if (id == 0x0000000A) return "NetDll_getpeername";
  if (id == 0x0000000B) return "NetDll_bind";
  if (id == 0x0000000C) return "NetDll_connect";
  if (id == 0x0000000D) return "NetDll_listen";
  if (id == 0x0000000E) return "NetDll_accept";
  if (id == 0x0000000F) return "NetDll_select";
  if (id == 0x00000010) return "NetDll_WSAGetOverlappedResult";
  if (id == 0x00000011) return "NetDll_WSACancelOverlappedIO";
  if (id == 0x00000012) return "NetDll_recv";
  if (id == 0x00000013) return "NetDll_WSARecv";
  if (id == 0x00000014) return "NetDll_recvfrom";
  if (id == 0x00000015) return "NetDll_WSARecvFrom";
  if (id == 0x00000016) return "NetDll_send";
  if (id == 0x00000017) return "NetDll_WSASend";
  if (id == 0x00000018) return "NetDll_sendto";
  if (id == 0x00000019) return "NetDll_WSASendTo";
  if (id == 0x0000001A) return "NetDll_inet_addr";
  if (id == 0x0000001B) return "NetDll_WSAGetLastError";
  if (id == 0x0000001C) return "NetDll_WSASetLastError";
  if (id == 0x0000001D) return "NetDll_WSACreateEvent";
  if (id == 0x0000001E) return "NetDll_WSACloseEvent";
  if (id == 0x0000001F) return "NetDll_WSASetEvent";
  if (id == 0x00000020) return "NetDll_WSAResetEvent";
  if (id == 0x00000021) return "NetDll_WSAWaitForMultipleEvents";
  if (id == 0x00000022) return "NetDll___WSAFDIsSet";
  if (id == 0x00000023) return "NetDll_WSAEventSelect";
  if (id == 0x00000033) return "NetDll_XNetStartup";
  if (id == 0x00000034) return "NetDll_XNetCleanup";
  if (id == 0x00000035) return "NetDll_XNetRandom";
  if (id == 0x00000036) return "NetDll_XNetCreateKey";
  if (id == 0x00000037) return "NetDll_XNetRegisterKey";
  if (id == 0x00000038) return "NetDll_XNetUnregisterKey";
  if (id == 0x00000039) return "NetDll_XNetXnAddrToInAddr";
  if (id == 0x0000003A) return "NetDll_XNetServerToInAddr";
  if (id == 0x0000003B) return "NetDll_XNetTsAddrToInAddr";
  if (id == 0x0000003C) return "NetDll_XNetInAddrToXnAddr";
  if (id == 0x0000003D) return "NetDll_XNetInAddrToServer";
  if (id == 0x0000003E) return "NetDll_XNetInAddrToString";
  if (id == 0x0000003F) return "NetDll_XNetUnregisterInAddr";
  if (id == 0x00000040) return "NetDll_XNetXnAddrToMachineId";
  if (id == 0x00000041) return "NetDll_XNetConnect";
  if (id == 0x00000042) return "NetDll_XNetGetConnectStatus";
  if (id == 0x00000043) return "NetDll_XNetDnsLookup";
  if (id == 0x00000044) return "NetDll_XNetDnsRelease";
  if (id == 0x00000045) return "NetDll_XNetQosListen";
  if (id == 0x00000046) return "NetDll_XNetQosLookup";
  if (id == 0x00000047) return "NetDll_XNetQosServiceLookup";
  if (id == 0x00000048) return "NetDll_XNetQosRelease";
  if (id == 0x00000049) return "NetDll_XNetGetTitleXnAddr";
  if (id == 0x0000004A) return "NetDll_XNetGetDebugXnAddr";
  if (id == 0x0000004B) return "NetDll_XNetGetEthernetLinkStatus";
  if (id == 0x0000004C) return "NetDll_XNetGetBroadcastVersionStatus";
  if (id == 0x0000004D) return "NetDll_XNetQosGetListenStats";
  if (id == 0x0000004E) return "NetDll_XNetGetOpt";
  if (id == 0x0000004F) return "NetDll_XNetSetOpt";
  if (id == 0x00000065) return "NetDll_XnpLoadConfigParams";
  if (id == 0x00000066) return "NetDll_XnpSaveConfigParams";
  if (id == 0x00000067) return "NetDll_XnpConfigUPnP";
  if (id == 0x00000068) return "NetDll_XnpConfig";
  if (id == 0x00000069) return "NetDll_XnpGetConfigStatus";
  if (id == 0x0000006A) return "NetDll_XnpLoadMachineAccount";
  if (id == 0x0000006B) return "NetDll_XnpSaveMachineAccount";
  if (id == 0x0000006C) return "NetDll_XnpCapture";
  if (id == 0x0000006D) return "NetDll_XnpEthernetInterceptSetCallbacks";
  if (id == 0x0000006E) return "NetDll_XnpEthernetInterceptXmit";
  if (id == 0x0000006F) return "NetDll_XnpEthernetInterceptRecv";
  if (id == 0x00000070) return "NetDll_XnpLogonGetStatus";
  if (id == 0x00000071) return "NetDll_XnpLogonGetQFlags";
  if (id == 0x00000072) return "NetDll_XnpLogonSetQFlags";
  if (id == 0x00000073) return "NetDll_XnpLogonSetQEvent";
  if (id == 0x00000074) return "NetDll_XnpLogonClearQEvent";
  if (id == 0x00000075) return "NetDll_XnpLogonGetQVals";
  if (id == 0x00000076) return "NetDll_XnpLogonSetQVals";
  if (id == 0x00000077) return "NetDll_XnpLogonSetPState";
  if (id == 0x00000078) return "NetDll_XnpGetVlanXboxName";
  if (id == 0x00000079) return "NetDll_XnpSetVlanXboxName";
  if (id == 0x0000007A) return "NetDll_XnpGetActiveSocketList";
  if (id == 0x0000007B) return "NetDll_XnpNoteSystemTime";
  if (id == 0x00000097) return "NetDll_XmlDownloadStart";
  if (id == 0x00000098) return "NetDll_XmlDownloadContinue";
  if (id == 0x00000099) return "NetDll_XmlDownloadStop";
  if (id == 0x000000C9) return "NetDll_XHttpStartup";
  if (id == 0x000000CA) return "NetDll_XHttpShutdown";
  if (id == 0x000000CB) return "NetDll_XHttpOpen";
  if (id == 0x000000CC) return "NetDll_XHttpCloseHandle";
  if (id == 0x000000CD) return "NetDll_XHttpConnect";
  if (id == 0x000000CE) return "NetDll_XHttpSetStatusCallback";
  if (id == 0x000000CF) return "NetDll_XHttpOpenRequest";
  if (id == 0x000000D0) return "NetDll_XHttpOpenRequestUsingMemory";
  if (id == 0x000000D1) return "NetDll_XHttpSendRequest";
  if (id == 0x000000D2) return "NetDll_XHttpReceiveResponse";
  if (id == 0x000000D3) return "NetDll_XHttpQueryHeaders";
  if (id == 0x000000D4) return "NetDll_XHttpReadData";
  if (id == 0x000000D5) return "NetDll_XHttpWriteData";
  if (id == 0x000000D6) return "NetDll_XHttpQueryOption";
  if (id == 0x000000D7) return "NetDll_XHttpSetOption";
  if (id == 0x000000D8) return "NetDll_XHttpDoWork";
  if (id == 0x000000FB) return "NetDll_UpnpStartup";
  if (id == 0x000000FC) return "NetDll_UpnpCleanup";
  if (id == 0x000000FD) return "NetDll_UpnpSearchCreate";
  if (id == 0x000000FE) return "NetDll_UpnpSearchGetDevices";
  if (id == 0x000000FF) return "NetDll_UpnpDescribeCreate";
  if (id == 0x00000100) return "NetDll_UpnpDescribeGetResults";
  if (id == 0x00000101) return "NetDll_UpnpActionCreate";
  if (id == 0x00000102) return "NetDll_UpnpActionGetResults";
  if (id == 0x00000103) return "NetDll_UpnpEventCreate";
  if (id == 0x00000104) return "NetDll_UpnpEventGetCurrentState";
  if (id == 0x00000105) return "NetDll_UpnpEventUnsubscribe";
  if (id == 0x00000106) return "NetDll_UpnpDoWork";
  if (id == 0x00000107) return "NetDll_UpnpCloseHandle";
  if (id == 0x0000012D) return "XNetLogonGetLoggedOnUsers";
  if (id == 0x0000012E) return "XNetLogonGetNatType";
  if (id == 0x0000012F) return "XNetLogonTaskStart";
  if (id == 0x00000130) return "XNetLogonTaskClose";
  if (id == 0x00000131) return "XNetLogonTaskContinue";
  if (id == 0x00000132) return "XNetLogonGetServiceInfo";
  if (id == 0x00000133) return "XNetLogonGetUserPrivileges";
  if (id == 0x00000134) return "?XNetLogonSetConsoleCertificate@@YAHPBUCONSOLE_CERTIFICATE@@@Z";
  if (id == 0x00000135) return "XNetLogonGetMachineID";
  if (id == 0x00000136) return "XNetLogonGetTitleID";
  if (id == 0x00000137) return "XNetLogonGetTitleVersion";
  if (id == 0x00000138) return "XNetLogonGetServiceNetworkID";
  if (id == 0x00000139) return "XNetLogonGetDnsString";
  if (id == 0x0000013A) return "XNetLogonSetTitleID";

  return nullptr;
}

std::string DoNameGen(const std::string& libName, int id, int version)
{
  std::string lib = libName;
  auto pos = lib.find_first_of('.');
  if (pos != std::string::npos)
    lib = lib.substr(0, pos);
  pos = lib.find_last_of('\\');
  if (pos != std::string::npos && lib.length() > pos + 1)
    lib = lib.substr(pos + 1);
  pos = lib.find_last_of('/');
  if (pos != std::string::npos && lib.length() > pos + 1)
    lib = lib.substr(pos + 1);

  const char* name = 0;
  if (lib == "connectx")
    name = connectxNameGen(id);
  else if (lib == "createprofile")
    name = createprofileNameGen(id);
  else if (lib == "vk")
    name = vkNameGen(id);
  else if (lib == "xam" || lib == "xamc" || lib == "xamd")
    name = xamNameGen(id, version);
  else if (lib == "xapi" || lib == "xapid")
    name = xapiNameGen(id);
  else if (lib == "xbdm")
    name = xbdmNameGen(id, version);
  else if (lib == "xboxkrnl")
    name = xboxkrnlNameGen(id, version);
  else if (lib == "syscall")
    name = syscallNameGen(id);
  else if (lib == "drivers" && version <= 1640)
    name = driversNameGen(id);
  else if (lib == "xnet" && version <= 1640)
    name = xnetNameGen(id);

  if (name)
    return std::string(name);

  std::stringstream ss;
  ss << lib << "_";
  ss << std::setfill('0') << std::setw(4) << std::hex << id;
  return ss.str();
}
