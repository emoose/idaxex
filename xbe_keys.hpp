#include <cstdint>
// XBE thunk/EP keys are derived from the RSA public keys used to verify XBE signatures
// So far we have pubkeys for retail/debug/chihiro
// but currently missing XBL beta pubkey
// TODO: are there any dumps of XBL beta bios/kernel we can extract pubkey from?

constexpr uint8_t kXePublicKeyData_Retail[284] = {
	0x52, 0x53, 0x41, 0x31, 
	0x08, 0x01, 0x00, 0x00, 
	0x00, 0x08, 0x00, 0x00, 
	0xFF, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x01, 0x00, 
	0xD3, 0xD7, 0x4E, 0xE5, 0x66, 0x3D, 0xD7, 0xE6, 0xC2, 0xD4, 0xA3, 0xA1,
	0xF2, 0x17, 0x36, 0xD4, 0x2E, 0x52, 0xF6, 0xD2, 0x02, 0x10, 0xF5, 0x64, 0x9C, 0x34, 0x7B, 0xFF,
	0xEF, 0x7F, 0xC2, 0xEE, 0xBD, 0x05, 0x8B, 0xDE, 0x79, 0xB4, 0x77, 0x8E, 0x5B, 0x8C, 0x14, 0x99,
	0xE3, 0xAE, 0xC6, 0x73, 0x72, 0x73, 0xB5, 0xFB, 0x01, 0x5B, 0x58, 0x46, 0x6D, 0xFC, 0x8A, 0xD6,
	0x95, 0xDA, 0xED, 0x1B, 0x2E, 0x2F, 0xA2, 0x29, 0xE1, 0x3F, 0xF1, 0xB9, 0x5B, 0x64, 0x51, 0x2E,
	0xA2, 0xC0, 0xF7, 0xBA, 0xB3, 0x3E, 0x8A, 0x75, 0xFF, 0x06, 0x92, 0x5C, 0x07, 0x26, 0x75, 0x79,
	0x10, 0x5D, 0x47, 0xBE, 0xD1, 0x6A, 0x52, 0x90, 0x0B, 0xAE, 0x6A, 0x0B, 0x33, 0x44, 0x93, 0x5E,
	0xF9, 0x9D, 0xFB, 0x15, 0xD9, 0xA4, 0x1C, 0xCF, 0x6F, 0xE4, 0x71, 0x94, 0xBE, 0x13, 0x00, 0xA8,
	0x52, 0xCA, 0x07, 0xBD, 0x27, 0x98, 0x01, 0xA1, 0x9E, 0x4F, 0xA3, 0xED, 0x9F, 0xA0, 0xAA, 0x73,
	0xC4, 0x71, 0xF3, 0xE9, 0x4E, 0x72, 0x42, 0x9C, 0xF0, 0x39, 0xCE, 0xBE, 0x03, 0x76, 0xFA, 0x2B,
	0x89, 0x14, 0x9A, 0x81, 0x16, 0xC1, 0x80, 0x8C, 0x3E, 0x6B, 0xAA, 0x05, 0xEC, 0x67, 0x5A, 0xCF,
	0xA5, 0x70, 0xBD, 0x60, 0x0C, 0xE8, 0x37, 0x9D, 0xEB, 0xF4, 0x52, 0xEA, 0x4E, 0x60, 0x9F, 0xE4,
	0x69, 0xCF, 0x52, 0xDB, 0x68, 0xF5, 0x11, 0xCB, 0x57, 0x8F, 0x9D, 0xA1, 0x38, 0x0A, 0x0C, 0x47,
	0x1B, 0xB4, 0x6C, 0x5A, 0x53, 0x6E, 0x26, 0x98, 0xF1, 0x88, 0xAE, 0x7C, 0x96, 0xBC, 0xF6, 0xBF,
	0xB0, 0x47, 0x9A, 0x8D, 0xE4, 0xB3, 0xE2, 0x98, 0x85, 0x61, 0xB1, 0xCA, 0x5F, 0xF7, 0x98, 0x51,
	0x2D, 0x83, 0x81, 0x76, 0x0C, 0x88, 0xBA, 0xD4, 0xC2, 0xD5, 0x3C, 0x14, 0xC7, 0x72, 0xDA, 0x7E,
	0xBD, 0x1B, 0x4B, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
constexpr uint32_t kXePublicKeyData_Retail_0x80 = 0x15fb9df9;
constexpr uint32_t kXePublicKeyData_Retail_0x84 = 0xcf1ca4d9;
constexpr uint32_t kXePublicKeyData_Retail_0x88 = 0x9471e46f;
constexpr uint32_t kXePublicKeyData_Retail_0x90 = 0xbd07ca52;

// Debug Public Key
constexpr uint8_t kXePublicKeyData_Debug[284] = {
	0x52, 0x53, 0x41, 0x31, 
	0x08, 0x01, 0x00, 0x00, 
	0x00, 0x08, 0x00, 0x00, 
	0xFF, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x01, 0x00, 
	0x9B, 0x83, 0xD4, 0xD5, 0xDE, 0x16, 0x25, 0x8E, 0xE5, 0x15, 0xF2, 0x18,
	0x9D, 0x19, 0x1C, 0xF8, 0xFE, 0x91, 0xA5, 0x83, 0xAE, 0xA5, 0xA8, 0x95, 0x3F, 0x01, 0xB2, 0xC9,
	0x34, 0xFB, 0xC7, 0x51, 0x2D, 0xAC, 0xFF, 0x38, 0xE6, 0xB6, 0x7B, 0x08, 0x4A, 0xDF, 0x98, 0xA3,
	0xFD, 0x31, 0x81, 0xBF, 0xAA, 0xD1, 0x62, 0x58, 0xC0, 0x6C, 0x8F, 0x8E, 0xCD, 0x96, 0xCE, 0x6D,
	0x03, 0x44, 0x59, 0x93, 0xCE, 0xEA, 0x8D, 0xF4, 0xD4, 0x6F, 0x6F, 0x34, 0x5D, 0x50, 0xF1, 0xAE,
	0x99, 0x7F, 0x1D, 0x92, 0x15, 0xF3, 0x6B, 0xDB, 0xF9, 0x95, 0x8B, 0x3F, 0x54, 0xAD, 0x37, 0xB5,
	0x4F, 0x0A, 0x58, 0x7B, 0x48, 0xA2, 0x9F, 0x9E, 0xA3, 0x16, 0xC8, 0xBD, 0x37, 0xDA, 0x9A, 0x37,
	0xE6, 0x3F, 0x10, 0x1B, 0xA8, 0x4F, 0xA3, 0x14, 0xFA, 0xBE, 0x12, 0xFB, 0xD7, 0x19, 0x4C, 0xED,
	0xAD, 0xA2, 0x95, 0x8F, 0x39, 0x8C, 0xC4, 0x69, 0x0F, 0x7D, 0xB8, 0x84, 0x0A, 0x99, 0x5C, 0x53,
	0x2F, 0xDE, 0xF2, 0x1B, 0xC5, 0x1D, 0x4C, 0x43, 0x3C, 0x97, 0xA7, 0xBA, 0x8F, 0xC3, 0x22, 0x67,
	0x39, 0xC2, 0x62, 0x74, 0x3A, 0x0C, 0xB5, 0x57, 0x01, 0x3A, 0x67, 0xC6, 0xDE, 0x0C, 0x0B, 0xF6,
	0x08, 0x01, 0x64, 0xDB, 0xBD, 0x81, 0xE4, 0xDC, 0x09, 0x2E, 0xD0, 0xF1, 0xD0, 0xD6, 0x1E, 0xBA,
	0x38, 0x36, 0xF4, 0x4A, 0xDD, 0xCA, 0x39, 0xEB, 0x76, 0xCF, 0x95, 0xDC, 0x48, 0x4C, 0xF2, 0x43,
	0x8C, 0xD9, 0x44, 0x26, 0x7A, 0x9E, 0xEB, 0x99, 0xA3, 0xD8, 0xFB, 0x30, 0xA8, 0x14, 0x42, 0x82,
	0x8D, 0xB4, 0x31, 0xB3, 0x1A, 0xD5, 0x2B, 0xF6, 0x32, 0xBC, 0x62, 0xC0, 0xFE, 0x81, 0x20, 0x49,
	0xE7, 0xF7, 0x58, 0x2F, 0x2D, 0xA6, 0x1B, 0x41, 0x62, 0xC7, 0xE0, 0x32, 0x02, 0x5D, 0x82, 0xEC,
	0xA3, 0xE4, 0x6C, 0x9B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
constexpr uint32_t kXePublicKeyData_Debug_0x80 = 0x1b103fe6;
constexpr uint32_t kXePublicKeyData_Debug_0x84 = 0x14a34fa8;
constexpr uint32_t kXePublicKeyData_Debug_0x88 = 0xfb12befa;
constexpr uint32_t kXePublicKeyData_Debug_0x90 = 0x8f95a2ad;

// Chihiro public key (Segaboot)
constexpr uint8_t kXePublicKeyData_Chihiro[284] = {
	0x52, 0x53, 0x41, 0x31, 
	0x08, 0x01, 0x00, 0x00, 
	0x00, 0x08, 0x00, 0x00, 
	0xFF, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x01, 0x00, 
	0x6B, 0x7B, 0x38, 0x78, 0xE3, 0x16, 0x04, 0x88, 0x1D, 0xAF, 0x63, 0x4E,
	0x23, 0xDB, 0x10, 0x14, 0xB4, 0x52, 0x87, 0xEB, 0xE3, 0x37, 0xC2, 0x35, 0x6E, 0x38, 0x08, 0xDC,
	0x07, 0xC5, 0x92, 0x17, 0xC0, 0xBF, 0xDB, 0xF5, 0x9E, 0x72, 0xDB, 0x2F, 0x98, 0x93, 0x6E, 0x98,
	0x5E, 0xD9, 0x69, 0x80, 0x17, 0xFC, 0x0C, 0x72, 0x2E, 0xE6, 0x75, 0x85, 0x48, 0xEA, 0xBD, 0xDA,
	0x6E, 0x82, 0xD9, 0xFB, 0x10, 0xAA, 0x11, 0xEE, 0xB5, 0xC1, 0xF2, 0x53, 0xD6, 0xF0, 0xD3, 0x4B,
	0xC2, 0x11, 0x4F, 0x8A, 0x18, 0xFB, 0xB7, 0x36, 0xFC, 0xDD, 0xD0, 0xBF, 0x5C, 0x32, 0x44, 0x40,
	0xEB, 0x92, 0x70, 0xA4, 0xEF, 0x3A, 0xAB, 0x78, 0x66, 0x1A, 0x03, 0x0A, 0x9E, 0xC5, 0x3A, 0xB7,
	0x8F, 0xE5, 0xB1, 0x5E, 0x44, 0x15, 0xBA, 0x42, 0xD9, 0x10, 0x2A, 0x60, 0x93, 0x47, 0x4C, 0x5B,
	0xE1, 0x24, 0x04, 0x1E, 0x5C, 0x95, 0xB2, 0x17, 0x34, 0xD2, 0x37, 0x5F, 0x85, 0x83, 0x62, 0x8D,
	0x6E, 0x90, 0x69, 0x06, 0xB9, 0xFB, 0x7A, 0x24, 0x8A, 0xE6, 0xCC, 0x77, 0x1E, 0x0A, 0x8C, 0x2B,
	0x3B, 0xA2, 0x33, 0x79, 0x24, 0x8C, 0xD3, 0x88, 0x01, 0x3A, 0x38, 0x7F, 0xF0, 0xAB, 0x9E, 0x2F,
	0x74, 0xCE, 0x50, 0xD1, 0xC2, 0x00, 0x57, 0xD3, 0xA7, 0x09, 0x45, 0x36, 0xFA, 0xC1, 0xC7, 0x1B,
	0x65, 0xAD, 0x98, 0x9C, 0x63, 0xED, 0xBA, 0x99, 0x9B, 0x07, 0x3E, 0x57, 0xBD, 0xB5, 0x52, 0x44,
	0x72, 0x09, 0x43, 0xE0, 0x5C, 0x35, 0xCC, 0xE4, 0xE0, 0x85, 0x6A, 0x61, 0xAA, 0xF5, 0x0D, 0x1E,
	0xE7, 0x8F, 0xB0, 0xB9, 0xE3, 0xC3, 0x83, 0x10, 0x6C, 0x2F, 0x5D, 0xD4, 0xAB, 0x2D, 0xAB, 0x4D,
	0xCE, 0xC9, 0x7F, 0x52, 0x39, 0x13, 0xED, 0x44, 0x06, 0x23, 0x2F, 0x62, 0xFF, 0xA1, 0x2B, 0xEE,
	0x07, 0x98, 0x7D, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
constexpr uint32_t kXePublicKeyData_Chihiro_0x80 = 0x5eb1e58f;
constexpr uint32_t kXePublicKeyData_Chihiro_0x84 = 0x42ba1544;
constexpr uint32_t kXePublicKeyData_Chihiro_0x88 = 0x602a10d9;
constexpr uint32_t kXePublicKeyData_Chihiro_0x90 = 0x1e0424e1;

// Keys are derived via: 
//   uint32_t* key_base = (uint32_t*)&XePublicKeyData[0x80]
//   KernelThunkKey = key_base[1] ^ key_base[2];
//   EntryPointKey = key_base[0] ^ key_base[4];
// Where XePublicKeyData is export 355 from kernel, beginning with RSA1 header

constexpr uint32_t kXbeXorKernel_Retail = kXePublicKeyData_Retail_0x84 ^ kXePublicKeyData_Retail_0x88;
constexpr uint32_t kXbeXorEntry_Retail = kXePublicKeyData_Retail_0x80 ^ kXePublicKeyData_Retail_0x90;
static_assert(kXbeXorKernel_Retail == 0x5B6D40B6);
static_assert(kXbeXorEntry_Retail == 0xA8FC57AB);

constexpr uint32_t kXbeXorKernel_Debug = kXePublicKeyData_Debug_0x84 ^ kXePublicKeyData_Debug_0x88;
constexpr uint32_t kXbeXorEntry_Debug = kXePublicKeyData_Debug_0x80 ^ kXePublicKeyData_Debug_0x90;
static_assert(kXbeXorKernel_Debug == 0xEFB1F152);
static_assert(kXbeXorEntry_Debug == 0x94859D4B);

constexpr uint32_t kXbeXorKernel_Chihiro = kXePublicKeyData_Chihiro_0x84 ^ kXePublicKeyData_Chihiro_0x88;
constexpr uint32_t kXbeXorEntry_Chihiro = kXePublicKeyData_Chihiro_0x80 ^ kXePublicKeyData_Chihiro_0x90;
static_assert(kXbeXorKernel_Chihiro == 0x2290059D);
static_assert(kXbeXorEntry_Chihiro == 0x40B5C16E);

// TODO: are there any dumps of XBL beta bios/kernel we can extract pubkey from?
constexpr uint32_t kXbeXorKernel_XBLBeta = 0x46437DCD;
constexpr uint32_t kXbeXorEntry_XBLBeta = 0xE682F45B;
static_assert(kXbeXorKernel_XBLBeta == 0x46437DCD);
static_assert(kXbeXorEntry_XBLBeta == 0xE682F45B);
